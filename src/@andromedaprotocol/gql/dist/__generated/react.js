"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCrowdfundConfigLazyQuery = exports.useCrowdfundConfigQuery = exports.CrowdfundConfigDocument = exports.refetchCrowdfundIsTokenAvailableQuery = exports.useCrowdfundIsTokenAvailableLazyQuery = exports.useCrowdfundIsTokenAvailableQuery = exports.CrowdfundIsTokenAvailableDocument = exports.refetchCrowdfundAvailableTokensQuery = exports.useCrowdfundAvailableTokensLazyQuery = exports.useCrowdfundAvailableTokensQuery = exports.CrowdfundAvailableTokensDocument = exports.refetchMiniBaseAdoQuery = exports.useMiniBaseAdoLazyQuery = exports.useMiniBaseAdoQuery = exports.MiniBaseAdoDocument = exports.refetchBaseAdoQuery = exports.useBaseAdoLazyQuery = exports.useBaseAdoQuery = exports.BaseAdoDocument = exports.refetchAssetsQuery = exports.useAssetsLazyQuery = exports.useAssetsQuery = exports.AssetsDocument = exports.refetchAppConfigAndComponentsQuery = exports.useAppConfigAndComponentsLazyQuery = exports.useAppConfigAndComponentsQuery = exports.AppConfigAndComponentsDocument = exports.refetchAppComponentsQuery = exports.useAppComponentsLazyQuery = exports.useAppComponentsQuery = exports.AppComponentsDocument = exports.refetchAppConfigQuery = exports.useAppConfigLazyQuery = exports.useAppConfigQuery = exports.AppConfigDocument = exports.refetchAddressListContainsAddressQuery = exports.useAddressListContainsAddressLazyQuery = exports.useAddressListContainsAddressQuery = exports.AddressListContainsAddressDocument = exports.TxInfoFragmentDoc = exports.ChainConfigFragmentDoc = exports.KeplrConfigFragmentDoc = exports.CurrencyFragmentDoc = exports.Bech32configFragmentDoc = exports.AppComponentFragmentDoc = exports.ComponentFragmentDoc = exports.AndrFragmentFragmentDoc = exports.IAndrStrategyType = exports.IAndrOrderBy = exports.IAdoType = void 0;
exports.CodegenGeneratedAdoAdoAndrDocument = exports.refetchCodegenGeneratedAdoAddressListQuery = exports.useCodegenGeneratedAdoAddressListLazyQuery = exports.useCodegenGeneratedAdoAddressListQuery = exports.CodegenGeneratedAdoAddressListDocument = exports.refetchCodegenGeneratedAdoAddressListIncludesaddressQuery = exports.useCodegenGeneratedAdoAddressListIncludesaddressLazyQuery = exports.useCodegenGeneratedAdoAddressListIncludesaddressQuery = exports.CodegenGeneratedAdoAddressListIncludesaddressDocument = exports.refetchCodegenGeneratedAdoAddressListAndrQuery = exports.useCodegenGeneratedAdoAddressListAndrLazyQuery = exports.useCodegenGeneratedAdoAddressListAndrQuery = exports.CodegenGeneratedAdoAddressListAndrDocument = exports.refetchAllKeplrConfigQuery = exports.useAllKeplrConfigLazyQuery = exports.useAllKeplrConfigQuery = exports.AllKeplrConfigDocument = exports.refetchKeplrConfigQuery = exports.useKeplrConfigLazyQuery = exports.useKeplrConfigQuery = exports.KeplrConfigDocument = exports.refetchAllStoredChainConfigQuery = exports.useAllStoredChainConfigLazyQuery = exports.useAllStoredChainConfigQuery = exports.AllStoredChainConfigDocument = exports.refetchAllChainConfigQuery = exports.useAllChainConfigLazyQuery = exports.useAllChainConfigQuery = exports.AllChainConfigDocument = exports.refetchChainConfigQuery = exports.useChainConfigLazyQuery = exports.useChainConfigQuery = exports.ChainConfigDocument = exports.refetchCw721InfoQuery = exports.useCw721InfoLazyQuery = exports.useCw721InfoQuery = exports.Cw721InfoDocument = exports.refetchCw20Query = exports.useCw20LazyQuery = exports.useCw20Query = exports.Cw20Document = exports.refetchCw20TokenInfoQuery = exports.useCw20TokenInfoLazyQuery = exports.useCw20TokenInfoQuery = exports.Cw20TokenInfoDocument = exports.refetchCrowdfundStateQuery = exports.useCrowdfundStateLazyQuery = exports.useCrowdfundStateQuery = exports.CrowdfundStateDocument = exports.refetchCrowdfundConfigQuery = void 0;
exports.useCodegenGeneratedAdoAuctionAuctioninfosforaddressLazyQuery = exports.useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery = exports.CodegenGeneratedAdoAuctionAuctioninfosforaddressDocument = exports.refetchCodegenGeneratedAdoAuctionAuctionidsQuery = exports.useCodegenGeneratedAdoAuctionAuctionidsLazyQuery = exports.useCodegenGeneratedAdoAuctionAuctionidsQuery = exports.CodegenGeneratedAdoAuctionAuctionidsDocument = exports.refetchCodegenGeneratedAdoAuctionAndrQuery = exports.useCodegenGeneratedAdoAuctionAndrLazyQuery = exports.useCodegenGeneratedAdoAuctionAndrQuery = exports.CodegenGeneratedAdoAuctionAndrDocument = exports.refetchCodegenGeneratedAdoAppQuery = exports.useCodegenGeneratedAdoAppLazyQuery = exports.useCodegenGeneratedAdoAppQuery = exports.CodegenGeneratedAdoAppDocument = exports.refetchCodegenGeneratedAdoAppGetaddressQuery = exports.useCodegenGeneratedAdoAppGetaddressLazyQuery = exports.useCodegenGeneratedAdoAppGetaddressQuery = exports.CodegenGeneratedAdoAppGetaddressDocument = exports.refetchCodegenGeneratedAdoAppConfigQuery = exports.useCodegenGeneratedAdoAppConfigLazyQuery = exports.useCodegenGeneratedAdoAppConfigQuery = exports.CodegenGeneratedAdoAppConfigDocument = exports.refetchCodegenGeneratedAdoAppComponentsQuery = exports.useCodegenGeneratedAdoAppComponentsLazyQuery = exports.useCodegenGeneratedAdoAppComponentsQuery = exports.CodegenGeneratedAdoAppComponentsDocument = exports.refetchCodegenGeneratedAdoAppComponentexistsQuery = exports.useCodegenGeneratedAdoAppComponentexistsLazyQuery = exports.useCodegenGeneratedAdoAppComponentexistsQuery = exports.CodegenGeneratedAdoAppComponentexistsDocument = exports.refetchCodegenGeneratedAdoAppAndrQuery = exports.useCodegenGeneratedAdoAppAndrLazyQuery = exports.useCodegenGeneratedAdoAppAndrQuery = exports.CodegenGeneratedAdoAppAndrDocument = exports.refetchCodegenGeneratedAdoAppAddressesQuery = exports.useCodegenGeneratedAdoAppAddressesLazyQuery = exports.useCodegenGeneratedAdoAppAddressesQuery = exports.CodegenGeneratedAdoAppAddressesDocument = exports.refetchCodegenGeneratedAdoAdosmartQuery = exports.useCodegenGeneratedAdoAdosmartLazyQuery = exports.useCodegenGeneratedAdoAdosmartQuery = exports.CodegenGeneratedAdoAdosmartDocument = exports.refetchCodegenGeneratedAdoAdoQuery = exports.useCodegenGeneratedAdoAdoLazyQuery = exports.useCodegenGeneratedAdoAdoQuery = exports.CodegenGeneratedAdoAdoDocument = exports.refetchCodegenGeneratedAdoAdoAndrQuery = exports.useCodegenGeneratedAdoAdoAndrLazyQuery = exports.useCodegenGeneratedAdoAdoAndrQuery = void 0;
exports.CodegenGeneratedAdoCrowdfundStateDocument = exports.refetchCodegenGeneratedAdoCrowdfundStateRecipientQuery = exports.useCodegenGeneratedAdoCrowdfundStateRecipientLazyQuery = exports.useCodegenGeneratedAdoCrowdfundStateRecipientQuery = exports.CodegenGeneratedAdoCrowdfundStateRecipientDocument = exports.refetchCodegenGeneratedAdoCrowdfundStatePriceQuery = exports.useCodegenGeneratedAdoCrowdfundStatePriceLazyQuery = exports.useCodegenGeneratedAdoCrowdfundStatePriceQuery = exports.CodegenGeneratedAdoCrowdfundStatePriceDocument = exports.refetchCodegenGeneratedAdoCrowdfundIstokenavailableQuery = exports.useCodegenGeneratedAdoCrowdfundIstokenavailableLazyQuery = exports.useCodegenGeneratedAdoCrowdfundIstokenavailableQuery = exports.CodegenGeneratedAdoCrowdfundIstokenavailableDocument = exports.refetchCodegenGeneratedAdoCrowdfundConfigQuery = exports.useCodegenGeneratedAdoCrowdfundConfigLazyQuery = exports.useCodegenGeneratedAdoCrowdfundConfigQuery = exports.CodegenGeneratedAdoCrowdfundConfigDocument = exports.refetchCodegenGeneratedAdoCrowdfundAndrQuery = exports.useCodegenGeneratedAdoCrowdfundAndrLazyQuery = exports.useCodegenGeneratedAdoCrowdfundAndrQuery = exports.CodegenGeneratedAdoCrowdfundAndrDocument = exports.refetchCodegenGeneratedAdoChainidQuery = exports.useCodegenGeneratedAdoChainidLazyQuery = exports.useCodegenGeneratedAdoChainidQuery = exports.CodegenGeneratedAdoChainidDocument = exports.refetchCodegenGeneratedAdoAuctionQuery = exports.useCodegenGeneratedAdoAuctionLazyQuery = exports.useCodegenGeneratedAdoAuctionQuery = exports.CodegenGeneratedAdoAuctionDocument = exports.refetchCodegenGeneratedAdoAuctionSummaryfieldsQuery = exports.useCodegenGeneratedAdoAuctionSummaryfieldsLazyQuery = exports.useCodegenGeneratedAdoAuctionSummaryfieldsQuery = exports.CodegenGeneratedAdoAuctionSummaryfieldsDocument = exports.refetchCodegenGeneratedAdoAuctionLatestauctionstateQuery = exports.useCodegenGeneratedAdoAuctionLatestauctionstateLazyQuery = exports.useCodegenGeneratedAdoAuctionLatestauctionstateQuery = exports.CodegenGeneratedAdoAuctionLatestauctionstateDocument = exports.refetchCodegenGeneratedAdoAuctionBidsQuery = exports.useCodegenGeneratedAdoAuctionBidsLazyQuery = exports.useCodegenGeneratedAdoAuctionBidsQuery = exports.CodegenGeneratedAdoAuctionBidsDocument = exports.refetchCodegenGeneratedAdoAuctionBidsBidsQuery = exports.useCodegenGeneratedAdoAuctionBidsBidsLazyQuery = exports.useCodegenGeneratedAdoAuctionBidsBidsQuery = exports.CodegenGeneratedAdoAuctionBidsBidsDocument = exports.refetchCodegenGeneratedAdoAuctionAuctionstateQuery = exports.useCodegenGeneratedAdoAuctionAuctionstateLazyQuery = exports.useCodegenGeneratedAdoAuctionAuctionstateQuery = exports.CodegenGeneratedAdoAuctionAuctionstateDocument = exports.refetchCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery = void 0;
exports.useCodegenGeneratedAdoCw20LazyQuery = exports.useCodegenGeneratedAdoCw20Query = exports.CodegenGeneratedAdoCw20Document = exports.refetchCodegenGeneratedAdoCw20TokeninfoQuery = exports.useCodegenGeneratedAdoCw20TokeninfoLazyQuery = exports.useCodegenGeneratedAdoCw20TokeninfoQuery = exports.CodegenGeneratedAdoCw20TokeninfoDocument = exports.refetchCodegenGeneratedAdoCw20MinterQuery = exports.useCodegenGeneratedAdoCw20MinterLazyQuery = exports.useCodegenGeneratedAdoCw20MinterQuery = exports.CodegenGeneratedAdoCw20MinterDocument = exports.refetchCodegenGeneratedAdoCw20MarketinginfoQuery = exports.useCodegenGeneratedAdoCw20MarketinginfoLazyQuery = exports.useCodegenGeneratedAdoCw20MarketinginfoQuery = exports.CodegenGeneratedAdoCw20MarketinginfoDocument = exports.refetchCodegenGeneratedAdoCw20DownloadlogoQuery = exports.useCodegenGeneratedAdoCw20DownloadlogoLazyQuery = exports.useCodegenGeneratedAdoCw20DownloadlogoQuery = exports.CodegenGeneratedAdoCw20DownloadlogoDocument = exports.refetchCodegenGeneratedAdoCw20BalanceQuery = exports.useCodegenGeneratedAdoCw20BalanceLazyQuery = exports.useCodegenGeneratedAdoCw20BalanceQuery = exports.CodegenGeneratedAdoCw20BalanceDocument = exports.refetchCodegenGeneratedAdoCw20AndrQuery = exports.useCodegenGeneratedAdoCw20AndrLazyQuery = exports.useCodegenGeneratedAdoCw20AndrQuery = exports.CodegenGeneratedAdoCw20AndrDocument = exports.refetchCodegenGeneratedAdoCw20AllowanceQuery = exports.useCodegenGeneratedAdoCw20AllowanceLazyQuery = exports.useCodegenGeneratedAdoCw20AllowanceQuery = exports.CodegenGeneratedAdoCw20AllowanceDocument = exports.refetchCodegenGeneratedAdoCw20AllspenderallowancesQuery = exports.useCodegenGeneratedAdoCw20AllspenderallowancesLazyQuery = exports.useCodegenGeneratedAdoCw20AllspenderallowancesQuery = exports.CodegenGeneratedAdoCw20AllspenderallowancesDocument = exports.refetchCodegenGeneratedAdoCw20AllallowancesQuery = exports.useCodegenGeneratedAdoCw20AllallowancesLazyQuery = exports.useCodegenGeneratedAdoCw20AllallowancesQuery = exports.CodegenGeneratedAdoCw20AllallowancesDocument = exports.refetchCodegenGeneratedAdoCw20AllaccountsQuery = exports.useCodegenGeneratedAdoCw20AllaccountsLazyQuery = exports.useCodegenGeneratedAdoCw20AllaccountsQuery = exports.CodegenGeneratedAdoCw20AllaccountsDocument = exports.refetchCodegenGeneratedAdoCrowdfundQuery = exports.useCodegenGeneratedAdoCrowdfundLazyQuery = exports.useCodegenGeneratedAdoCrowdfundQuery = exports.CodegenGeneratedAdoCrowdfundDocument = exports.refetchCodegenGeneratedAdoCrowdfundStateQuery = exports.useCodegenGeneratedAdoCrowdfundStateLazyQuery = exports.useCodegenGeneratedAdoCrowdfundStateQuery = void 0;
exports.CodegenGeneratedAdoCw721AllnftinfoAccessDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery = exports.CodegenGeneratedAdoCw721AllnftinfoAccessApprovalsDocument = exports.refetchCodegenGeneratedAdoCw20StakingQuery = exports.useCodegenGeneratedAdoCw20StakingLazyQuery = exports.useCodegenGeneratedAdoCw20StakingQuery = exports.CodegenGeneratedAdoCw20StakingDocument = exports.refetchCodegenGeneratedAdoCw20StakingStateQuery = exports.useCodegenGeneratedAdoCw20StakingStateLazyQuery = exports.useCodegenGeneratedAdoCw20StakingStateQuery = exports.CodegenGeneratedAdoCw20StakingStateDocument = exports.refetchCodegenGeneratedAdoCw20StakingStakersQuery = exports.useCodegenGeneratedAdoCw20StakingStakersLazyQuery = exports.useCodegenGeneratedAdoCw20StakingStakersQuery = exports.CodegenGeneratedAdoCw20StakingStakersDocument = exports.refetchCodegenGeneratedAdoCw20StakingStakerQuery = exports.useCodegenGeneratedAdoCw20StakingStakerLazyQuery = exports.useCodegenGeneratedAdoCw20StakingStakerQuery = exports.CodegenGeneratedAdoCw20StakingStakerDocument = exports.refetchCodegenGeneratedAdoCw20StakingConfigQuery = exports.useCodegenGeneratedAdoCw20StakingConfigLazyQuery = exports.useCodegenGeneratedAdoCw20StakingConfigQuery = exports.CodegenGeneratedAdoCw20StakingConfigDocument = exports.refetchCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery = exports.useCodegenGeneratedAdoCw20StakingConfigStakingTokenLazyQuery = exports.useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery = exports.CodegenGeneratedAdoCw20StakingConfigStakingTokenDocument = exports.refetchCodegenGeneratedAdoCw20StakingAndrQuery = exports.useCodegenGeneratedAdoCw20StakingAndrLazyQuery = exports.useCodegenGeneratedAdoCw20StakingAndrQuery = exports.CodegenGeneratedAdoCw20StakingAndrDocument = exports.refetchCodegenGeneratedAdoCw20ExchangeQuery = exports.useCodegenGeneratedAdoCw20ExchangeLazyQuery = exports.useCodegenGeneratedAdoCw20ExchangeQuery = exports.CodegenGeneratedAdoCw20ExchangeDocument = exports.refetchCodegenGeneratedAdoCw20ExchangeSaleassetsQuery = exports.useCodegenGeneratedAdoCw20ExchangeSaleassetsLazyQuery = exports.useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery = exports.CodegenGeneratedAdoCw20ExchangeSaleassetsDocument = exports.refetchCodegenGeneratedAdoCw20ExchangeSaleQuery = exports.useCodegenGeneratedAdoCw20ExchangeSaleLazyQuery = exports.useCodegenGeneratedAdoCw20ExchangeSaleQuery = exports.CodegenGeneratedAdoCw20ExchangeSaleDocument = exports.refetchCodegenGeneratedAdoCw20ExchangeAndrQuery = exports.useCodegenGeneratedAdoCw20ExchangeAndrLazyQuery = exports.useCodegenGeneratedAdoCw20ExchangeAndrQuery = exports.CodegenGeneratedAdoCw20ExchangeAndrDocument = exports.refetchCodegenGeneratedAdoCw20Query = void 0;
exports.useCodegenGeneratedAdoCw721IsarchivedLazyQuery = exports.useCodegenGeneratedAdoCw721IsarchivedQuery = exports.CodegenGeneratedAdoCw721IsarchivedDocument = exports.refetchCodegenGeneratedAdoCw721ContractinfoQuery = exports.useCodegenGeneratedAdoCw721ContractinfoLazyQuery = exports.useCodegenGeneratedAdoCw721ContractinfoQuery = exports.CodegenGeneratedAdoCw721ContractinfoDocument = exports.refetchCodegenGeneratedAdoCw721ApprovalsQuery = exports.useCodegenGeneratedAdoCw721ApprovalsLazyQuery = exports.useCodegenGeneratedAdoCw721ApprovalsQuery = exports.CodegenGeneratedAdoCw721ApprovalsDocument = exports.refetchCodegenGeneratedAdoCw721ApprovalQuery = exports.useCodegenGeneratedAdoCw721ApprovalLazyQuery = exports.useCodegenGeneratedAdoCw721ApprovalQuery = exports.CodegenGeneratedAdoCw721ApprovalDocument = exports.refetchCodegenGeneratedAdoCw721AndrQuery = exports.useCodegenGeneratedAdoCw721AndrLazyQuery = exports.useCodegenGeneratedAdoCw721AndrQuery = exports.CodegenGeneratedAdoCw721AndrDocument = exports.refetchCodegenGeneratedAdoCw721AlltokensQuery = exports.useCodegenGeneratedAdoCw721AlltokensLazyQuery = exports.useCodegenGeneratedAdoCw721AlltokensQuery = exports.CodegenGeneratedAdoCw721AlltokensDocument = exports.refetchCodegenGeneratedAdoCw721AlloperatorsQuery = exports.useCodegenGeneratedAdoCw721AlloperatorsLazyQuery = exports.useCodegenGeneratedAdoCw721AlloperatorsQuery = exports.CodegenGeneratedAdoCw721AlloperatorsDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoQuery = exports.CodegenGeneratedAdoCw721AllnftinfoDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoQuery = exports.CodegenGeneratedAdoCw721AllnftinfoInfoDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery = exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery = exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery = exports.CodegenGeneratedAdoCw721AllnftinfoInfoExtensionDocument = exports.refetchCodegenGeneratedAdoCw721AllnftinfoAccessQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoAccessLazyQuery = exports.useCodegenGeneratedAdoCw721AllnftinfoAccessQuery = void 0;
exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountRawDocument = exports.refetchCodegenGeneratedAdoCw721TokensQuery = exports.useCodegenGeneratedAdoCw721TokensLazyQuery = exports.useCodegenGeneratedAdoCw721TokensQuery = exports.CodegenGeneratedAdoCw721TokensDocument = exports.refetchCodegenGeneratedAdoCw721SearchtokensQuery = exports.useCodegenGeneratedAdoCw721SearchtokensLazyQuery = exports.useCodegenGeneratedAdoCw721SearchtokensQuery = exports.CodegenGeneratedAdoCw721SearchtokensDocument = exports.refetchCodegenGeneratedAdoCw721SearchtokensMetadataQuery = exports.useCodegenGeneratedAdoCw721SearchtokensMetadataLazyQuery = exports.useCodegenGeneratedAdoCw721SearchtokensMetadataQuery = exports.CodegenGeneratedAdoCw721SearchtokensMetadataDocument = exports.refetchCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery = exports.useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesLazyQuery = exports.useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery = exports.CodegenGeneratedAdoCw721SearchtokensMetadataAttributesDocument = exports.refetchCodegenGeneratedAdoCw721SearchtokensExtensionQuery = exports.useCodegenGeneratedAdoCw721SearchtokensExtensionLazyQuery = exports.useCodegenGeneratedAdoCw721SearchtokensExtensionQuery = exports.CodegenGeneratedAdoCw721SearchtokensExtensionDocument = exports.refetchCodegenGeneratedAdoCw721OwnerofQuery = exports.useCodegenGeneratedAdoCw721OwnerofLazyQuery = exports.useCodegenGeneratedAdoCw721OwnerofQuery = exports.CodegenGeneratedAdoCw721OwnerofDocument = exports.refetchCodegenGeneratedAdoCw721OwnerofApprovalsQuery = exports.useCodegenGeneratedAdoCw721OwnerofApprovalsLazyQuery = exports.useCodegenGeneratedAdoCw721OwnerofApprovalsQuery = exports.CodegenGeneratedAdoCw721OwnerofApprovalsDocument = exports.refetchCodegenGeneratedAdoCw721NumownersQuery = exports.useCodegenGeneratedAdoCw721NumownersLazyQuery = exports.useCodegenGeneratedAdoCw721NumownersQuery = exports.CodegenGeneratedAdoCw721NumownersDocument = exports.refetchCodegenGeneratedAdoCw721NftinfoQuery = exports.useCodegenGeneratedAdoCw721NftinfoLazyQuery = exports.useCodegenGeneratedAdoCw721NftinfoQuery = exports.CodegenGeneratedAdoCw721NftinfoDocument = exports.refetchCodegenGeneratedAdoCw721NftinfoMetadataQuery = exports.useCodegenGeneratedAdoCw721NftinfoMetadataLazyQuery = exports.useCodegenGeneratedAdoCw721NftinfoMetadataQuery = exports.CodegenGeneratedAdoCw721NftinfoMetadataDocument = exports.refetchCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery = exports.useCodegenGeneratedAdoCw721NftinfoMetadataAttributesLazyQuery = exports.useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery = exports.CodegenGeneratedAdoCw721NftinfoMetadataAttributesDocument = exports.refetchCodegenGeneratedAdoCw721NftinfoExtensionQuery = exports.useCodegenGeneratedAdoCw721NftinfoExtensionLazyQuery = exports.useCodegenGeneratedAdoCw721NftinfoExtensionQuery = exports.CodegenGeneratedAdoCw721NftinfoExtensionDocument = exports.refetchCodegenGeneratedAdoCw721IsarchivedQuery = void 0;
exports.useCodegenGeneratedAdoLockdropWithdrawalpercentallowedLazyQuery = exports.useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery = exports.CodegenGeneratedAdoLockdropWithdrawalpercentallowedDocument = exports.refetchCodegenGeneratedAdoLockdropUserinfoQuery = exports.useCodegenGeneratedAdoLockdropUserinfoLazyQuery = exports.useCodegenGeneratedAdoLockdropUserinfoQuery = exports.CodegenGeneratedAdoLockdropUserinfoDocument = exports.refetchCodegenGeneratedAdoLockdropStateQuery = exports.useCodegenGeneratedAdoLockdropStateLazyQuery = exports.useCodegenGeneratedAdoLockdropStateQuery = exports.CodegenGeneratedAdoLockdropStateDocument = exports.refetchCodegenGeneratedAdoLockdropConfigQuery = exports.useCodegenGeneratedAdoLockdropConfigLazyQuery = exports.useCodegenGeneratedAdoLockdropConfigQuery = exports.CodegenGeneratedAdoLockdropConfigDocument = exports.refetchCodegenGeneratedAdoLockdropAndrQuery = exports.useCodegenGeneratedAdoLockdropAndrLazyQuery = exports.useCodegenGeneratedAdoLockdropAndrQuery = exports.CodegenGeneratedAdoLockdropAndrDocument = exports.refetchCodegenGeneratedAdoFactoryQuery = exports.useCodegenGeneratedAdoFactoryLazyQuery = exports.useCodegenGeneratedAdoFactoryQuery = exports.CodegenGeneratedAdoFactoryDocument = exports.refetchCodegenGeneratedAdoFactoryCodeIdQuery = exports.useCodegenGeneratedAdoFactoryCodeIdLazyQuery = exports.useCodegenGeneratedAdoFactoryCodeIdQuery = exports.CodegenGeneratedAdoFactoryCodeIdDocument = exports.refetchCodegenGeneratedAdoFactoryAndrQuery = exports.useCodegenGeneratedAdoFactoryAndrLazyQuery = exports.useCodegenGeneratedAdoFactoryAndrQuery = exports.CodegenGeneratedAdoFactoryAndrDocument = exports.refetchCodegenGeneratedAdoCw721Query = exports.useCodegenGeneratedAdoCw721LazyQuery = exports.useCodegenGeneratedAdoCw721Query = exports.CodegenGeneratedAdoCw721Document = exports.refetchCodegenGeneratedAdoCw721TransferagreementQuery = exports.useCodegenGeneratedAdoCw721TransferagreementLazyQuery = exports.useCodegenGeneratedAdoCw721TransferagreementQuery = exports.CodegenGeneratedAdoCw721TransferagreementDocument = exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementLazyQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementQuery = exports.CodegenGeneratedAdoCw721TransferagreementAgreementDocument = exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountLazyQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery = exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountDocument = exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawLazyQuery = exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery = void 0;
exports.CodegenGeneratedAdoMerkleAirdropDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery = exports.useCodegenGeneratedAdoMerkleAirdropTotalclaimedLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery = exports.CodegenGeneratedAdoMerkleAirdropTotalclaimedDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropMerklerootQuery = exports.useCodegenGeneratedAdoMerkleAirdropMerklerootLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropMerklerootQuery = exports.CodegenGeneratedAdoMerkleAirdropMerklerootDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropIsclaimedQuery = exports.useCodegenGeneratedAdoMerkleAirdropIsclaimedLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery = exports.CodegenGeneratedAdoMerkleAirdropIsclaimedDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropConfigQuery = exports.useCodegenGeneratedAdoMerkleAirdropConfigLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropConfigQuery = exports.CodegenGeneratedAdoMerkleAirdropConfigDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropAndrQuery = exports.useCodegenGeneratedAdoMerkleAirdropAndrLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropAndrQuery = exports.CodegenGeneratedAdoMerkleAirdropAndrDocument = exports.refetchCodegenGeneratedAdoMarketplaceQuery = exports.useCodegenGeneratedAdoMarketplaceLazyQuery = exports.useCodegenGeneratedAdoMarketplaceQuery = exports.CodegenGeneratedAdoMarketplaceDocument = exports.refetchCodegenGeneratedAdoMarketplaceSalestateQuery = exports.useCodegenGeneratedAdoMarketplaceSalestateLazyQuery = exports.useCodegenGeneratedAdoMarketplaceSalestateQuery = exports.CodegenGeneratedAdoMarketplaceSalestateDocument = exports.refetchCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery = exports.useCodegenGeneratedAdoMarketplaceSaleinfosforaddressLazyQuery = exports.useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery = exports.CodegenGeneratedAdoMarketplaceSaleinfosforaddressDocument = exports.refetchCodegenGeneratedAdoMarketplaceSaleidsQuery = exports.useCodegenGeneratedAdoMarketplaceSaleidsLazyQuery = exports.useCodegenGeneratedAdoMarketplaceSaleidsQuery = exports.CodegenGeneratedAdoMarketplaceSaleidsDocument = exports.refetchCodegenGeneratedAdoMarketplaceLatestsalestateQuery = exports.useCodegenGeneratedAdoMarketplaceLatestsalestateLazyQuery = exports.useCodegenGeneratedAdoMarketplaceLatestsalestateQuery = exports.CodegenGeneratedAdoMarketplaceLatestsalestateDocument = exports.refetchCodegenGeneratedAdoMarketplaceAndrQuery = exports.useCodegenGeneratedAdoMarketplaceAndrLazyQuery = exports.useCodegenGeneratedAdoMarketplaceAndrQuery = exports.CodegenGeneratedAdoMarketplaceAndrDocument = exports.refetchCodegenGeneratedAdoLockdropQuery = exports.useCodegenGeneratedAdoLockdropLazyQuery = exports.useCodegenGeneratedAdoLockdropQuery = exports.CodegenGeneratedAdoLockdropDocument = exports.refetchCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery = void 0;
exports.useCodegenGeneratedAdoRatesPaymentsRateLazyQuery = exports.useCodegenGeneratedAdoRatesPaymentsRateQuery = exports.CodegenGeneratedAdoRatesPaymentsRateDocument = exports.refetchCodegenGeneratedAdoRatesPaymentsRatePercentQuery = exports.useCodegenGeneratedAdoRatesPaymentsRatePercentLazyQuery = exports.useCodegenGeneratedAdoRatesPaymentsRatePercentQuery = exports.CodegenGeneratedAdoRatesPaymentsRatePercentDocument = exports.refetchCodegenGeneratedAdoRatesPaymentsRateFlatQuery = exports.useCodegenGeneratedAdoRatesPaymentsRateFlatLazyQuery = exports.useCodegenGeneratedAdoRatesPaymentsRateFlatQuery = exports.CodegenGeneratedAdoRatesPaymentsRateFlatDocument = exports.refetchCodegenGeneratedAdoRatesPaymentsRateExternalQuery = exports.useCodegenGeneratedAdoRatesPaymentsRateExternalLazyQuery = exports.useCodegenGeneratedAdoRatesPaymentsRateExternalQuery = exports.CodegenGeneratedAdoRatesPaymentsRateExternalDocument = exports.refetchCodegenGeneratedAdoRatesAndrQuery = exports.useCodegenGeneratedAdoRatesAndrLazyQuery = exports.useCodegenGeneratedAdoRatesAndrQuery = exports.CodegenGeneratedAdoRatesAndrDocument = exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsLazyQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsQuery = exports.CodegenGeneratedAdoRateLimitingWithdrawalsDocument = exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsLazyQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery = exports.CodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsDocument = exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAndrLazyQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery = exports.CodegenGeneratedAdoRateLimitingWithdrawalsAndrDocument = exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsLazyQuery = exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery = exports.CodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsDocument = exports.refetchCodegenGeneratedAdoPrimitiveQuery = exports.useCodegenGeneratedAdoPrimitiveLazyQuery = exports.useCodegenGeneratedAdoPrimitiveQuery = exports.CodegenGeneratedAdoPrimitiveDocument = exports.refetchCodegenGeneratedAdoPrimitiveGetvalueQuery = exports.useCodegenGeneratedAdoPrimitiveGetvalueLazyQuery = exports.useCodegenGeneratedAdoPrimitiveGetvalueQuery = exports.CodegenGeneratedAdoPrimitiveGetvalueDocument = exports.refetchCodegenGeneratedAdoPrimitiveAndrQuery = exports.useCodegenGeneratedAdoPrimitiveAndrLazyQuery = exports.useCodegenGeneratedAdoPrimitiveAndrQuery = exports.CodegenGeneratedAdoPrimitiveAndrDocument = exports.refetchCodegenGeneratedAdoMerkleAirdropQuery = exports.useCodegenGeneratedAdoMerkleAirdropLazyQuery = exports.useCodegenGeneratedAdoMerkleAirdropQuery = void 0;
exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsCoinsLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsCoinsDocument = exports.refetchCodegenGeneratedAdoTimelockAndrQuery = exports.useCodegenGeneratedAdoTimelockAndrLazyQuery = exports.useCodegenGeneratedAdoTimelockAndrQuery = exports.CodegenGeneratedAdoTimelockAndrDocument = exports.refetchCodegenGeneratedAdoSplitterQuery = exports.useCodegenGeneratedAdoSplitterLazyQuery = exports.useCodegenGeneratedAdoSplitterQuery = exports.CodegenGeneratedAdoSplitterDocument = exports.refetchCodegenGeneratedAdoSplitterConfigQuery = exports.useCodegenGeneratedAdoSplitterConfigLazyQuery = exports.useCodegenGeneratedAdoSplitterConfigQuery = exports.CodegenGeneratedAdoSplitterConfigDocument = exports.refetchCodegenGeneratedAdoSplitterConfigRecipientsQuery = exports.useCodegenGeneratedAdoSplitterConfigRecipientsLazyQuery = exports.useCodegenGeneratedAdoSplitterConfigRecipientsQuery = exports.CodegenGeneratedAdoSplitterConfigRecipientsDocument = exports.refetchCodegenGeneratedAdoSplitterAndrQuery = exports.useCodegenGeneratedAdoSplitterAndrLazyQuery = exports.useCodegenGeneratedAdoSplitterAndrQuery = exports.CodegenGeneratedAdoSplitterAndrDocument = exports.refetchCodegenGeneratedAdoRatesQuery = exports.useCodegenGeneratedAdoRatesLazyQuery = exports.useCodegenGeneratedAdoRatesQuery = exports.CodegenGeneratedAdoRatesDocument = exports.refetchCodegenGeneratedAdoRatesPaymentsQuery = exports.useCodegenGeneratedAdoRatesPaymentsLazyQuery = exports.useCodegenGeneratedAdoRatesPaymentsQuery = exports.CodegenGeneratedAdoRatesPaymentsDocument = exports.refetchCodegenGeneratedAdoRatesPaymentsRateQuery = void 0;
exports.useCodegenGeneratedAdoVestingLazyQuery = exports.useCodegenGeneratedAdoVestingQuery = exports.CodegenGeneratedAdoVestingDocument = exports.refetchCodegenGeneratedAdoVestingConfigQuery = exports.useCodegenGeneratedAdoVestingConfigLazyQuery = exports.useCodegenGeneratedAdoVestingConfigQuery = exports.CodegenGeneratedAdoVestingConfigDocument = exports.refetchCodegenGeneratedAdoVestingBatchesQuery = exports.useCodegenGeneratedAdoVestingBatchesLazyQuery = exports.useCodegenGeneratedAdoVestingBatchesQuery = exports.CodegenGeneratedAdoVestingBatchesDocument = exports.refetchCodegenGeneratedAdoVestingBatchQuery = exports.useCodegenGeneratedAdoVestingBatchLazyQuery = exports.useCodegenGeneratedAdoVestingBatchQuery = exports.CodegenGeneratedAdoVestingBatchDocument = exports.refetchCodegenGeneratedAdoVestingAndrQuery = exports.useCodegenGeneratedAdoVestingAndrLazyQuery = exports.useCodegenGeneratedAdoVestingAndrQuery = exports.CodegenGeneratedAdoVestingAndrDocument = exports.refetchCodegenGeneratedAdoVaultQuery = exports.useCodegenGeneratedAdoVaultLazyQuery = exports.useCodegenGeneratedAdoVaultQuery = exports.CodegenGeneratedAdoVaultDocument = exports.refetchCodegenGeneratedAdoVaultStrategyaddressQuery = exports.useCodegenGeneratedAdoVaultStrategyaddressLazyQuery = exports.useCodegenGeneratedAdoVaultStrategyaddressQuery = exports.CodegenGeneratedAdoVaultStrategyaddressDocument = exports.refetchCodegenGeneratedAdoVaultBalanceQuery = exports.useCodegenGeneratedAdoVaultBalanceLazyQuery = exports.useCodegenGeneratedAdoVaultBalanceQuery = exports.CodegenGeneratedAdoVaultBalanceDocument = exports.refetchCodegenGeneratedAdoVaultAndrQuery = exports.useCodegenGeneratedAdoVaultAndrLazyQuery = exports.useCodegenGeneratedAdoVaultAndrQuery = exports.CodegenGeneratedAdoVaultAndrDocument = exports.refetchCodegenGeneratedAdoTimelockQuery = exports.useCodegenGeneratedAdoTimelockLazyQuery = exports.useCodegenGeneratedAdoTimelockQuery = exports.CodegenGeneratedAdoTimelockDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery = exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionDocument = exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsLazyQuery = exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery = void 0;
exports.CodegenGeneratedAccountsDocument = exports.refetchCodegenGeneratedAccountsAssetsQuery = exports.useCodegenGeneratedAccountsAssetsLazyQuery = exports.useCodegenGeneratedAccountsAssetsQuery = exports.CodegenGeneratedAccountsAssetsDocument = exports.refetchCodegenGeneratedAccountsAssetsComponentsQuery = exports.useCodegenGeneratedAccountsAssetsComponentsLazyQuery = exports.useCodegenGeneratedAccountsAssetsComponentsQuery = exports.CodegenGeneratedAccountsAssetsComponentsDocument = exports.refetchCodegenGeneratedAdopQuery = exports.useCodegenGeneratedAdopLazyQuery = exports.useCodegenGeneratedAdopQuery = exports.CodegenGeneratedAdopDocument = exports.refetchCodegenGeneratedAdopPackageQuery = exports.useCodegenGeneratedAdopPackageLazyQuery = exports.useCodegenGeneratedAdopPackageQuery = exports.CodegenGeneratedAdopPackageDocument = exports.refetchCodegenGeneratedAdopPackageSchemasQuery = exports.useCodegenGeneratedAdopPackageSchemasLazyQuery = exports.useCodegenGeneratedAdopPackageSchemasQuery = exports.CodegenGeneratedAdopPackageSchemasDocument = exports.refetchCodegenGeneratedAdopPackageSchemasReceiveQuery = exports.useCodegenGeneratedAdopPackageSchemasReceiveLazyQuery = exports.useCodegenGeneratedAdopPackageSchemasReceiveQuery = exports.CodegenGeneratedAdopPackageSchemasReceiveDocument = exports.refetchCodegenGeneratedAdoQuery = exports.useCodegenGeneratedAdoLazyQuery = exports.useCodegenGeneratedAdoQuery = exports.CodegenGeneratedAdoDocument = exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterLazyQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterQuery = exports.CodegenGeneratedAdoWeightedDistributionSplitterDocument = exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightLazyQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery = exports.CodegenGeneratedAdoWeightedDistributionSplitterGetuserweightDocument = exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigLazyQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery = exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigDocument = exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsLazyQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery = exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsDocument = exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterAndrLazyQuery = exports.useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery = exports.CodegenGeneratedAdoWeightedDistributionSplitterAndrDocument = exports.refetchCodegenGeneratedAdoVestingQuery = void 0;
exports.useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsGaspricestepDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsCurrenciesDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsBip44Query = exports.useCodegenGeneratedKeplrconfigsAllconfigsBip44LazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsBip44Query = exports.CodegenGeneratedKeplrconfigsAllconfigsBip44Document = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsBech32ConfigDocument = exports.refetchCodegenGeneratedChainconfigsQuery = exports.useCodegenGeneratedChainconfigsLazyQuery = exports.useCodegenGeneratedChainconfigsQuery = exports.CodegenGeneratedChainconfigsDocument = exports.refetchCodegenGeneratedChainconfigsConfigQuery = exports.useCodegenGeneratedChainconfigsConfigLazyQuery = exports.useCodegenGeneratedChainconfigsConfigQuery = exports.CodegenGeneratedChainconfigsConfigDocument = exports.refetchCodegenGeneratedChainconfigsConfigIconurlsQuery = exports.useCodegenGeneratedChainconfigsConfigIconurlsLazyQuery = exports.useCodegenGeneratedChainconfigsConfigIconurlsQuery = exports.CodegenGeneratedChainconfigsConfigIconurlsDocument = exports.refetchCodegenGeneratedChainconfigsAllstoredconfigsQuery = exports.useCodegenGeneratedChainconfigsAllstoredconfigsLazyQuery = exports.useCodegenGeneratedChainconfigsAllstoredconfigsQuery = exports.CodegenGeneratedChainconfigsAllstoredconfigsDocument = exports.refetchCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery = exports.useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsLazyQuery = exports.useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery = exports.CodegenGeneratedChainconfigsAllstoredconfigsIconurlsDocument = exports.refetchCodegenGeneratedChainconfigsAllconfigsQuery = exports.useCodegenGeneratedChainconfigsAllconfigsLazyQuery = exports.useCodegenGeneratedChainconfigsAllconfigsQuery = exports.CodegenGeneratedChainconfigsAllconfigsDocument = exports.refetchCodegenGeneratedChainconfigsAllconfigsIconurlsQuery = exports.useCodegenGeneratedChainconfigsAllconfigsIconurlsLazyQuery = exports.useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery = exports.CodegenGeneratedChainconfigsAllconfigsIconurlsDocument = exports.refetchCodegenGeneratedAccountsQuery = exports.useCodegenGeneratedAccountsLazyQuery = exports.useCodegenGeneratedAccountsQuery = void 0;
exports.CodegenGeneratedTxByaccountMsgresponsesDocument = exports.refetchCodegenGeneratedTxByaccountEventsQuery = exports.useCodegenGeneratedTxByaccountEventsLazyQuery = exports.useCodegenGeneratedTxByaccountEventsQuery = exports.CodegenGeneratedTxByaccountEventsDocument = exports.refetchCodegenGeneratedTxByaccountEventsAttributesQuery = exports.useCodegenGeneratedTxByaccountEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByaccountEventsAttributesQuery = exports.CodegenGeneratedTxByaccountEventsAttributesDocument = exports.refetchCodegenGeneratedKeplrconfigsQuery = exports.useCodegenGeneratedKeplrconfigsLazyQuery = exports.useCodegenGeneratedKeplrconfigsQuery = exports.CodegenGeneratedKeplrconfigsDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigQuery = exports.useCodegenGeneratedKeplrconfigsConfigLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigQuery = exports.CodegenGeneratedKeplrconfigsConfigDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery = exports.useCodegenGeneratedKeplrconfigsConfigStakecurrencyLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery = exports.CodegenGeneratedKeplrconfigsConfigStakecurrencyDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigGaspricestepQuery = exports.useCodegenGeneratedKeplrconfigsConfigGaspricestepLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery = exports.CodegenGeneratedKeplrconfigsConfigGaspricestepDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery = exports.useCodegenGeneratedKeplrconfigsConfigFeecurrenciesLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery = exports.CodegenGeneratedKeplrconfigsConfigFeecurrenciesDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigCurrenciesQuery = exports.useCodegenGeneratedKeplrconfigsConfigCurrenciesLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery = exports.CodegenGeneratedKeplrconfigsConfigCurrenciesDocument = exports.refetchCodegenGeneratedKeplrconfigsConfigBip44Query = exports.useCodegenGeneratedKeplrconfigsConfigBip44LazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigBip44Query = exports.CodegenGeneratedKeplrconfigsConfigBip44Document = exports.refetchCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery = exports.useCodegenGeneratedKeplrconfigsConfigBech32ConfigLazyQuery = exports.useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery = exports.CodegenGeneratedKeplrconfigsConfigBech32ConfigDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyLazyQuery = exports.useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery = exports.CodegenGeneratedKeplrconfigsAllconfigsStakecurrencyDocument = exports.refetchCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery = void 0;
exports.useCodegenGeneratedTxByhashEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByhashEventsAttributesQuery = exports.CodegenGeneratedTxByhashEventsAttributesDocument = exports.refetchCodegenGeneratedTxBycontractQuery = exports.useCodegenGeneratedTxBycontractLazyQuery = exports.useCodegenGeneratedTxBycontractQuery = exports.CodegenGeneratedTxBycontractDocument = exports.refetchCodegenGeneratedTxBycontractTxlogQuery = exports.useCodegenGeneratedTxBycontractTxlogLazyQuery = exports.useCodegenGeneratedTxBycontractTxlogQuery = exports.CodegenGeneratedTxBycontractTxlogDocument = exports.refetchCodegenGeneratedTxBycontractTxlogEventsQuery = exports.useCodegenGeneratedTxBycontractTxlogEventsLazyQuery = exports.useCodegenGeneratedTxBycontractTxlogEventsQuery = exports.CodegenGeneratedTxBycontractTxlogEventsDocument = exports.refetchCodegenGeneratedTxBycontractTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxBycontractTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery = exports.CodegenGeneratedTxBycontractTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxBycontractMsgresponsesQuery = exports.useCodegenGeneratedTxBycontractMsgresponsesLazyQuery = exports.useCodegenGeneratedTxBycontractMsgresponsesQuery = exports.CodegenGeneratedTxBycontractMsgresponsesDocument = exports.refetchCodegenGeneratedTxBycontractEventsQuery = exports.useCodegenGeneratedTxBycontractEventsLazyQuery = exports.useCodegenGeneratedTxBycontractEventsQuery = exports.CodegenGeneratedTxBycontractEventsDocument = exports.refetchCodegenGeneratedTxBycontractEventsAttributesQuery = exports.useCodegenGeneratedTxBycontractEventsAttributesLazyQuery = exports.useCodegenGeneratedTxBycontractEventsAttributesQuery = exports.CodegenGeneratedTxBycontractEventsAttributesDocument = exports.refetchCodegenGeneratedTxByaccountQuery = exports.useCodegenGeneratedTxByaccountLazyQuery = exports.useCodegenGeneratedTxByaccountQuery = exports.CodegenGeneratedTxByaccountDocument = exports.refetchCodegenGeneratedTxByaccountTxlogQuery = exports.useCodegenGeneratedTxByaccountTxlogLazyQuery = exports.useCodegenGeneratedTxByaccountTxlogQuery = exports.CodegenGeneratedTxByaccountTxlogDocument = exports.refetchCodegenGeneratedTxByaccountTxlogEventsQuery = exports.useCodegenGeneratedTxByaccountTxlogEventsLazyQuery = exports.useCodegenGeneratedTxByaccountTxlogEventsQuery = exports.CodegenGeneratedTxByaccountTxlogEventsDocument = exports.refetchCodegenGeneratedTxByaccountTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxByaccountTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery = exports.CodegenGeneratedTxByaccountTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxByaccountMsgresponsesQuery = exports.useCodegenGeneratedTxByaccountMsgresponsesLazyQuery = exports.useCodegenGeneratedTxByaccountMsgresponsesQuery = void 0;
exports.CodegenGeneratedTxByheightDocument = exports.refetchCodegenGeneratedTxByheightTxlogQuery = exports.useCodegenGeneratedTxByheightTxlogLazyQuery = exports.useCodegenGeneratedTxByheightTxlogQuery = exports.CodegenGeneratedTxByheightTxlogDocument = exports.refetchCodegenGeneratedTxByheightTxlogEventsQuery = exports.useCodegenGeneratedTxByheightTxlogEventsLazyQuery = exports.useCodegenGeneratedTxByheightTxlogEventsQuery = exports.CodegenGeneratedTxByheightTxlogEventsDocument = exports.refetchCodegenGeneratedTxByheightTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxByheightTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByheightTxlogEventsAttributesQuery = exports.CodegenGeneratedTxByheightTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxByheightMsgresponsesQuery = exports.useCodegenGeneratedTxByheightMsgresponsesLazyQuery = exports.useCodegenGeneratedTxByheightMsgresponsesQuery = exports.CodegenGeneratedTxByheightMsgresponsesDocument = exports.refetchCodegenGeneratedTxByheightEventsQuery = exports.useCodegenGeneratedTxByheightEventsLazyQuery = exports.useCodegenGeneratedTxByheightEventsQuery = exports.CodegenGeneratedTxByheightEventsDocument = exports.refetchCodegenGeneratedTxByheightEventsAttributesQuery = exports.useCodegenGeneratedTxByheightEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByheightEventsAttributesQuery = exports.CodegenGeneratedTxByheightEventsAttributesDocument = exports.refetchCodegenGeneratedTxByhashQuery = exports.useCodegenGeneratedTxByhashLazyQuery = exports.useCodegenGeneratedTxByhashQuery = exports.CodegenGeneratedTxByhashDocument = exports.refetchCodegenGeneratedTxByhashTxlogQuery = exports.useCodegenGeneratedTxByhashTxlogLazyQuery = exports.useCodegenGeneratedTxByhashTxlogQuery = exports.CodegenGeneratedTxByhashTxlogDocument = exports.refetchCodegenGeneratedTxByhashTxlogEventsQuery = exports.useCodegenGeneratedTxByhashTxlogEventsLazyQuery = exports.useCodegenGeneratedTxByhashTxlogEventsQuery = exports.CodegenGeneratedTxByhashTxlogEventsDocument = exports.refetchCodegenGeneratedTxByhashTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxByhashTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByhashTxlogEventsAttributesQuery = exports.CodegenGeneratedTxByhashTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxByhashMsgresponsesQuery = exports.useCodegenGeneratedTxByhashMsgresponsesLazyQuery = exports.useCodegenGeneratedTxByhashMsgresponsesQuery = exports.CodegenGeneratedTxByhashMsgresponsesDocument = exports.refetchCodegenGeneratedTxByhashEventsQuery = exports.useCodegenGeneratedTxByhashEventsLazyQuery = exports.useCodegenGeneratedTxByhashEventsQuery = exports.CodegenGeneratedTxByhashEventsDocument = exports.refetchCodegenGeneratedTxByhashEventsAttributesQuery = void 0;
exports.useCodegenGeneratedTxByrawstringTxlogEventsLazyQuery = exports.useCodegenGeneratedTxByrawstringTxlogEventsQuery = exports.CodegenGeneratedTxByrawstringTxlogEventsDocument = exports.refetchCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxByrawstringTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery = exports.CodegenGeneratedTxByrawstringTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxByrawstringMsgresponsesQuery = exports.useCodegenGeneratedTxByrawstringMsgresponsesLazyQuery = exports.useCodegenGeneratedTxByrawstringMsgresponsesQuery = exports.CodegenGeneratedTxByrawstringMsgresponsesDocument = exports.refetchCodegenGeneratedTxByrawstringEventsQuery = exports.useCodegenGeneratedTxByrawstringEventsLazyQuery = exports.useCodegenGeneratedTxByrawstringEventsQuery = exports.CodegenGeneratedTxByrawstringEventsDocument = exports.refetchCodegenGeneratedTxByrawstringEventsAttributesQuery = exports.useCodegenGeneratedTxByrawstringEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByrawstringEventsAttributesQuery = exports.CodegenGeneratedTxByrawstringEventsAttributesDocument = exports.refetchCodegenGeneratedTxByownerQuery = exports.useCodegenGeneratedTxByownerLazyQuery = exports.useCodegenGeneratedTxByownerQuery = exports.CodegenGeneratedTxByownerDocument = exports.refetchCodegenGeneratedTxByownerTxlogQuery = exports.useCodegenGeneratedTxByownerTxlogLazyQuery = exports.useCodegenGeneratedTxByownerTxlogQuery = exports.CodegenGeneratedTxByownerTxlogDocument = exports.refetchCodegenGeneratedTxByownerTxlogEventsQuery = exports.useCodegenGeneratedTxByownerTxlogEventsLazyQuery = exports.useCodegenGeneratedTxByownerTxlogEventsQuery = exports.CodegenGeneratedTxByownerTxlogEventsDocument = exports.refetchCodegenGeneratedTxByownerTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxByownerTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByownerTxlogEventsAttributesQuery = exports.CodegenGeneratedTxByownerTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxByownerMsgresponsesQuery = exports.useCodegenGeneratedTxByownerMsgresponsesLazyQuery = exports.useCodegenGeneratedTxByownerMsgresponsesQuery = exports.CodegenGeneratedTxByownerMsgresponsesDocument = exports.refetchCodegenGeneratedTxByownerEventsQuery = exports.useCodegenGeneratedTxByownerEventsLazyQuery = exports.useCodegenGeneratedTxByownerEventsQuery = exports.CodegenGeneratedTxByownerEventsDocument = exports.refetchCodegenGeneratedTxByownerEventsAttributesQuery = exports.useCodegenGeneratedTxByownerEventsAttributesLazyQuery = exports.useCodegenGeneratedTxByownerEventsAttributesQuery = exports.CodegenGeneratedTxByownerEventsAttributesDocument = exports.refetchCodegenGeneratedTxByheightQuery = exports.useCodegenGeneratedTxByheightLazyQuery = exports.useCodegenGeneratedTxByheightQuery = void 0;
exports.TxByContractDocument = exports.refetchTxByAccountQuery = exports.useTxByAccountLazyQuery = exports.useTxByAccountQuery = exports.TxByAccountDocument = exports.useCodegenGeneratedAdoownerupdatedSubscription = exports.CodegenGeneratedAdoownerupdatedDocument = exports.useCodegenGeneratedAdoaddedSubscription = exports.CodegenGeneratedAdoaddedDocument = exports.refetchCodegenGeneratedTxQuery = exports.useCodegenGeneratedTxLazyQuery = exports.useCodegenGeneratedTxQuery = exports.CodegenGeneratedTxDocument = exports.refetchCodegenGeneratedTxBytagQuery = exports.useCodegenGeneratedTxBytagLazyQuery = exports.useCodegenGeneratedTxBytagQuery = exports.CodegenGeneratedTxBytagDocument = exports.refetchCodegenGeneratedTxBytagTxlogQuery = exports.useCodegenGeneratedTxBytagTxlogLazyQuery = exports.useCodegenGeneratedTxBytagTxlogQuery = exports.CodegenGeneratedTxBytagTxlogDocument = exports.refetchCodegenGeneratedTxBytagTxlogEventsQuery = exports.useCodegenGeneratedTxBytagTxlogEventsLazyQuery = exports.useCodegenGeneratedTxBytagTxlogEventsQuery = exports.CodegenGeneratedTxBytagTxlogEventsDocument = exports.refetchCodegenGeneratedTxBytagTxlogEventsAttributesQuery = exports.useCodegenGeneratedTxBytagTxlogEventsAttributesLazyQuery = exports.useCodegenGeneratedTxBytagTxlogEventsAttributesQuery = exports.CodegenGeneratedTxBytagTxlogEventsAttributesDocument = exports.refetchCodegenGeneratedTxBytagMsgresponsesQuery = exports.useCodegenGeneratedTxBytagMsgresponsesLazyQuery = exports.useCodegenGeneratedTxBytagMsgresponsesQuery = exports.CodegenGeneratedTxBytagMsgresponsesDocument = exports.refetchCodegenGeneratedTxBytagEventsQuery = exports.useCodegenGeneratedTxBytagEventsLazyQuery = exports.useCodegenGeneratedTxBytagEventsQuery = exports.CodegenGeneratedTxBytagEventsDocument = exports.refetchCodegenGeneratedTxBytagEventsAttributesQuery = exports.useCodegenGeneratedTxBytagEventsAttributesLazyQuery = exports.useCodegenGeneratedTxBytagEventsAttributesQuery = exports.CodegenGeneratedTxBytagEventsAttributesDocument = exports.refetchCodegenGeneratedTxByrawstringQuery = exports.useCodegenGeneratedTxByrawstringLazyQuery = exports.useCodegenGeneratedTxByrawstringQuery = exports.CodegenGeneratedTxByrawstringDocument = exports.refetchCodegenGeneratedTxByrawstringTxlogQuery = exports.useCodegenGeneratedTxByrawstringTxlogLazyQuery = exports.useCodegenGeneratedTxByrawstringTxlogQuery = exports.CodegenGeneratedTxByrawstringTxlogDocument = exports.refetchCodegenGeneratedTxByrawstringTxlogEventsQuery = void 0;
exports.refetchTxByHashQuery = exports.useTxByHashLazyQuery = exports.useTxByHashQuery = exports.TxByHashDocument = exports.refetchTxByHeightQuery = exports.useTxByHeightLazyQuery = exports.useTxByHeightQuery = exports.TxByHeightDocument = exports.refetchTxByContractQuery = exports.useTxByContractLazyQuery = exports.useTxByContractQuery = void 0;
const client_1 = require("@apollo/client");
const Apollo = __importStar(require("@apollo/client"));
const defaultOptions = {};
var IAdoType;
(function (IAdoType) {
    IAdoType["ADDRESSLIST"] = "AddressList";
    IAdoType["ADO"] = "Ado";
    IAdoType["APP"] = "App";
    IAdoType["AUCTION"] = "Auction";
    IAdoType["CW20"] = "CW20";
    IAdoType["CW20EXCHANGE"] = "CW20Exchange";
    IAdoType["CW20STAKING"] = "CW20Staking";
    IAdoType["CW721"] = "CW721";
    IAdoType["CW721BIDS"] = "CW721Bids";
    IAdoType["CW721TIMELOCK"] = "CW721Timelock";
    IAdoType["CROWDFUND"] = "Crowdfund";
    IAdoType["FACTORY"] = "Factory";
    IAdoType["GUMBALL"] = "Gumball";
    IAdoType["LOCKDROP"] = "Lockdrop";
    IAdoType["MARKETPLACE"] = "Marketplace";
    IAdoType["MERKLEAIRDROP"] = "MerkleAirdrop";
    IAdoType["NFTSTAKING"] = "NftStaking";
    IAdoType["PRIMITIVE"] = "Primitive";
    IAdoType["RATELIMITINGWITHDRAWALS"] = "RateLimitingWithdrawals";
    IAdoType["RATES"] = "Rates";
    IAdoType["RECEIPT"] = "Receipt";
    IAdoType["SPLITTER"] = "Splitter";
    IAdoType["TIMELOCK"] = "Timelock";
    IAdoType["UNKNOWN"] = "Unknown";
    IAdoType["VAULT"] = "Vault";
    IAdoType["VESTING"] = "Vesting";
    IAdoType["WEIGHTEDDISTRIBUTIONSPLITTER"] = "WeightedDistributionSplitter";
    IAdoType["WEIGHTEDSPLITTER"] = "WeightedSplitter";
    IAdoType["WRAPPEDCW721"] = "WrappedCW721";
})(IAdoType || (exports.IAdoType = IAdoType = {}));
var IAndrOrderBy;
(function (IAndrOrderBy) {
    IAndrOrderBy["ASC"] = "Asc";
    IAndrOrderBy["DESC"] = "Desc";
})(IAndrOrderBy || (exports.IAndrOrderBy = IAndrOrderBy = {}));
var IAndrStrategyType;
(function (IAndrStrategyType) {
    IAndrStrategyType["ANCHOR"] = "Anchor";
})(IAndrStrategyType || (exports.IAndrStrategyType = IAndrStrategyType = {}));
exports.AndrFragmentFragmentDoc = (0, client_1.gql) `
    fragment andrFragment on AndrQuery {
  address
  admin
  appContract
  blockHeightUponCreation
  codeId
  creator
  ibcPortId
  kernelAddress
  label
  originalPublisher
  owner
  ownershipRequest
  permissionedActions
  type
  version
}
    `;
exports.ComponentFragmentDoc = (0, client_1.gql) `
    fragment component on Component {
  address
  ado_type
  instantiate_msg
  name
}
    `;
exports.AppComponentFragmentDoc = (0, client_1.gql) `
    fragment appComponent on AppComponent {
  address
  ado_type
  instantiate_msg
  name
  type
}
    `;
exports.Bech32configFragmentDoc = (0, client_1.gql) `
    fragment bech32config on Bech32Config {
  bech32PrefixAccPub
  bech32PrefixValPub
  bech32PrefixAccAddr
  bech32PrefixConsPub
  bech32PrefixValAddr
  bech32PrefixConsAddr
}
    `;
exports.CurrencyFragmentDoc = (0, client_1.gql) `
    fragment currency on Currency {
  coinDenom
  coinGeckoId
  coinDecimals
  coinMinimalDenom
}
    `;
exports.KeplrConfigFragmentDoc = (0, client_1.gql) `
    fragment keplrConfig on KeplrConfig {
  bip44 {
    coinType
  }
  bech32Config {
    ...bech32config
  }
  chainId
  coinType
  chainName
  currencies {
    ...currency
  }
  feeCurrencies {
    ...currency
  }
  gasPriceStep {
    average
    low
    high
  }
  rpc
  rest
  stakeCurrency {
    ...currency
  }
}
    ${exports.Bech32configFragmentDoc}
${exports.CurrencyFragmentDoc}`;
exports.ChainConfigFragmentDoc = (0, client_1.gql) `
    fragment chainConfig on ChainConfig {
  addressPrefix
  blockExplorerTxPages
  blockExplorerAddressPages
  chainId
  chainUrl
  chainName
  chainType
  defaultFee
  iconUrls {
    sm
    lg
  }
  kernelAddress
  name
  registryAddress
  enabled
}
    `;
exports.TxInfoFragmentDoc = (0, client_1.gql) `
    fragment txInfo on TxInfo {
  code
  gasUsed
  gasWanted
  hash
  height
  rawLog
  tx
}
    `;
exports.AddressListContainsAddressDocument = (0, client_1.gql) `
    query ADDRESS_LIST_CONTAINS_ADDRESS($contractAddress: String!, $address: String!) {
  ADO {
    address_list(address: $contractAddress) {
      includesAddress(address: $address) {
        included
      }
    }
  }
}
    `;
/**
 * __useAddressListContainsAddressQuery__
 *
 * To run a query within a React component, call `useAddressListContainsAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useAddressListContainsAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAddressListContainsAddressQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *      address: // value for 'address'
 *   },
 * });
 */
function useAddressListContainsAddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AddressListContainsAddressDocument, options);
}
exports.useAddressListContainsAddressQuery = useAddressListContainsAddressQuery;
function useAddressListContainsAddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AddressListContainsAddressDocument, options);
}
exports.useAddressListContainsAddressLazyQuery = useAddressListContainsAddressLazyQuery;
function refetchAddressListContainsAddressQuery(variables) {
    return { query: exports.AddressListContainsAddressDocument, variables: variables };
}
exports.refetchAddressListContainsAddressQuery = refetchAddressListContainsAddressQuery;
exports.AppConfigDocument = (0, client_1.gql) `
    query APP_CONFIG($contractAddress: String!) {
  ADO {
    app(address: $contractAddress) {
      address
      config {
        name
        owner
      }
    }
  }
}
    `;
/**
 * __useAppConfigQuery__
 *
 * To run a query within a React component, call `useAppConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useAppConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAppConfigQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useAppConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AppConfigDocument, options);
}
exports.useAppConfigQuery = useAppConfigQuery;
function useAppConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AppConfigDocument, options);
}
exports.useAppConfigLazyQuery = useAppConfigLazyQuery;
function refetchAppConfigQuery(variables) {
    return { query: exports.AppConfigDocument, variables: variables };
}
exports.refetchAppConfigQuery = refetchAppConfigQuery;
exports.AppComponentsDocument = (0, client_1.gql) `
    query APP_COMPONENTS($contractAddress: String!) {
  ADO {
    app(address: $contractAddress) {
      address
      components {
        ...appComponent
      }
    }
  }
}
    ${exports.AppComponentFragmentDoc}`;
/**
 * __useAppComponentsQuery__
 *
 * To run a query within a React component, call `useAppComponentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAppComponentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAppComponentsQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useAppComponentsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AppComponentsDocument, options);
}
exports.useAppComponentsQuery = useAppComponentsQuery;
function useAppComponentsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AppComponentsDocument, options);
}
exports.useAppComponentsLazyQuery = useAppComponentsLazyQuery;
function refetchAppComponentsQuery(variables) {
    return { query: exports.AppComponentsDocument, variables: variables };
}
exports.refetchAppComponentsQuery = refetchAppComponentsQuery;
exports.AppConfigAndComponentsDocument = (0, client_1.gql) `
    query APP_CONFIG_AND_COMPONENTS($contractAddress: String!) {
  ADO {
    app(address: $contractAddress) {
      address
      config {
        name
        owner
      }
      components {
        ...appComponent
      }
    }
  }
}
    ${exports.AppComponentFragmentDoc}`;
/**
 * __useAppConfigAndComponentsQuery__
 *
 * To run a query within a React component, call `useAppConfigAndComponentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAppConfigAndComponentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAppConfigAndComponentsQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useAppConfigAndComponentsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AppConfigAndComponentsDocument, options);
}
exports.useAppConfigAndComponentsQuery = useAppConfigAndComponentsQuery;
function useAppConfigAndComponentsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AppConfigAndComponentsDocument, options);
}
exports.useAppConfigAndComponentsLazyQuery = useAppConfigAndComponentsLazyQuery;
function refetchAppConfigAndComponentsQuery(variables) {
    return { query: exports.AppConfigAndComponentsDocument, variables: variables };
}
exports.refetchAppConfigAndComponentsQuery = refetchAppConfigAndComponentsQuery;
exports.AssetsDocument = (0, client_1.gql) `
    query ASSETS($walletAddress: String!, $adoType: String, $appContract: String, $instantiateOwner: String, $kernel: String, $limit: Int!, $memo: String, $offset: Int!, $orderBy: AndrOrderBy, $owner: String, $ownershipRequest: String, $search: String) {
  accounts {
    assets(
      adoType: $adoType
      appContract: $appContract
      instantiateOwner: $instantiateOwner
      kernel: $kernel
      limit: $limit
      memo: $memo
      offset: $offset
      orderBy: $orderBy
      owner: $owner
      ownershipRequest: $ownershipRequest
      search: $search
      walletAddress: $walletAddress
    ) {
      address
      adoType
      appContract
      chainId
      disowned
      instantiateHash
      instantiateHeight
      instantiateOwner
      kernel
      lastUpdatedHash
      lastUpdatedHeight
      memo
      minter
      name
      owner
      ownershipRequest
    }
  }
}
    `;
/**
 * __useAssetsQuery__
 *
 * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAssetsQuery({
 *   variables: {
 *      walletAddress: // value for 'walletAddress'
 *      adoType: // value for 'adoType'
 *      appContract: // value for 'appContract'
 *      instantiateOwner: // value for 'instantiateOwner'
 *      kernel: // value for 'kernel'
 *      limit: // value for 'limit'
 *      memo: // value for 'memo'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      owner: // value for 'owner'
 *      ownershipRequest: // value for 'ownershipRequest'
 *      search: // value for 'search'
 *   },
 * });
 */
function useAssetsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AssetsDocument, options);
}
exports.useAssetsQuery = useAssetsQuery;
function useAssetsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AssetsDocument, options);
}
exports.useAssetsLazyQuery = useAssetsLazyQuery;
function refetchAssetsQuery(variables) {
    return { query: exports.AssetsDocument, variables: variables };
}
exports.refetchAssetsQuery = refetchAssetsQuery;
exports.BaseAdoDocument = (0, client_1.gql) `
    query BASE_ADO($contractAddress: String!) {
  ADO {
    ado(address: $contractAddress) {
      address
      chainId
      andr {
        ...andrFragment
      }
    }
  }
}
    ${exports.AndrFragmentFragmentDoc}`;
/**
 * __useBaseAdoQuery__
 *
 * To run a query within a React component, call `useBaseAdoQuery` and pass it any options that fit your needs.
 * When your component renders, `useBaseAdoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBaseAdoQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useBaseAdoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.BaseAdoDocument, options);
}
exports.useBaseAdoQuery = useBaseAdoQuery;
function useBaseAdoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.BaseAdoDocument, options);
}
exports.useBaseAdoLazyQuery = useBaseAdoLazyQuery;
function refetchBaseAdoQuery(variables) {
    return { query: exports.BaseAdoDocument, variables: variables };
}
exports.refetchBaseAdoQuery = refetchBaseAdoQuery;
exports.MiniBaseAdoDocument = (0, client_1.gql) `
    query MINI_BASE_ADO($contractAddress: String!) {
  ADO {
    ado(address: $contractAddress) {
      address
      chainId
      andr {
        type
        version
      }
    }
  }
}
    `;
/**
 * __useMiniBaseAdoQuery__
 *
 * To run a query within a React component, call `useMiniBaseAdoQuery` and pass it any options that fit your needs.
 * When your component renders, `useMiniBaseAdoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMiniBaseAdoQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useMiniBaseAdoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.MiniBaseAdoDocument, options);
}
exports.useMiniBaseAdoQuery = useMiniBaseAdoQuery;
function useMiniBaseAdoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.MiniBaseAdoDocument, options);
}
exports.useMiniBaseAdoLazyQuery = useMiniBaseAdoLazyQuery;
function refetchMiniBaseAdoQuery(variables) {
    return { query: exports.MiniBaseAdoDocument, variables: variables };
}
exports.refetchMiniBaseAdoQuery = refetchMiniBaseAdoQuery;
exports.CrowdfundAvailableTokensDocument = (0, client_1.gql) `
    query CROWDFUND_AVAILABLE_TOKENS($contractAddress: String!) {
  ADO {
    crowdfund(address: $contractAddress) {
      availableTokens
    }
  }
}
    `;
/**
 * __useCrowdfundAvailableTokensQuery__
 *
 * To run a query within a React component, call `useCrowdfundAvailableTokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCrowdfundAvailableTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCrowdfundAvailableTokensQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCrowdfundAvailableTokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CrowdfundAvailableTokensDocument, options);
}
exports.useCrowdfundAvailableTokensQuery = useCrowdfundAvailableTokensQuery;
function useCrowdfundAvailableTokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CrowdfundAvailableTokensDocument, options);
}
exports.useCrowdfundAvailableTokensLazyQuery = useCrowdfundAvailableTokensLazyQuery;
function refetchCrowdfundAvailableTokensQuery(variables) {
    return { query: exports.CrowdfundAvailableTokensDocument, variables: variables };
}
exports.refetchCrowdfundAvailableTokensQuery = refetchCrowdfundAvailableTokensQuery;
exports.CrowdfundIsTokenAvailableDocument = (0, client_1.gql) `
    query CROWDFUND_IS_TOKEN_AVAILABLE($contractAddress: String!, $tokenId: String!) {
  ADO {
    crowdfund(address: $contractAddress) {
      isTokenAvailable(tokenId: $tokenId)
    }
  }
}
    `;
/**
 * __useCrowdfundIsTokenAvailableQuery__
 *
 * To run a query within a React component, call `useCrowdfundIsTokenAvailableQuery` and pass it any options that fit your needs.
 * When your component renders, `useCrowdfundIsTokenAvailableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCrowdfundIsTokenAvailableQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *      tokenId: // value for 'tokenId'
 *   },
 * });
 */
function useCrowdfundIsTokenAvailableQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CrowdfundIsTokenAvailableDocument, options);
}
exports.useCrowdfundIsTokenAvailableQuery = useCrowdfundIsTokenAvailableQuery;
function useCrowdfundIsTokenAvailableLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CrowdfundIsTokenAvailableDocument, options);
}
exports.useCrowdfundIsTokenAvailableLazyQuery = useCrowdfundIsTokenAvailableLazyQuery;
function refetchCrowdfundIsTokenAvailableQuery(variables) {
    return { query: exports.CrowdfundIsTokenAvailableDocument, variables: variables };
}
exports.refetchCrowdfundIsTokenAvailableQuery = refetchCrowdfundIsTokenAvailableQuery;
exports.CrowdfundConfigDocument = (0, client_1.gql) `
    query CROWDFUND_CONFIG($contractAddress: String!) {
  ADO {
    crowdfund(address: $contractAddress) {
      address
      config {
        can_mint_after_sale
        token_address
      }
    }
  }
}
    `;
/**
 * __useCrowdfundConfigQuery__
 *
 * To run a query within a React component, call `useCrowdfundConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCrowdfundConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCrowdfundConfigQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCrowdfundConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CrowdfundConfigDocument, options);
}
exports.useCrowdfundConfigQuery = useCrowdfundConfigQuery;
function useCrowdfundConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CrowdfundConfigDocument, options);
}
exports.useCrowdfundConfigLazyQuery = useCrowdfundConfigLazyQuery;
function refetchCrowdfundConfigQuery(variables) {
    return { query: exports.CrowdfundConfigDocument, variables: variables };
}
exports.refetchCrowdfundConfigQuery = refetchCrowdfundConfigQuery;
exports.CrowdfundStateDocument = (0, client_1.gql) `
    query CROWDFUND_STATE($contractAddress: String!) {
  ADO {
    crowdfund(address: $contractAddress) {
      state {
        amount_sold
        amount_to_send
        amount_transferred
        end_time
        max_amount_per_wallet
        min_tokens_sold
        price {
          amount
          denom
        }
        recipient {
          address
          ibc_recovery_address
          msg
        }
      }
    }
  }
}
    `;
/**
 * __useCrowdfundStateQuery__
 *
 * To run a query within a React component, call `useCrowdfundStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCrowdfundStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCrowdfundStateQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCrowdfundStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CrowdfundStateDocument, options);
}
exports.useCrowdfundStateQuery = useCrowdfundStateQuery;
function useCrowdfundStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CrowdfundStateDocument, options);
}
exports.useCrowdfundStateLazyQuery = useCrowdfundStateLazyQuery;
function refetchCrowdfundStateQuery(variables) {
    return { query: exports.CrowdfundStateDocument, variables: variables };
}
exports.refetchCrowdfundStateQuery = refetchCrowdfundStateQuery;
exports.Cw20TokenInfoDocument = (0, client_1.gql) `
    query CW20_TOKEN_INFO($contractAddress: String!) {
  ADO {
    cw20(address: $contractAddress) {
      address
      tokenInfo {
        decimals
        name
        symbol
        total_supply
      }
    }
  }
}
    `;
/**
 * __useCw20TokenInfoQuery__
 *
 * To run a query within a React component, call `useCw20TokenInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCw20TokenInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCw20TokenInfoQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCw20TokenInfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.Cw20TokenInfoDocument, options);
}
exports.useCw20TokenInfoQuery = useCw20TokenInfoQuery;
function useCw20TokenInfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.Cw20TokenInfoDocument, options);
}
exports.useCw20TokenInfoLazyQuery = useCw20TokenInfoLazyQuery;
function refetchCw20TokenInfoQuery(variables) {
    return { query: exports.Cw20TokenInfoDocument, variables: variables };
}
exports.refetchCw20TokenInfoQuery = refetchCw20TokenInfoQuery;
exports.Cw20Document = (0, client_1.gql) `
    query CW20($contractAddress: String!) {
  ADO {
    cw20(address: $contractAddress) {
      address
      marketingInfo {
        description
        logo
        marketing
        project
      }
      minter {
        cap
        minter
      }
    }
  }
}
    `;
/**
 * __useCw20Query__
 *
 * To run a query within a React component, call `useCw20Query` and pass it any options that fit your needs.
 * When your component renders, `useCw20Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCw20Query({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCw20Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.Cw20Document, options);
}
exports.useCw20Query = useCw20Query;
function useCw20LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.Cw20Document, options);
}
exports.useCw20LazyQuery = useCw20LazyQuery;
function refetchCw20Query(variables) {
    return { query: exports.Cw20Document, variables: variables };
}
exports.refetchCw20Query = refetchCw20Query;
exports.Cw721InfoDocument = (0, client_1.gql) `
    query CW721_INFO($contractAddress: String!) {
  ADO {
    cw721(address: $contractAddress) {
      address
      contractInfo {
        name
        symbol
      }
      minter
      numTokens
    }
  }
}
    `;
/**
 * __useCw721InfoQuery__
 *
 * To run a query within a React component, call `useCw721InfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCw721InfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCw721InfoQuery({
 *   variables: {
 *      contractAddress: // value for 'contractAddress'
 *   },
 * });
 */
function useCw721InfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.Cw721InfoDocument, options);
}
exports.useCw721InfoQuery = useCw721InfoQuery;
function useCw721InfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.Cw721InfoDocument, options);
}
exports.useCw721InfoLazyQuery = useCw721InfoLazyQuery;
function refetchCw721InfoQuery(variables) {
    return { query: exports.Cw721InfoDocument, variables: variables };
}
exports.refetchCw721InfoQuery = refetchCw721InfoQuery;
exports.ChainConfigDocument = (0, client_1.gql) `
    query CHAIN_CONFIG($identifier: String!) {
  chainConfigs {
    config(identifier: $identifier) {
      ...chainConfig
    }
  }
}
    ${exports.ChainConfigFragmentDoc}`;
/**
 * __useChainConfigQuery__
 *
 * To run a query within a React component, call `useChainConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useChainConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChainConfigQuery({
 *   variables: {
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
function useChainConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.ChainConfigDocument, options);
}
exports.useChainConfigQuery = useChainConfigQuery;
function useChainConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.ChainConfigDocument, options);
}
exports.useChainConfigLazyQuery = useChainConfigLazyQuery;
function refetchChainConfigQuery(variables) {
    return { query: exports.ChainConfigDocument, variables: variables };
}
exports.refetchChainConfigQuery = refetchChainConfigQuery;
exports.AllChainConfigDocument = (0, client_1.gql) `
    query ALL_CHAIN_CONFIG {
  chainConfigs {
    allConfigs {
      ...chainConfig
    }
  }
}
    ${exports.ChainConfigFragmentDoc}`;
/**
 * __useAllChainConfigQuery__
 *
 * To run a query within a React component, call `useAllChainConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllChainConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllChainConfigQuery({
 *   variables: {
 *   },
 * });
 */
function useAllChainConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AllChainConfigDocument, options);
}
exports.useAllChainConfigQuery = useAllChainConfigQuery;
function useAllChainConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AllChainConfigDocument, options);
}
exports.useAllChainConfigLazyQuery = useAllChainConfigLazyQuery;
function refetchAllChainConfigQuery(variables) {
    return { query: exports.AllChainConfigDocument, variables: variables };
}
exports.refetchAllChainConfigQuery = refetchAllChainConfigQuery;
exports.AllStoredChainConfigDocument = (0, client_1.gql) `
    query ALL_STORED_CHAIN_CONFIG {
  chainConfigs {
    allStoredConfigs {
      ...chainConfig
    }
  }
}
    ${exports.ChainConfigFragmentDoc}`;
/**
 * __useAllStoredChainConfigQuery__
 *
 * To run a query within a React component, call `useAllStoredChainConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllStoredChainConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllStoredChainConfigQuery({
 *   variables: {
 *   },
 * });
 */
function useAllStoredChainConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AllStoredChainConfigDocument, options);
}
exports.useAllStoredChainConfigQuery = useAllStoredChainConfigQuery;
function useAllStoredChainConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AllStoredChainConfigDocument, options);
}
exports.useAllStoredChainConfigLazyQuery = useAllStoredChainConfigLazyQuery;
function refetchAllStoredChainConfigQuery(variables) {
    return { query: exports.AllStoredChainConfigDocument, variables: variables };
}
exports.refetchAllStoredChainConfigQuery = refetchAllStoredChainConfigQuery;
exports.KeplrConfigDocument = (0, client_1.gql) `
    query KEPLR_CONFIG($identifier: String!) {
  keplrConfigs {
    config(identifier: $identifier) {
      ...keplrConfig
    }
  }
}
    ${exports.KeplrConfigFragmentDoc}`;
/**
 * __useKeplrConfigQuery__
 *
 * To run a query within a React component, call `useKeplrConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useKeplrConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useKeplrConfigQuery({
 *   variables: {
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
function useKeplrConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.KeplrConfigDocument, options);
}
exports.useKeplrConfigQuery = useKeplrConfigQuery;
function useKeplrConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.KeplrConfigDocument, options);
}
exports.useKeplrConfigLazyQuery = useKeplrConfigLazyQuery;
function refetchKeplrConfigQuery(variables) {
    return { query: exports.KeplrConfigDocument, variables: variables };
}
exports.refetchKeplrConfigQuery = refetchKeplrConfigQuery;
exports.AllKeplrConfigDocument = (0, client_1.gql) `
    query ALL_KEPLR_CONFIG {
  keplrConfigs {
    allConfigs {
      ...keplrConfig
    }
  }
}
    ${exports.KeplrConfigFragmentDoc}`;
/**
 * __useAllKeplrConfigQuery__
 *
 * To run a query within a React component, call `useAllKeplrConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllKeplrConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllKeplrConfigQuery({
 *   variables: {
 *   },
 * });
 */
function useAllKeplrConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.AllKeplrConfigDocument, options);
}
exports.useAllKeplrConfigQuery = useAllKeplrConfigQuery;
function useAllKeplrConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.AllKeplrConfigDocument, options);
}
exports.useAllKeplrConfigLazyQuery = useAllKeplrConfigLazyQuery;
function refetchAllKeplrConfigQuery(variables) {
    return { query: exports.AllKeplrConfigDocument, variables: variables };
}
exports.refetchAllKeplrConfigQuery = refetchAllKeplrConfigQuery;
exports.CodegenGeneratedAdoAddressListAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADDRESS_LIST_ANDR($ADO_address_list_address: String!) {
  ADO {
    address_list(address: $ADO_address_list_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAddressListAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAddressListAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAddressListAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAddressListAndrQuery({
 *   variables: {
 *      ADO_address_list_address: // value for 'ADO_address_list_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAddressListAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAddressListAndrDocument, options);
}
exports.useCodegenGeneratedAdoAddressListAndrQuery = useCodegenGeneratedAdoAddressListAndrQuery;
function useCodegenGeneratedAdoAddressListAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAddressListAndrDocument, options);
}
exports.useCodegenGeneratedAdoAddressListAndrLazyQuery = useCodegenGeneratedAdoAddressListAndrLazyQuery;
function refetchCodegenGeneratedAdoAddressListAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAddressListAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAddressListAndrQuery = refetchCodegenGeneratedAdoAddressListAndrQuery;
exports.CodegenGeneratedAdoAddressListIncludesaddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADDRESS_LIST_INCLUDESADDRESS($ADO_address_list_address: String!, $ADO_address_list_address_list_includesAddress_address: String!) {
  ADO {
    address_list(address: $ADO_address_list_address) {
      includesAddress(address: $ADO_address_list_address_list_includesAddress_address) {
        included
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAddressListIncludesaddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAddressListIncludesaddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAddressListIncludesaddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAddressListIncludesaddressQuery({
 *   variables: {
 *      ADO_address_list_address: // value for 'ADO_address_list_address'
 *      ADO_address_list_address_list_includesAddress_address: // value for 'ADO_address_list_address_list_includesAddress_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAddressListIncludesaddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAddressListIncludesaddressDocument, options);
}
exports.useCodegenGeneratedAdoAddressListIncludesaddressQuery = useCodegenGeneratedAdoAddressListIncludesaddressQuery;
function useCodegenGeneratedAdoAddressListIncludesaddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAddressListIncludesaddressDocument, options);
}
exports.useCodegenGeneratedAdoAddressListIncludesaddressLazyQuery = useCodegenGeneratedAdoAddressListIncludesaddressLazyQuery;
function refetchCodegenGeneratedAdoAddressListIncludesaddressQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAddressListIncludesaddressDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAddressListIncludesaddressQuery = refetchCodegenGeneratedAdoAddressListIncludesaddressQuery;
exports.CodegenGeneratedAdoAddressListDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADDRESS_LIST($ADO_address_list_address: String!) {
  ADO {
    address_list(address: $ADO_address_list_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAddressListQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAddressListQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAddressListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAddressListQuery({
 *   variables: {
 *      ADO_address_list_address: // value for 'ADO_address_list_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAddressListQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAddressListDocument, options);
}
exports.useCodegenGeneratedAdoAddressListQuery = useCodegenGeneratedAdoAddressListQuery;
function useCodegenGeneratedAdoAddressListLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAddressListDocument, options);
}
exports.useCodegenGeneratedAdoAddressListLazyQuery = useCodegenGeneratedAdoAddressListLazyQuery;
function refetchCodegenGeneratedAdoAddressListQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAddressListDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAddressListQuery = refetchCodegenGeneratedAdoAddressListQuery;
exports.CodegenGeneratedAdoAdoAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADO_ANDR($ADO_ado_address: String!) {
  ADO {
    ado(address: $ADO_ado_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAdoAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAdoAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAdoAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAdoAndrQuery({
 *   variables: {
 *      ADO_ado_address: // value for 'ADO_ado_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAdoAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAdoAndrDocument, options);
}
exports.useCodegenGeneratedAdoAdoAndrQuery = useCodegenGeneratedAdoAdoAndrQuery;
function useCodegenGeneratedAdoAdoAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAdoAndrDocument, options);
}
exports.useCodegenGeneratedAdoAdoAndrLazyQuery = useCodegenGeneratedAdoAdoAndrLazyQuery;
function refetchCodegenGeneratedAdoAdoAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAdoAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAdoAndrQuery = refetchCodegenGeneratedAdoAdoAndrQuery;
exports.CodegenGeneratedAdoAdoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADO($ADO_ado_address: String!) {
  ADO {
    ado(address: $ADO_ado_address) {
      address
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAdoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAdoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAdoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAdoQuery({
 *   variables: {
 *      ADO_ado_address: // value for 'ADO_ado_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAdoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAdoDocument, options);
}
exports.useCodegenGeneratedAdoAdoQuery = useCodegenGeneratedAdoAdoQuery;
function useCodegenGeneratedAdoAdoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAdoDocument, options);
}
exports.useCodegenGeneratedAdoAdoLazyQuery = useCodegenGeneratedAdoAdoLazyQuery;
function refetchCodegenGeneratedAdoAdoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAdoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAdoQuery = refetchCodegenGeneratedAdoAdoQuery;
exports.CodegenGeneratedAdoAdosmartDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_ADOSMART($ADO_adoSmart_address: String!, $ADO_adoSmart_query: String!) {
  ADO {
    adoSmart(address: $ADO_adoSmart_address, query: $ADO_adoSmart_query) {
      address
      adoType
      query
      queryResult
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAdosmartQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAdosmartQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAdosmartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAdosmartQuery({
 *   variables: {
 *      ADO_adoSmart_address: // value for 'ADO_adoSmart_address'
 *      ADO_adoSmart_query: // value for 'ADO_adoSmart_query'
 *   },
 * });
 */
function useCodegenGeneratedAdoAdosmartQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAdosmartDocument, options);
}
exports.useCodegenGeneratedAdoAdosmartQuery = useCodegenGeneratedAdoAdosmartQuery;
function useCodegenGeneratedAdoAdosmartLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAdosmartDocument, options);
}
exports.useCodegenGeneratedAdoAdosmartLazyQuery = useCodegenGeneratedAdoAdosmartLazyQuery;
function refetchCodegenGeneratedAdoAdosmartQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAdosmartDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAdosmartQuery = refetchCodegenGeneratedAdoAdosmartQuery;
exports.CodegenGeneratedAdoAppAddressesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_ADDRESSES($ADO_app_address: String!) {
  ADO {
    app(address: $ADO_app_address) {
      addresses {
        address
        name
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppAddressesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppAddressesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppAddressesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppAddressesQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppAddressesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppAddressesDocument, options);
}
exports.useCodegenGeneratedAdoAppAddressesQuery = useCodegenGeneratedAdoAppAddressesQuery;
function useCodegenGeneratedAdoAppAddressesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppAddressesDocument, options);
}
exports.useCodegenGeneratedAdoAppAddressesLazyQuery = useCodegenGeneratedAdoAppAddressesLazyQuery;
function refetchCodegenGeneratedAdoAppAddressesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppAddressesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppAddressesQuery = refetchCodegenGeneratedAdoAppAddressesQuery;
exports.CodegenGeneratedAdoAppAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_ANDR($ADO_app_address: String!) {
  ADO {
    app(address: $ADO_app_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppAndrQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppAndrDocument, options);
}
exports.useCodegenGeneratedAdoAppAndrQuery = useCodegenGeneratedAdoAppAndrQuery;
function useCodegenGeneratedAdoAppAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppAndrDocument, options);
}
exports.useCodegenGeneratedAdoAppAndrLazyQuery = useCodegenGeneratedAdoAppAndrLazyQuery;
function refetchCodegenGeneratedAdoAppAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppAndrQuery = refetchCodegenGeneratedAdoAppAndrQuery;
exports.CodegenGeneratedAdoAppComponentexistsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_COMPONENTEXISTS($ADO_app_address: String!, $ADO_app_app_componentExists_name: String!) {
  ADO {
    app(address: $ADO_app_address) {
      componentExists(name: $ADO_app_app_componentExists_name)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppComponentexistsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppComponentexistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppComponentexistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppComponentexistsQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *      ADO_app_app_componentExists_name: // value for 'ADO_app_app_componentExists_name'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppComponentexistsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppComponentexistsDocument, options);
}
exports.useCodegenGeneratedAdoAppComponentexistsQuery = useCodegenGeneratedAdoAppComponentexistsQuery;
function useCodegenGeneratedAdoAppComponentexistsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppComponentexistsDocument, options);
}
exports.useCodegenGeneratedAdoAppComponentexistsLazyQuery = useCodegenGeneratedAdoAppComponentexistsLazyQuery;
function refetchCodegenGeneratedAdoAppComponentexistsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppComponentexistsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppComponentexistsQuery = refetchCodegenGeneratedAdoAppComponentexistsQuery;
exports.CodegenGeneratedAdoAppComponentsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_COMPONENTS($ADO_app_address: String!) {
  ADO {
    app(address: $ADO_app_address) {
      components {
        address
        ado_type
        instantiate_msg
        name
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppComponentsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppComponentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppComponentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppComponentsQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppComponentsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppComponentsDocument, options);
}
exports.useCodegenGeneratedAdoAppComponentsQuery = useCodegenGeneratedAdoAppComponentsQuery;
function useCodegenGeneratedAdoAppComponentsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppComponentsDocument, options);
}
exports.useCodegenGeneratedAdoAppComponentsLazyQuery = useCodegenGeneratedAdoAppComponentsLazyQuery;
function refetchCodegenGeneratedAdoAppComponentsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppComponentsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppComponentsQuery = refetchCodegenGeneratedAdoAppComponentsQuery;
exports.CodegenGeneratedAdoAppConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_CONFIG($ADO_app_address: String!) {
  ADO {
    app(address: $ADO_app_address) {
      config {
        name
        owner
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppConfigQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppConfigDocument, options);
}
exports.useCodegenGeneratedAdoAppConfigQuery = useCodegenGeneratedAdoAppConfigQuery;
function useCodegenGeneratedAdoAppConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppConfigDocument, options);
}
exports.useCodegenGeneratedAdoAppConfigLazyQuery = useCodegenGeneratedAdoAppConfigLazyQuery;
function refetchCodegenGeneratedAdoAppConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppConfigQuery = refetchCodegenGeneratedAdoAppConfigQuery;
exports.CodegenGeneratedAdoAppGetaddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP_GETADDRESS($ADO_app_address: String!, $ADO_app_app_getAddress_name: String!) {
  ADO {
    app(address: $ADO_app_address) {
      getAddress(name: $ADO_app_app_getAddress_name)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppGetaddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppGetaddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppGetaddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppGetaddressQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *      ADO_app_app_getAddress_name: // value for 'ADO_app_app_getAddress_name'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppGetaddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppGetaddressDocument, options);
}
exports.useCodegenGeneratedAdoAppGetaddressQuery = useCodegenGeneratedAdoAppGetaddressQuery;
function useCodegenGeneratedAdoAppGetaddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppGetaddressDocument, options);
}
exports.useCodegenGeneratedAdoAppGetaddressLazyQuery = useCodegenGeneratedAdoAppGetaddressLazyQuery;
function refetchCodegenGeneratedAdoAppGetaddressQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppGetaddressDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppGetaddressQuery = refetchCodegenGeneratedAdoAppGetaddressQuery;
exports.CodegenGeneratedAdoAppDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_APP($ADO_app_address: String!) {
  ADO {
    app(address: $ADO_app_address) {
      address
      addresses {
        address
        name
      }
      chainId
      components {
        address
        ado_type
        instantiate_msg
        name
        type
      }
      config {
        name
        owner
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAppQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAppQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAppQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAppQuery({
 *   variables: {
 *      ADO_app_address: // value for 'ADO_app_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAppQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAppDocument, options);
}
exports.useCodegenGeneratedAdoAppQuery = useCodegenGeneratedAdoAppQuery;
function useCodegenGeneratedAdoAppLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAppDocument, options);
}
exports.useCodegenGeneratedAdoAppLazyQuery = useCodegenGeneratedAdoAppLazyQuery;
function refetchCodegenGeneratedAdoAppQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAppDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAppQuery = refetchCodegenGeneratedAdoAppQuery;
exports.CodegenGeneratedAdoAuctionAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_ANDR($ADO_auction_address: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionAndrQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionAndrDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAndrQuery = useCodegenGeneratedAdoAuctionAndrQuery;
function useCodegenGeneratedAdoAuctionAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionAndrDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAndrLazyQuery = useCodegenGeneratedAdoAuctionAndrLazyQuery;
function refetchCodegenGeneratedAdoAuctionAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionAndrQuery = refetchCodegenGeneratedAdoAuctionAndrQuery;
exports.CodegenGeneratedAdoAuctionAuctionidsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_AUCTIONIDS($ADO_auction_address: String!, $ADO_auction_auction_auctionIDs_tokenAddress: String!, $ADO_auction_auction_auctionIDs_tokenId: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      auctionIDs(
        tokenAddress: $ADO_auction_auction_auctionIDs_tokenAddress
        tokenId: $ADO_auction_auction_auctionIDs_tokenId
      ) {
        auction_ids
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionAuctionidsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionAuctionidsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionAuctionidsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionAuctionidsQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_auctionIDs_tokenAddress: // value for 'ADO_auction_auction_auctionIDs_tokenAddress'
 *      ADO_auction_auction_auctionIDs_tokenId: // value for 'ADO_auction_auction_auctionIDs_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionAuctionidsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionAuctionidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctionidsQuery = useCodegenGeneratedAdoAuctionAuctionidsQuery;
function useCodegenGeneratedAdoAuctionAuctionidsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionAuctionidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctionidsLazyQuery = useCodegenGeneratedAdoAuctionAuctionidsLazyQuery;
function refetchCodegenGeneratedAdoAuctionAuctionidsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionAuctionidsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionAuctionidsQuery = refetchCodegenGeneratedAdoAuctionAuctionidsQuery;
exports.CodegenGeneratedAdoAuctionAuctioninfosforaddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_AUCTIONINFOSFORADDRESS($ADO_auction_address: String!, $ADO_auction_auction_auctionInfosForAddress_tokenAddress: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      auctionInfosForAddress(
        tokenAddress: $ADO_auction_auction_auctionInfosForAddress_tokenAddress
      ) {
        auction_ids
        token_address
        token_id
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_auctionInfosForAddress_tokenAddress: // value for 'ADO_auction_auction_auctionInfosForAddress_tokenAddress'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionAuctioninfosforaddressDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery = useCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery;
function useCodegenGeneratedAdoAuctionAuctioninfosforaddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionAuctioninfosforaddressDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctioninfosforaddressLazyQuery = useCodegenGeneratedAdoAuctionAuctioninfosforaddressLazyQuery;
function refetchCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionAuctioninfosforaddressDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery = refetchCodegenGeneratedAdoAuctionAuctioninfosforaddressQuery;
exports.CodegenGeneratedAdoAuctionAuctionstateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_AUCTIONSTATE($ADO_auction_address: String!, $ADO_auction_auction_auctionState_auctionId: Float!) {
  ADO {
    auction(address: $ADO_auction_address) {
      auctionState(auctionId: $ADO_auction_auction_auctionState_auctionId) {
        auction_id
        coin_denom
        end_time
        high_bidder_addr
        high_bidder_amount
        is_cancelled
        min_bid
        start_time
        whitelist
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionAuctionstateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionAuctionstateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionAuctionstateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionAuctionstateQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_auctionState_auctionId: // value for 'ADO_auction_auction_auctionState_auctionId'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionAuctionstateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionAuctionstateDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctionstateQuery = useCodegenGeneratedAdoAuctionAuctionstateQuery;
function useCodegenGeneratedAdoAuctionAuctionstateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionAuctionstateDocument, options);
}
exports.useCodegenGeneratedAdoAuctionAuctionstateLazyQuery = useCodegenGeneratedAdoAuctionAuctionstateLazyQuery;
function refetchCodegenGeneratedAdoAuctionAuctionstateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionAuctionstateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionAuctionstateQuery = refetchCodegenGeneratedAdoAuctionAuctionstateQuery;
exports.CodegenGeneratedAdoAuctionBidsBidsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_BIDS_BIDS($ADO_auction_address: String!, $ADO_auction_auction_bids_auctionId: Float!, $ADO_auction_auction_bids_options: AndrSearchOptions) {
  ADO {
    auction(address: $ADO_auction_address) {
      bids(
        auctionId: $ADO_auction_auction_bids_auctionId
        options: $ADO_auction_auction_bids_options
      ) {
        bids {
          amount
          bidder
          timestamp
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionBidsBidsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionBidsBidsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionBidsBidsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionBidsBidsQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_bids_auctionId: // value for 'ADO_auction_auction_bids_auctionId'
 *      ADO_auction_auction_bids_options: // value for 'ADO_auction_auction_bids_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionBidsBidsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionBidsBidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionBidsBidsQuery = useCodegenGeneratedAdoAuctionBidsBidsQuery;
function useCodegenGeneratedAdoAuctionBidsBidsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionBidsBidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionBidsBidsLazyQuery = useCodegenGeneratedAdoAuctionBidsBidsLazyQuery;
function refetchCodegenGeneratedAdoAuctionBidsBidsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionBidsBidsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionBidsBidsQuery = refetchCodegenGeneratedAdoAuctionBidsBidsQuery;
exports.CodegenGeneratedAdoAuctionBidsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_BIDS($ADO_auction_address: String!, $ADO_auction_auction_bids_auctionId: Float!, $ADO_auction_auction_bids_options: AndrSearchOptions) {
  ADO {
    auction(address: $ADO_auction_address) {
      bids(
        auctionId: $ADO_auction_auction_bids_auctionId
        options: $ADO_auction_auction_bids_options
      ) {
        bids {
          amount
          bidder
          timestamp
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionBidsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionBidsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionBidsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionBidsQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_bids_auctionId: // value for 'ADO_auction_auction_bids_auctionId'
 *      ADO_auction_auction_bids_options: // value for 'ADO_auction_auction_bids_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionBidsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionBidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionBidsQuery = useCodegenGeneratedAdoAuctionBidsQuery;
function useCodegenGeneratedAdoAuctionBidsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionBidsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionBidsLazyQuery = useCodegenGeneratedAdoAuctionBidsLazyQuery;
function refetchCodegenGeneratedAdoAuctionBidsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionBidsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionBidsQuery = refetchCodegenGeneratedAdoAuctionBidsQuery;
exports.CodegenGeneratedAdoAuctionLatestauctionstateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_LATESTAUCTIONSTATE($ADO_auction_address: String!, $ADO_auction_auction_latestAuctionState_tokenAddress: String!, $ADO_auction_auction_latestAuctionState_tokenId: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      latestAuctionState(
        tokenAddress: $ADO_auction_auction_latestAuctionState_tokenAddress
        tokenId: $ADO_auction_auction_latestAuctionState_tokenId
      ) {
        auction_id
        coin_denom
        end_time
        high_bidder_addr
        high_bidder_amount
        is_cancelled
        min_bid
        start_time
        whitelist
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionLatestauctionstateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionLatestauctionstateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionLatestauctionstateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionLatestauctionstateQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_latestAuctionState_tokenAddress: // value for 'ADO_auction_auction_latestAuctionState_tokenAddress'
 *      ADO_auction_auction_latestAuctionState_tokenId: // value for 'ADO_auction_auction_latestAuctionState_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionLatestauctionstateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionLatestauctionstateDocument, options);
}
exports.useCodegenGeneratedAdoAuctionLatestauctionstateQuery = useCodegenGeneratedAdoAuctionLatestauctionstateQuery;
function useCodegenGeneratedAdoAuctionLatestauctionstateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionLatestauctionstateDocument, options);
}
exports.useCodegenGeneratedAdoAuctionLatestauctionstateLazyQuery = useCodegenGeneratedAdoAuctionLatestauctionstateLazyQuery;
function refetchCodegenGeneratedAdoAuctionLatestauctionstateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionLatestauctionstateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionLatestauctionstateQuery = refetchCodegenGeneratedAdoAuctionLatestauctionstateQuery;
exports.CodegenGeneratedAdoAuctionSummaryfieldsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION_SUMMARYFIELDS($ADO_auction_address: String!, $ADO_auction_auction_summaryFields_tokenAddress: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      summaryFields(tokenAddress: $ADO_auction_auction_summaryFields_tokenAddress) {
        coin_denom
        high_bidder_amount
        min_bid
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionSummaryfieldsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionSummaryfieldsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionSummaryfieldsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionSummaryfieldsQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *      ADO_auction_auction_summaryFields_tokenAddress: // value for 'ADO_auction_auction_summaryFields_tokenAddress'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionSummaryfieldsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionSummaryfieldsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionSummaryfieldsQuery = useCodegenGeneratedAdoAuctionSummaryfieldsQuery;
function useCodegenGeneratedAdoAuctionSummaryfieldsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionSummaryfieldsDocument, options);
}
exports.useCodegenGeneratedAdoAuctionSummaryfieldsLazyQuery = useCodegenGeneratedAdoAuctionSummaryfieldsLazyQuery;
function refetchCodegenGeneratedAdoAuctionSummaryfieldsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionSummaryfieldsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionSummaryfieldsQuery = refetchCodegenGeneratedAdoAuctionSummaryfieldsQuery;
exports.CodegenGeneratedAdoAuctionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_AUCTION($ADO_auction_address: String!) {
  ADO {
    auction(address: $ADO_auction_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoAuctionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoAuctionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoAuctionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoAuctionQuery({
 *   variables: {
 *      ADO_auction_address: // value for 'ADO_auction_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoAuctionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoAuctionDocument, options);
}
exports.useCodegenGeneratedAdoAuctionQuery = useCodegenGeneratedAdoAuctionQuery;
function useCodegenGeneratedAdoAuctionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoAuctionDocument, options);
}
exports.useCodegenGeneratedAdoAuctionLazyQuery = useCodegenGeneratedAdoAuctionLazyQuery;
function refetchCodegenGeneratedAdoAuctionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoAuctionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoAuctionQuery = refetchCodegenGeneratedAdoAuctionQuery;
exports.CodegenGeneratedAdoChainidDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CHAINID($ADO_chainId_address: String!) {
  ADO {
    chainId(address: $ADO_chainId_address)
  }
}
    `;
/**
 * __useCodegenGeneratedAdoChainidQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoChainidQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoChainidQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoChainidQuery({
 *   variables: {
 *      ADO_chainId_address: // value for 'ADO_chainId_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoChainidQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoChainidDocument, options);
}
exports.useCodegenGeneratedAdoChainidQuery = useCodegenGeneratedAdoChainidQuery;
function useCodegenGeneratedAdoChainidLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoChainidDocument, options);
}
exports.useCodegenGeneratedAdoChainidLazyQuery = useCodegenGeneratedAdoChainidLazyQuery;
function refetchCodegenGeneratedAdoChainidQuery(variables) {
    return { query: exports.CodegenGeneratedAdoChainidDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoChainidQuery = refetchCodegenGeneratedAdoChainidQuery;
exports.CodegenGeneratedAdoCrowdfundAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_ANDR($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundAndrQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundAndrDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundAndrQuery = useCodegenGeneratedAdoCrowdfundAndrQuery;
function useCodegenGeneratedAdoCrowdfundAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundAndrDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundAndrLazyQuery = useCodegenGeneratedAdoCrowdfundAndrLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundAndrQuery = refetchCodegenGeneratedAdoCrowdfundAndrQuery;
exports.CodegenGeneratedAdoCrowdfundConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_CONFIG($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      config {
        can_mint_after_sale
        token_address
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundConfigQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundConfigDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundConfigQuery = useCodegenGeneratedAdoCrowdfundConfigQuery;
function useCodegenGeneratedAdoCrowdfundConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundConfigDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundConfigLazyQuery = useCodegenGeneratedAdoCrowdfundConfigLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundConfigQuery = refetchCodegenGeneratedAdoCrowdfundConfigQuery;
exports.CodegenGeneratedAdoCrowdfundIstokenavailableDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_ISTOKENAVAILABLE($ADO_crowdfund_address: String!, $ADO_crowdfund_crowdfund_isTokenAvailable_tokenId: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      isTokenAvailable(tokenId: $ADO_crowdfund_crowdfund_isTokenAvailable_tokenId)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundIstokenavailableQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundIstokenavailableQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundIstokenavailableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundIstokenavailableQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *      ADO_crowdfund_crowdfund_isTokenAvailable_tokenId: // value for 'ADO_crowdfund_crowdfund_isTokenAvailable_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundIstokenavailableQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundIstokenavailableDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundIstokenavailableQuery = useCodegenGeneratedAdoCrowdfundIstokenavailableQuery;
function useCodegenGeneratedAdoCrowdfundIstokenavailableLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundIstokenavailableDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundIstokenavailableLazyQuery = useCodegenGeneratedAdoCrowdfundIstokenavailableLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundIstokenavailableQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundIstokenavailableDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundIstokenavailableQuery = refetchCodegenGeneratedAdoCrowdfundIstokenavailableQuery;
exports.CodegenGeneratedAdoCrowdfundStatePriceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_STATE_PRICE($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      state {
        price {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundStatePriceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundStatePriceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundStatePriceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundStatePriceQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundStatePriceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundStatePriceDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStatePriceQuery = useCodegenGeneratedAdoCrowdfundStatePriceQuery;
function useCodegenGeneratedAdoCrowdfundStatePriceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundStatePriceDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStatePriceLazyQuery = useCodegenGeneratedAdoCrowdfundStatePriceLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundStatePriceQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundStatePriceDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundStatePriceQuery = refetchCodegenGeneratedAdoCrowdfundStatePriceQuery;
exports.CodegenGeneratedAdoCrowdfundStateRecipientDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_STATE_RECIPIENT($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      state {
        recipient {
          address
          ibc_recovery_address
          msg
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundStateRecipientQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundStateRecipientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundStateRecipientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundStateRecipientQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundStateRecipientQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundStateRecipientDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStateRecipientQuery = useCodegenGeneratedAdoCrowdfundStateRecipientQuery;
function useCodegenGeneratedAdoCrowdfundStateRecipientLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundStateRecipientDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStateRecipientLazyQuery = useCodegenGeneratedAdoCrowdfundStateRecipientLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundStateRecipientQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundStateRecipientDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundStateRecipientQuery = refetchCodegenGeneratedAdoCrowdfundStateRecipientQuery;
exports.CodegenGeneratedAdoCrowdfundStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND_STATE($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      state {
        amount_sold
        amount_to_send
        amount_transferred
        end_time
        max_amount_per_wallet
        min_tokens_sold
        price {
          amount
          denom
        }
        recipient {
          address
          ibc_recovery_address
          msg
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundStateQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundStateDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStateQuery = useCodegenGeneratedAdoCrowdfundStateQuery;
function useCodegenGeneratedAdoCrowdfundStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundStateDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundStateLazyQuery = useCodegenGeneratedAdoCrowdfundStateLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundStateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundStateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundStateQuery = refetchCodegenGeneratedAdoCrowdfundStateQuery;
exports.CodegenGeneratedAdoCrowdfundDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CROWDFUND($ADO_crowdfund_address: String!) {
  ADO {
    crowdfund(address: $ADO_crowdfund_address) {
      address
      availableTokens
      chainId
      config {
        can_mint_after_sale
        token_address
      }
      state {
        amount_sold
        amount_to_send
        amount_transferred
        end_time
        max_amount_per_wallet
        min_tokens_sold
        price {
          amount
          denom
        }
        recipient {
          address
          ibc_recovery_address
          msg
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCrowdfundQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCrowdfundQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCrowdfundQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCrowdfundQuery({
 *   variables: {
 *      ADO_crowdfund_address: // value for 'ADO_crowdfund_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCrowdfundQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCrowdfundDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundQuery = useCodegenGeneratedAdoCrowdfundQuery;
function useCodegenGeneratedAdoCrowdfundLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCrowdfundDocument, options);
}
exports.useCodegenGeneratedAdoCrowdfundLazyQuery = useCodegenGeneratedAdoCrowdfundLazyQuery;
function refetchCodegenGeneratedAdoCrowdfundQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCrowdfundDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCrowdfundQuery = refetchCodegenGeneratedAdoCrowdfundQuery;
exports.CodegenGeneratedAdoCw20AllaccountsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_ALLACCOUNTS($ADO_cw20_address: String!, $ADO_cw20_cw20_allAccounts_options: AndrSearchOptions) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      allAccounts(options: $ADO_cw20_cw20_allAccounts_options)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20AllaccountsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20AllaccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20AllaccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20AllaccountsQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *      ADO_cw20_cw20_allAccounts_options: // value for 'ADO_cw20_cw20_allAccounts_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20AllaccountsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20AllaccountsDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllaccountsQuery = useCodegenGeneratedAdoCw20AllaccountsQuery;
function useCodegenGeneratedAdoCw20AllaccountsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20AllaccountsDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllaccountsLazyQuery = useCodegenGeneratedAdoCw20AllaccountsLazyQuery;
function refetchCodegenGeneratedAdoCw20AllaccountsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20AllaccountsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20AllaccountsQuery = refetchCodegenGeneratedAdoCw20AllaccountsQuery;
exports.CodegenGeneratedAdoCw20AllallowancesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_ALLALLOWANCES($ADO_cw20_address: String!, $ADO_cw20_cw20_allAllowances_options: AndrSearchOptions, $ADO_cw20_cw20_allAllowances_owner: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      allAllowances(
        options: $ADO_cw20_cw20_allAllowances_options
        owner: $ADO_cw20_cw20_allAllowances_owner
      ) {
        allowance
        expires
        owner
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20AllallowancesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20AllallowancesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20AllallowancesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20AllallowancesQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *      ADO_cw20_cw20_allAllowances_options: // value for 'ADO_cw20_cw20_allAllowances_options'
 *      ADO_cw20_cw20_allAllowances_owner: // value for 'ADO_cw20_cw20_allAllowances_owner'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20AllallowancesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20AllallowancesDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllallowancesQuery = useCodegenGeneratedAdoCw20AllallowancesQuery;
function useCodegenGeneratedAdoCw20AllallowancesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20AllallowancesDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllallowancesLazyQuery = useCodegenGeneratedAdoCw20AllallowancesLazyQuery;
function refetchCodegenGeneratedAdoCw20AllallowancesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20AllallowancesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20AllallowancesQuery = refetchCodegenGeneratedAdoCw20AllallowancesQuery;
exports.CodegenGeneratedAdoCw20AllspenderallowancesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_ALLSPENDERALLOWANCES($ADO_cw20_address: String!, $ADO_cw20_cw20_allSpenderAllowances_options: AndrSearchOptions, $ADO_cw20_cw20_allSpenderAllowances_spender: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      allSpenderAllowances(
        options: $ADO_cw20_cw20_allSpenderAllowances_options
        spender: $ADO_cw20_cw20_allSpenderAllowances_spender
      ) {
        allowance
        expires
        owner
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20AllspenderallowancesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20AllspenderallowancesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20AllspenderallowancesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20AllspenderallowancesQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *      ADO_cw20_cw20_allSpenderAllowances_options: // value for 'ADO_cw20_cw20_allSpenderAllowances_options'
 *      ADO_cw20_cw20_allSpenderAllowances_spender: // value for 'ADO_cw20_cw20_allSpenderAllowances_spender'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20AllspenderallowancesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20AllspenderallowancesDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllspenderallowancesQuery = useCodegenGeneratedAdoCw20AllspenderallowancesQuery;
function useCodegenGeneratedAdoCw20AllspenderallowancesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20AllspenderallowancesDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllspenderallowancesLazyQuery = useCodegenGeneratedAdoCw20AllspenderallowancesLazyQuery;
function refetchCodegenGeneratedAdoCw20AllspenderallowancesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20AllspenderallowancesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20AllspenderallowancesQuery = refetchCodegenGeneratedAdoCw20AllspenderallowancesQuery;
exports.CodegenGeneratedAdoCw20AllowanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_ALLOWANCE($ADO_cw20_address: String!, $ADO_cw20_cw20_allowance_owner: String!, $ADO_cw20_cw20_allowance_spender: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      allowance(
        owner: $ADO_cw20_cw20_allowance_owner
        spender: $ADO_cw20_cw20_allowance_spender
      ) {
        allowance
        expires
        owner
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20AllowanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20AllowanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20AllowanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20AllowanceQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *      ADO_cw20_cw20_allowance_owner: // value for 'ADO_cw20_cw20_allowance_owner'
 *      ADO_cw20_cw20_allowance_spender: // value for 'ADO_cw20_cw20_allowance_spender'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20AllowanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20AllowanceDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllowanceQuery = useCodegenGeneratedAdoCw20AllowanceQuery;
function useCodegenGeneratedAdoCw20AllowanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20AllowanceDocument, options);
}
exports.useCodegenGeneratedAdoCw20AllowanceLazyQuery = useCodegenGeneratedAdoCw20AllowanceLazyQuery;
function refetchCodegenGeneratedAdoCw20AllowanceQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20AllowanceDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20AllowanceQuery = refetchCodegenGeneratedAdoCw20AllowanceQuery;
exports.CodegenGeneratedAdoCw20AndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_ANDR($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20AndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20AndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20AndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20AndrQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20AndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20AndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20AndrQuery = useCodegenGeneratedAdoCw20AndrQuery;
function useCodegenGeneratedAdoCw20AndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20AndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20AndrLazyQuery = useCodegenGeneratedAdoCw20AndrLazyQuery;
function refetchCodegenGeneratedAdoCw20AndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20AndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20AndrQuery = refetchCodegenGeneratedAdoCw20AndrQuery;
exports.CodegenGeneratedAdoCw20BalanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_BALANCE($ADO_cw20_address: String!, $ADO_cw20_cw20_balance_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      balance(address: $ADO_cw20_cw20_balance_address)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20BalanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20BalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20BalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20BalanceQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *      ADO_cw20_cw20_balance_address: // value for 'ADO_cw20_cw20_balance_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20BalanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20BalanceDocument, options);
}
exports.useCodegenGeneratedAdoCw20BalanceQuery = useCodegenGeneratedAdoCw20BalanceQuery;
function useCodegenGeneratedAdoCw20BalanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20BalanceDocument, options);
}
exports.useCodegenGeneratedAdoCw20BalanceLazyQuery = useCodegenGeneratedAdoCw20BalanceLazyQuery;
function refetchCodegenGeneratedAdoCw20BalanceQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20BalanceDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20BalanceQuery = refetchCodegenGeneratedAdoCw20BalanceQuery;
exports.CodegenGeneratedAdoCw20DownloadlogoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_DOWNLOADLOGO($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      downloadLogo {
        data
        mime_type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20DownloadlogoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20DownloadlogoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20DownloadlogoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20DownloadlogoQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20DownloadlogoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20DownloadlogoDocument, options);
}
exports.useCodegenGeneratedAdoCw20DownloadlogoQuery = useCodegenGeneratedAdoCw20DownloadlogoQuery;
function useCodegenGeneratedAdoCw20DownloadlogoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20DownloadlogoDocument, options);
}
exports.useCodegenGeneratedAdoCw20DownloadlogoLazyQuery = useCodegenGeneratedAdoCw20DownloadlogoLazyQuery;
function refetchCodegenGeneratedAdoCw20DownloadlogoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20DownloadlogoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20DownloadlogoQuery = refetchCodegenGeneratedAdoCw20DownloadlogoQuery;
exports.CodegenGeneratedAdoCw20MarketinginfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_MARKETINGINFO($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      marketingInfo {
        description
        logo
        marketing
        project
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20MarketinginfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20MarketinginfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20MarketinginfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20MarketinginfoQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20MarketinginfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20MarketinginfoDocument, options);
}
exports.useCodegenGeneratedAdoCw20MarketinginfoQuery = useCodegenGeneratedAdoCw20MarketinginfoQuery;
function useCodegenGeneratedAdoCw20MarketinginfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20MarketinginfoDocument, options);
}
exports.useCodegenGeneratedAdoCw20MarketinginfoLazyQuery = useCodegenGeneratedAdoCw20MarketinginfoLazyQuery;
function refetchCodegenGeneratedAdoCw20MarketinginfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20MarketinginfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20MarketinginfoQuery = refetchCodegenGeneratedAdoCw20MarketinginfoQuery;
exports.CodegenGeneratedAdoCw20MinterDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_MINTER($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      minter {
        cap
        minter
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20MinterQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20MinterQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20MinterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20MinterQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20MinterQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20MinterDocument, options);
}
exports.useCodegenGeneratedAdoCw20MinterQuery = useCodegenGeneratedAdoCw20MinterQuery;
function useCodegenGeneratedAdoCw20MinterLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20MinterDocument, options);
}
exports.useCodegenGeneratedAdoCw20MinterLazyQuery = useCodegenGeneratedAdoCw20MinterLazyQuery;
function refetchCodegenGeneratedAdoCw20MinterQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20MinterDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20MinterQuery = refetchCodegenGeneratedAdoCw20MinterQuery;
exports.CodegenGeneratedAdoCw20TokeninfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_TOKENINFO($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      tokenInfo {
        decimals
        name
        symbol
        total_supply
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20TokeninfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20TokeninfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20TokeninfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20TokeninfoQuery({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20TokeninfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20TokeninfoDocument, options);
}
exports.useCodegenGeneratedAdoCw20TokeninfoQuery = useCodegenGeneratedAdoCw20TokeninfoQuery;
function useCodegenGeneratedAdoCw20TokeninfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20TokeninfoDocument, options);
}
exports.useCodegenGeneratedAdoCw20TokeninfoLazyQuery = useCodegenGeneratedAdoCw20TokeninfoLazyQuery;
function refetchCodegenGeneratedAdoCw20TokeninfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20TokeninfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20TokeninfoQuery = refetchCodegenGeneratedAdoCw20TokeninfoQuery;
exports.CodegenGeneratedAdoCw20Document = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20($ADO_cw20_address: String!) {
  ADO {
    cw20(address: $ADO_cw20_address) {
      address
      chainId
      downloadLogo {
        data
        mime_type
      }
      marketingInfo {
        description
        logo
        marketing
        project
      }
      minter {
        cap
        minter
      }
      tokenInfo {
        decimals
        name
        symbol
        total_supply
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20Query__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20Query` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20Query({
 *   variables: {
 *      ADO_cw20_address: // value for 'ADO_cw20_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20Document, options);
}
exports.useCodegenGeneratedAdoCw20Query = useCodegenGeneratedAdoCw20Query;
function useCodegenGeneratedAdoCw20LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20Document, options);
}
exports.useCodegenGeneratedAdoCw20LazyQuery = useCodegenGeneratedAdoCw20LazyQuery;
function refetchCodegenGeneratedAdoCw20Query(variables) {
    return { query: exports.CodegenGeneratedAdoCw20Document, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20Query = refetchCodegenGeneratedAdoCw20Query;
exports.CodegenGeneratedAdoCw20ExchangeAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_EXCHANGE_ANDR($ADO_cw20_exchange_address: String!) {
  ADO {
    cw20_exchange(address: $ADO_cw20_exchange_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20ExchangeAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20ExchangeAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20ExchangeAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20ExchangeAndrQuery({
 *   variables: {
 *      ADO_cw20_exchange_address: // value for 'ADO_cw20_exchange_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20ExchangeAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20ExchangeAndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeAndrQuery = useCodegenGeneratedAdoCw20ExchangeAndrQuery;
function useCodegenGeneratedAdoCw20ExchangeAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20ExchangeAndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeAndrLazyQuery = useCodegenGeneratedAdoCw20ExchangeAndrLazyQuery;
function refetchCodegenGeneratedAdoCw20ExchangeAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20ExchangeAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20ExchangeAndrQuery = refetchCodegenGeneratedAdoCw20ExchangeAndrQuery;
exports.CodegenGeneratedAdoCw20ExchangeSaleDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_EXCHANGE_SALE($ADO_cw20_exchange_address: String!, $ADO_cw20_exchange_cw20_exchange_sale_cw20: String, $ADO_cw20_exchange_cw20_exchange_sale_native: String) {
  ADO {
    cw20_exchange(address: $ADO_cw20_exchange_address) {
      sale(
        cw20: $ADO_cw20_exchange_cw20_exchange_sale_cw20
        native: $ADO_cw20_exchange_cw20_exchange_sale_native
      ) {
        amount
        end_time
        exchange_rate
        recipient
        start_amount
        start_time
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20ExchangeSaleQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20ExchangeSaleQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20ExchangeSaleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20ExchangeSaleQuery({
 *   variables: {
 *      ADO_cw20_exchange_address: // value for 'ADO_cw20_exchange_address'
 *      ADO_cw20_exchange_cw20_exchange_sale_cw20: // value for 'ADO_cw20_exchange_cw20_exchange_sale_cw20'
 *      ADO_cw20_exchange_cw20_exchange_sale_native: // value for 'ADO_cw20_exchange_cw20_exchange_sale_native'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20ExchangeSaleQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20ExchangeSaleDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeSaleQuery = useCodegenGeneratedAdoCw20ExchangeSaleQuery;
function useCodegenGeneratedAdoCw20ExchangeSaleLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20ExchangeSaleDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeSaleLazyQuery = useCodegenGeneratedAdoCw20ExchangeSaleLazyQuery;
function refetchCodegenGeneratedAdoCw20ExchangeSaleQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20ExchangeSaleDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20ExchangeSaleQuery = refetchCodegenGeneratedAdoCw20ExchangeSaleQuery;
exports.CodegenGeneratedAdoCw20ExchangeSaleassetsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_EXCHANGE_SALEASSETS($ADO_cw20_exchange_address: String!, $ADO_cw20_exchange_cw20_exchange_saleAssets_options: AndrSearchOptions) {
  ADO {
    cw20_exchange(address: $ADO_cw20_exchange_address) {
      saleAssets(options: $ADO_cw20_exchange_cw20_exchange_saleAssets_options)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery({
 *   variables: {
 *      ADO_cw20_exchange_address: // value for 'ADO_cw20_exchange_address'
 *      ADO_cw20_exchange_cw20_exchange_saleAssets_options: // value for 'ADO_cw20_exchange_cw20_exchange_saleAssets_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20ExchangeSaleassetsDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery = useCodegenGeneratedAdoCw20ExchangeSaleassetsQuery;
function useCodegenGeneratedAdoCw20ExchangeSaleassetsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20ExchangeSaleassetsDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeSaleassetsLazyQuery = useCodegenGeneratedAdoCw20ExchangeSaleassetsLazyQuery;
function refetchCodegenGeneratedAdoCw20ExchangeSaleassetsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20ExchangeSaleassetsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20ExchangeSaleassetsQuery = refetchCodegenGeneratedAdoCw20ExchangeSaleassetsQuery;
exports.CodegenGeneratedAdoCw20ExchangeDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_EXCHANGE($ADO_cw20_exchange_address: String!) {
  ADO {
    cw20_exchange(address: $ADO_cw20_exchange_address) {
      address
      chainId
      tokenAddress
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20ExchangeQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20ExchangeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20ExchangeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20ExchangeQuery({
 *   variables: {
 *      ADO_cw20_exchange_address: // value for 'ADO_cw20_exchange_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20ExchangeQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20ExchangeDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeQuery = useCodegenGeneratedAdoCw20ExchangeQuery;
function useCodegenGeneratedAdoCw20ExchangeLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20ExchangeDocument, options);
}
exports.useCodegenGeneratedAdoCw20ExchangeLazyQuery = useCodegenGeneratedAdoCw20ExchangeLazyQuery;
function refetchCodegenGeneratedAdoCw20ExchangeQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20ExchangeDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20ExchangeQuery = refetchCodegenGeneratedAdoCw20ExchangeQuery;
exports.CodegenGeneratedAdoCw20StakingAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_ANDR($ADO_cw20_staking_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingAndrQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingAndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingAndrQuery = useCodegenGeneratedAdoCw20StakingAndrQuery;
function useCodegenGeneratedAdoCw20StakingAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingAndrDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingAndrLazyQuery = useCodegenGeneratedAdoCw20StakingAndrLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingAndrQuery = refetchCodegenGeneratedAdoCw20StakingAndrQuery;
exports.CodegenGeneratedAdoCw20StakingConfigStakingTokenDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_CONFIG_STAKING_TOKEN($ADO_cw20_staking_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      config {
        staking_token {
          identifier
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingConfigStakingTokenDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery = useCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery;
function useCodegenGeneratedAdoCw20StakingConfigStakingTokenLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingConfigStakingTokenDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingConfigStakingTokenLazyQuery = useCodegenGeneratedAdoCw20StakingConfigStakingTokenLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingConfigStakingTokenDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery = refetchCodegenGeneratedAdoCw20StakingConfigStakingTokenQuery;
exports.CodegenGeneratedAdoCw20StakingConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_CONFIG($ADO_cw20_staking_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      config {
        number_of_reward_tokens
        staking_token {
          identifier
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingConfigQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingConfigDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingConfigQuery = useCodegenGeneratedAdoCw20StakingConfigQuery;
function useCodegenGeneratedAdoCw20StakingConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingConfigDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingConfigLazyQuery = useCodegenGeneratedAdoCw20StakingConfigLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingConfigQuery = refetchCodegenGeneratedAdoCw20StakingConfigQuery;
exports.CodegenGeneratedAdoCw20StakingStakerDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_STAKER($ADO_cw20_staking_address: String!, $ADO_cw20_staking_cw20_staking_staker_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      staker(address: $ADO_cw20_staking_cw20_staking_staker_address) {
        address
        pending_rewards
        share
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingStakerQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingStakerQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingStakerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingStakerQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *      ADO_cw20_staking_cw20_staking_staker_address: // value for 'ADO_cw20_staking_cw20_staking_staker_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingStakerQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingStakerDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStakerQuery = useCodegenGeneratedAdoCw20StakingStakerQuery;
function useCodegenGeneratedAdoCw20StakingStakerLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingStakerDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStakerLazyQuery = useCodegenGeneratedAdoCw20StakingStakerLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingStakerQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingStakerDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingStakerQuery = refetchCodegenGeneratedAdoCw20StakingStakerQuery;
exports.CodegenGeneratedAdoCw20StakingStakersDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_STAKERS($ADO_cw20_staking_address: String!, $ADO_cw20_staking_cw20_staking_stakers_options: AndrSearchOptions) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      stakers(options: $ADO_cw20_staking_cw20_staking_stakers_options) {
        address
        pending_rewards
        share
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingStakersQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingStakersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingStakersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingStakersQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *      ADO_cw20_staking_cw20_staking_stakers_options: // value for 'ADO_cw20_staking_cw20_staking_stakers_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingStakersQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingStakersDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStakersQuery = useCodegenGeneratedAdoCw20StakingStakersQuery;
function useCodegenGeneratedAdoCw20StakingStakersLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingStakersDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStakersLazyQuery = useCodegenGeneratedAdoCw20StakingStakersLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingStakersQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingStakersDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingStakersQuery = refetchCodegenGeneratedAdoCw20StakingStakersQuery;
exports.CodegenGeneratedAdoCw20StakingStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING_STATE($ADO_cw20_staking_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      state {
        total_share
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingStateQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingStateDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStateQuery = useCodegenGeneratedAdoCw20StakingStateQuery;
function useCodegenGeneratedAdoCw20StakingStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingStateDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingStateLazyQuery = useCodegenGeneratedAdoCw20StakingStateLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingStateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingStateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingStateQuery = refetchCodegenGeneratedAdoCw20StakingStateQuery;
exports.CodegenGeneratedAdoCw20StakingDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW20_STAKING($ADO_cw20_staking_address: String!) {
  ADO {
    cw20_staking(address: $ADO_cw20_staking_address) {
      address
      chainId
      config {
        number_of_reward_tokens
        staking_token {
          identifier
        }
      }
      state {
        total_share
      }
      timestamp
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw20StakingQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw20StakingQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw20StakingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw20StakingQuery({
 *   variables: {
 *      ADO_cw20_staking_address: // value for 'ADO_cw20_staking_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw20StakingQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw20StakingDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingQuery = useCodegenGeneratedAdoCw20StakingQuery;
function useCodegenGeneratedAdoCw20StakingLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw20StakingDocument, options);
}
exports.useCodegenGeneratedAdoCw20StakingLazyQuery = useCodegenGeneratedAdoCw20StakingLazyQuery;
function refetchCodegenGeneratedAdoCw20StakingQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw20StakingDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw20StakingQuery = refetchCodegenGeneratedAdoCw20StakingQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoAccessApprovalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_ACCESS_APPROVALS($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        access {
          approvals {
            expires
            spender
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoAccessApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery = useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery;
function useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoAccessApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoAccessApprovalsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery = refetchCodegenGeneratedAdoCw721AllnftinfoAccessApprovalsQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoAccessDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_ACCESS($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        access {
          approvals {
            expires
            spender
          }
          owner
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoAccessQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoAccessQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoAccessQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoAccessQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoAccessQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoAccessDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoAccessQuery = useCodegenGeneratedAdoCw721AllnftinfoAccessQuery;
function useCodegenGeneratedAdoCw721AllnftinfoAccessLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoAccessDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoAccessLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoAccessLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoAccessQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoAccessDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoAccessQuery = refetchCodegenGeneratedAdoCw721AllnftinfoAccessQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoInfoExtensionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_INFO_EXTENSION($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        info {
          extension {
            publisher
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery;
function useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoExtensionLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoInfoExtensionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery = refetchCodegenGeneratedAdoCw721AllnftinfoInfoExtensionQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_INFO_METADATA_ATTRIBUTES($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        info {
          metadata {
            attributes {
              display_type
              trait_type
              value
            }
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery;
function useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery = refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataAttributesQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_INFO_METADATA($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        info {
          metadata {
            animation_url
            attributes {
              display_type
              trait_type
              value
            }
            background_color
            description
            external_url
            image
            image_data
            name
            youtube_url
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery;
function useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoMetadataLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoInfoMetadataDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery = refetchCodegenGeneratedAdoCw721AllnftinfoInfoMetadataQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoInfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO_INFO($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        info {
          extension {
            publisher
          }
          metadata {
            animation_url
            attributes {
              display_type
              trait_type
              value
            }
            background_color
            description
            external_url
            image
            image_data
            name
            youtube_url
          }
          tokenId
          token_uri
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoInfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoInfoQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoInfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoQuery;
function useCodegenGeneratedAdoCw721AllnftinfoInfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoInfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoInfoLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoInfoLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoInfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoInfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoInfoQuery = refetchCodegenGeneratedAdoCw721AllnftinfoInfoQuery;
exports.CodegenGeneratedAdoCw721AllnftinfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLNFTINFO($ADO_cw721_address: String!, $ADO_cw721_cw721_allNftInfo_includeExpired: Boolean!, $ADO_cw721_cw721_allNftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allNftInfo(
        includeExpired: $ADO_cw721_cw721_allNftInfo_includeExpired
        tokenId: $ADO_cw721_cw721_allNftInfo_tokenId
      ) {
        access {
          approvals {
            expires
            spender
          }
          owner
        }
        info {
          extension {
            publisher
          }
          metadata {
            animation_url
            attributes {
              display_type
              trait_type
              value
            }
            background_color
            description
            external_url
            image
            image_data
            name
            youtube_url
          }
          tokenId
          token_uri
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AllnftinfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AllnftinfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AllnftinfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AllnftinfoQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allNftInfo_includeExpired: // value for 'ADO_cw721_cw721_allNftInfo_includeExpired'
 *      ADO_cw721_cw721_allNftInfo_tokenId: // value for 'ADO_cw721_cw721_allNftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AllnftinfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AllnftinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoQuery = useCodegenGeneratedAdoCw721AllnftinfoQuery;
function useCodegenGeneratedAdoCw721AllnftinfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AllnftinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721AllnftinfoLazyQuery = useCodegenGeneratedAdoCw721AllnftinfoLazyQuery;
function refetchCodegenGeneratedAdoCw721AllnftinfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AllnftinfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AllnftinfoQuery = refetchCodegenGeneratedAdoCw721AllnftinfoQuery;
exports.CodegenGeneratedAdoCw721AlloperatorsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLOPERATORS($ADO_cw721_address: String!, $ADO_cw721_cw721_allOperators_includeExpired: Boolean!, $ADO_cw721_cw721_allOperators_options: AndrSearchOptions, $ADO_cw721_cw721_allOperators_owner: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allOperators(
        includeExpired: $ADO_cw721_cw721_allOperators_includeExpired
        options: $ADO_cw721_cw721_allOperators_options
        owner: $ADO_cw721_cw721_allOperators_owner
      ) {
        expires
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AlloperatorsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AlloperatorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AlloperatorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AlloperatorsQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allOperators_includeExpired: // value for 'ADO_cw721_cw721_allOperators_includeExpired'
 *      ADO_cw721_cw721_allOperators_options: // value for 'ADO_cw721_cw721_allOperators_options'
 *      ADO_cw721_cw721_allOperators_owner: // value for 'ADO_cw721_cw721_allOperators_owner'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AlloperatorsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AlloperatorsDocument, options);
}
exports.useCodegenGeneratedAdoCw721AlloperatorsQuery = useCodegenGeneratedAdoCw721AlloperatorsQuery;
function useCodegenGeneratedAdoCw721AlloperatorsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AlloperatorsDocument, options);
}
exports.useCodegenGeneratedAdoCw721AlloperatorsLazyQuery = useCodegenGeneratedAdoCw721AlloperatorsLazyQuery;
function refetchCodegenGeneratedAdoCw721AlloperatorsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AlloperatorsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AlloperatorsQuery = refetchCodegenGeneratedAdoCw721AlloperatorsQuery;
exports.CodegenGeneratedAdoCw721AlltokensDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ALLTOKENS($ADO_cw721_address: String!, $ADO_cw721_cw721_allTokens_options: AndrSearchOptions) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      allTokens(options: $ADO_cw721_cw721_allTokens_options)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AlltokensQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AlltokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AlltokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AlltokensQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_allTokens_options: // value for 'ADO_cw721_cw721_allTokens_options'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AlltokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AlltokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721AlltokensQuery = useCodegenGeneratedAdoCw721AlltokensQuery;
function useCodegenGeneratedAdoCw721AlltokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AlltokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721AlltokensLazyQuery = useCodegenGeneratedAdoCw721AlltokensLazyQuery;
function refetchCodegenGeneratedAdoCw721AlltokensQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AlltokensDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AlltokensQuery = refetchCodegenGeneratedAdoCw721AlltokensQuery;
exports.CodegenGeneratedAdoCw721AndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ANDR($ADO_cw721_address: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721AndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721AndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721AndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721AndrQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721AndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721AndrDocument, options);
}
exports.useCodegenGeneratedAdoCw721AndrQuery = useCodegenGeneratedAdoCw721AndrQuery;
function useCodegenGeneratedAdoCw721AndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721AndrDocument, options);
}
exports.useCodegenGeneratedAdoCw721AndrLazyQuery = useCodegenGeneratedAdoCw721AndrLazyQuery;
function refetchCodegenGeneratedAdoCw721AndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721AndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721AndrQuery = refetchCodegenGeneratedAdoCw721AndrQuery;
exports.CodegenGeneratedAdoCw721ApprovalDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_APPROVAL($ADO_cw721_address: String!, $ADO_cw721_cw721_approval_includeExpired: Boolean!, $ADO_cw721_cw721_approval_spender: String!, $ADO_cw721_cw721_approval_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      approval(
        includeExpired: $ADO_cw721_cw721_approval_includeExpired
        spender: $ADO_cw721_cw721_approval_spender
        tokenId: $ADO_cw721_cw721_approval_tokenId
      ) {
        expires
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721ApprovalQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721ApprovalQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721ApprovalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721ApprovalQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_approval_includeExpired: // value for 'ADO_cw721_cw721_approval_includeExpired'
 *      ADO_cw721_cw721_approval_spender: // value for 'ADO_cw721_cw721_approval_spender'
 *      ADO_cw721_cw721_approval_tokenId: // value for 'ADO_cw721_cw721_approval_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721ApprovalQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721ApprovalDocument, options);
}
exports.useCodegenGeneratedAdoCw721ApprovalQuery = useCodegenGeneratedAdoCw721ApprovalQuery;
function useCodegenGeneratedAdoCw721ApprovalLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721ApprovalDocument, options);
}
exports.useCodegenGeneratedAdoCw721ApprovalLazyQuery = useCodegenGeneratedAdoCw721ApprovalLazyQuery;
function refetchCodegenGeneratedAdoCw721ApprovalQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721ApprovalDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721ApprovalQuery = refetchCodegenGeneratedAdoCw721ApprovalQuery;
exports.CodegenGeneratedAdoCw721ApprovalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_APPROVALS($ADO_cw721_address: String!, $ADO_cw721_cw721_approvals_includeExpired: Boolean!, $ADO_cw721_cw721_approvals_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      approvals(
        includeExpired: $ADO_cw721_cw721_approvals_includeExpired
        tokenId: $ADO_cw721_cw721_approvals_tokenId
      ) {
        expires
        spender
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721ApprovalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721ApprovalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721ApprovalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721ApprovalsQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_approvals_includeExpired: // value for 'ADO_cw721_cw721_approvals_includeExpired'
 *      ADO_cw721_cw721_approvals_tokenId: // value for 'ADO_cw721_cw721_approvals_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721ApprovalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721ApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721ApprovalsQuery = useCodegenGeneratedAdoCw721ApprovalsQuery;
function useCodegenGeneratedAdoCw721ApprovalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721ApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721ApprovalsLazyQuery = useCodegenGeneratedAdoCw721ApprovalsLazyQuery;
function refetchCodegenGeneratedAdoCw721ApprovalsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721ApprovalsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721ApprovalsQuery = refetchCodegenGeneratedAdoCw721ApprovalsQuery;
exports.CodegenGeneratedAdoCw721ContractinfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_CONTRACTINFO($ADO_cw721_address: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      contractInfo {
        name
        symbol
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721ContractinfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721ContractinfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721ContractinfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721ContractinfoQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721ContractinfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721ContractinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721ContractinfoQuery = useCodegenGeneratedAdoCw721ContractinfoQuery;
function useCodegenGeneratedAdoCw721ContractinfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721ContractinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721ContractinfoLazyQuery = useCodegenGeneratedAdoCw721ContractinfoLazyQuery;
function refetchCodegenGeneratedAdoCw721ContractinfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721ContractinfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721ContractinfoQuery = refetchCodegenGeneratedAdoCw721ContractinfoQuery;
exports.CodegenGeneratedAdoCw721IsarchivedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_ISARCHIVED($ADO_cw721_address: String!, $ADO_cw721_cw721_isArchived_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      isArchived(tokenId: $ADO_cw721_cw721_isArchived_tokenId)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721IsarchivedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721IsarchivedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721IsarchivedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721IsarchivedQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_isArchived_tokenId: // value for 'ADO_cw721_cw721_isArchived_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721IsarchivedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721IsarchivedDocument, options);
}
exports.useCodegenGeneratedAdoCw721IsarchivedQuery = useCodegenGeneratedAdoCw721IsarchivedQuery;
function useCodegenGeneratedAdoCw721IsarchivedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721IsarchivedDocument, options);
}
exports.useCodegenGeneratedAdoCw721IsarchivedLazyQuery = useCodegenGeneratedAdoCw721IsarchivedLazyQuery;
function refetchCodegenGeneratedAdoCw721IsarchivedQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721IsarchivedDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721IsarchivedQuery = refetchCodegenGeneratedAdoCw721IsarchivedQuery;
exports.CodegenGeneratedAdoCw721NftinfoExtensionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_NFTINFO_EXTENSION($ADO_cw721_address: String!, $ADO_cw721_cw721_nftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      nftInfo(tokenId: $ADO_cw721_cw721_nftInfo_tokenId) {
        extension {
          publisher
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721NftinfoExtensionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721NftinfoExtensionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721NftinfoExtensionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721NftinfoExtensionQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_nftInfo_tokenId: // value for 'ADO_cw721_cw721_nftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721NftinfoExtensionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721NftinfoExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoExtensionQuery = useCodegenGeneratedAdoCw721NftinfoExtensionQuery;
function useCodegenGeneratedAdoCw721NftinfoExtensionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721NftinfoExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoExtensionLazyQuery = useCodegenGeneratedAdoCw721NftinfoExtensionLazyQuery;
function refetchCodegenGeneratedAdoCw721NftinfoExtensionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721NftinfoExtensionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721NftinfoExtensionQuery = refetchCodegenGeneratedAdoCw721NftinfoExtensionQuery;
exports.CodegenGeneratedAdoCw721NftinfoMetadataAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_NFTINFO_METADATA_ATTRIBUTES($ADO_cw721_address: String!, $ADO_cw721_cw721_nftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      nftInfo(tokenId: $ADO_cw721_cw721_nftInfo_tokenId) {
        metadata {
          attributes {
            display_type
            trait_type
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_nftInfo_tokenId: // value for 'ADO_cw721_cw721_nftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721NftinfoMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery = useCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery;
function useCodegenGeneratedAdoCw721NftinfoMetadataAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721NftinfoMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoMetadataAttributesLazyQuery = useCodegenGeneratedAdoCw721NftinfoMetadataAttributesLazyQuery;
function refetchCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721NftinfoMetadataAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery = refetchCodegenGeneratedAdoCw721NftinfoMetadataAttributesQuery;
exports.CodegenGeneratedAdoCw721NftinfoMetadataDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_NFTINFO_METADATA($ADO_cw721_address: String!, $ADO_cw721_cw721_nftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      nftInfo(tokenId: $ADO_cw721_cw721_nftInfo_tokenId) {
        metadata {
          animation_url
          attributes {
            display_type
            trait_type
            value
          }
          background_color
          description
          external_url
          image
          image_data
          name
          youtube_url
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721NftinfoMetadataQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721NftinfoMetadataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721NftinfoMetadataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721NftinfoMetadataQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_nftInfo_tokenId: // value for 'ADO_cw721_cw721_nftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721NftinfoMetadataQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721NftinfoMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoMetadataQuery = useCodegenGeneratedAdoCw721NftinfoMetadataQuery;
function useCodegenGeneratedAdoCw721NftinfoMetadataLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721NftinfoMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoMetadataLazyQuery = useCodegenGeneratedAdoCw721NftinfoMetadataLazyQuery;
function refetchCodegenGeneratedAdoCw721NftinfoMetadataQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721NftinfoMetadataDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721NftinfoMetadataQuery = refetchCodegenGeneratedAdoCw721NftinfoMetadataQuery;
exports.CodegenGeneratedAdoCw721NftinfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_NFTINFO($ADO_cw721_address: String!, $ADO_cw721_cw721_nftInfo_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      nftInfo(tokenId: $ADO_cw721_cw721_nftInfo_tokenId) {
        extension {
          publisher
        }
        metadata {
          animation_url
          attributes {
            display_type
            trait_type
            value
          }
          background_color
          description
          external_url
          image
          image_data
          name
          youtube_url
        }
        tokenId
        token_uri
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721NftinfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721NftinfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721NftinfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721NftinfoQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_nftInfo_tokenId: // value for 'ADO_cw721_cw721_nftInfo_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721NftinfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721NftinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoQuery = useCodegenGeneratedAdoCw721NftinfoQuery;
function useCodegenGeneratedAdoCw721NftinfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721NftinfoDocument, options);
}
exports.useCodegenGeneratedAdoCw721NftinfoLazyQuery = useCodegenGeneratedAdoCw721NftinfoLazyQuery;
function refetchCodegenGeneratedAdoCw721NftinfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721NftinfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721NftinfoQuery = refetchCodegenGeneratedAdoCw721NftinfoQuery;
exports.CodegenGeneratedAdoCw721NumownersDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_NUMOWNERS($ADO_cw721_address: String!, $ADO_cw721_cw721_numOwners_includeExpired: Boolean!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      numOwners(includeExpired: $ADO_cw721_cw721_numOwners_includeExpired)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721NumownersQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721NumownersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721NumownersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721NumownersQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_numOwners_includeExpired: // value for 'ADO_cw721_cw721_numOwners_includeExpired'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721NumownersQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721NumownersDocument, options);
}
exports.useCodegenGeneratedAdoCw721NumownersQuery = useCodegenGeneratedAdoCw721NumownersQuery;
function useCodegenGeneratedAdoCw721NumownersLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721NumownersDocument, options);
}
exports.useCodegenGeneratedAdoCw721NumownersLazyQuery = useCodegenGeneratedAdoCw721NumownersLazyQuery;
function refetchCodegenGeneratedAdoCw721NumownersQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721NumownersDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721NumownersQuery = refetchCodegenGeneratedAdoCw721NumownersQuery;
exports.CodegenGeneratedAdoCw721OwnerofApprovalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_OWNEROF_APPROVALS($ADO_cw721_address: String!, $ADO_cw721_cw721_ownerOf_includeExpired: Boolean!, $ADO_cw721_cw721_ownerOf_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      ownerOf(
        includeExpired: $ADO_cw721_cw721_ownerOf_includeExpired
        tokenId: $ADO_cw721_cw721_ownerOf_tokenId
      ) {
        approvals {
          expires
          spender
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721OwnerofApprovalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721OwnerofApprovalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721OwnerofApprovalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721OwnerofApprovalsQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_ownerOf_includeExpired: // value for 'ADO_cw721_cw721_ownerOf_includeExpired'
 *      ADO_cw721_cw721_ownerOf_tokenId: // value for 'ADO_cw721_cw721_ownerOf_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721OwnerofApprovalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721OwnerofApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721OwnerofApprovalsQuery = useCodegenGeneratedAdoCw721OwnerofApprovalsQuery;
function useCodegenGeneratedAdoCw721OwnerofApprovalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721OwnerofApprovalsDocument, options);
}
exports.useCodegenGeneratedAdoCw721OwnerofApprovalsLazyQuery = useCodegenGeneratedAdoCw721OwnerofApprovalsLazyQuery;
function refetchCodegenGeneratedAdoCw721OwnerofApprovalsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721OwnerofApprovalsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721OwnerofApprovalsQuery = refetchCodegenGeneratedAdoCw721OwnerofApprovalsQuery;
exports.CodegenGeneratedAdoCw721OwnerofDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_OWNEROF($ADO_cw721_address: String!, $ADO_cw721_cw721_ownerOf_includeExpired: Boolean!, $ADO_cw721_cw721_ownerOf_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      ownerOf(
        includeExpired: $ADO_cw721_cw721_ownerOf_includeExpired
        tokenId: $ADO_cw721_cw721_ownerOf_tokenId
      ) {
        approvals {
          expires
          spender
        }
        owner
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721OwnerofQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721OwnerofQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721OwnerofQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721OwnerofQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_ownerOf_includeExpired: // value for 'ADO_cw721_cw721_ownerOf_includeExpired'
 *      ADO_cw721_cw721_ownerOf_tokenId: // value for 'ADO_cw721_cw721_ownerOf_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721OwnerofQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721OwnerofDocument, options);
}
exports.useCodegenGeneratedAdoCw721OwnerofQuery = useCodegenGeneratedAdoCw721OwnerofQuery;
function useCodegenGeneratedAdoCw721OwnerofLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721OwnerofDocument, options);
}
exports.useCodegenGeneratedAdoCw721OwnerofLazyQuery = useCodegenGeneratedAdoCw721OwnerofLazyQuery;
function refetchCodegenGeneratedAdoCw721OwnerofQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721OwnerofDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721OwnerofQuery = refetchCodegenGeneratedAdoCw721OwnerofQuery;
exports.CodegenGeneratedAdoCw721SearchtokensExtensionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_SEARCHTOKENS_EXTENSION($ADO_cw721_address: String!, $ADO_cw721_cw721_searchTokens_attributes: [SearchAttribute!]) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      searchTokens(attributes: $ADO_cw721_cw721_searchTokens_attributes) {
        extension {
          publisher
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721SearchtokensExtensionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721SearchtokensExtensionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721SearchtokensExtensionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721SearchtokensExtensionQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_searchTokens_attributes: // value for 'ADO_cw721_cw721_searchTokens_attributes'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721SearchtokensExtensionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721SearchtokensExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensExtensionQuery = useCodegenGeneratedAdoCw721SearchtokensExtensionQuery;
function useCodegenGeneratedAdoCw721SearchtokensExtensionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721SearchtokensExtensionDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensExtensionLazyQuery = useCodegenGeneratedAdoCw721SearchtokensExtensionLazyQuery;
function refetchCodegenGeneratedAdoCw721SearchtokensExtensionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721SearchtokensExtensionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721SearchtokensExtensionQuery = refetchCodegenGeneratedAdoCw721SearchtokensExtensionQuery;
exports.CodegenGeneratedAdoCw721SearchtokensMetadataAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_SEARCHTOKENS_METADATA_ATTRIBUTES($ADO_cw721_address: String!, $ADO_cw721_cw721_searchTokens_attributes: [SearchAttribute!]) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      searchTokens(attributes: $ADO_cw721_cw721_searchTokens_attributes) {
        metadata {
          attributes {
            display_type
            trait_type
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_searchTokens_attributes: // value for 'ADO_cw721_cw721_searchTokens_attributes'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721SearchtokensMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery = useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery;
function useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721SearchtokensMetadataAttributesDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesLazyQuery = useCodegenGeneratedAdoCw721SearchtokensMetadataAttributesLazyQuery;
function refetchCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721SearchtokensMetadataAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery = refetchCodegenGeneratedAdoCw721SearchtokensMetadataAttributesQuery;
exports.CodegenGeneratedAdoCw721SearchtokensMetadataDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_SEARCHTOKENS_METADATA($ADO_cw721_address: String!, $ADO_cw721_cw721_searchTokens_attributes: [SearchAttribute!]) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      searchTokens(attributes: $ADO_cw721_cw721_searchTokens_attributes) {
        metadata {
          animation_url
          attributes {
            display_type
            trait_type
            value
          }
          background_color
          description
          external_url
          image
          image_data
          name
          youtube_url
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721SearchtokensMetadataQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721SearchtokensMetadataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721SearchtokensMetadataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721SearchtokensMetadataQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_searchTokens_attributes: // value for 'ADO_cw721_cw721_searchTokens_attributes'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721SearchtokensMetadataQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721SearchtokensMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensMetadataQuery = useCodegenGeneratedAdoCw721SearchtokensMetadataQuery;
function useCodegenGeneratedAdoCw721SearchtokensMetadataLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721SearchtokensMetadataDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensMetadataLazyQuery = useCodegenGeneratedAdoCw721SearchtokensMetadataLazyQuery;
function refetchCodegenGeneratedAdoCw721SearchtokensMetadataQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721SearchtokensMetadataDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721SearchtokensMetadataQuery = refetchCodegenGeneratedAdoCw721SearchtokensMetadataQuery;
exports.CodegenGeneratedAdoCw721SearchtokensDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_SEARCHTOKENS($ADO_cw721_address: String!, $ADO_cw721_cw721_searchTokens_attributes: [SearchAttribute!]) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      searchTokens(attributes: $ADO_cw721_cw721_searchTokens_attributes) {
        extension {
          publisher
        }
        metadata {
          animation_url
          attributes {
            display_type
            trait_type
            value
          }
          background_color
          description
          external_url
          image
          image_data
          name
          youtube_url
        }
        tokenId
        token_uri
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721SearchtokensQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721SearchtokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721SearchtokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721SearchtokensQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_searchTokens_attributes: // value for 'ADO_cw721_cw721_searchTokens_attributes'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721SearchtokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721SearchtokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensQuery = useCodegenGeneratedAdoCw721SearchtokensQuery;
function useCodegenGeneratedAdoCw721SearchtokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721SearchtokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721SearchtokensLazyQuery = useCodegenGeneratedAdoCw721SearchtokensLazyQuery;
function refetchCodegenGeneratedAdoCw721SearchtokensQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721SearchtokensDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721SearchtokensQuery = refetchCodegenGeneratedAdoCw721SearchtokensQuery;
exports.CodegenGeneratedAdoCw721TokensDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_TOKENS($ADO_cw721_address: String!, $ADO_cw721_cw721_tokens_options: AndrSearchOptions, $ADO_cw721_cw721_tokens_owner: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      tokens(
        options: $ADO_cw721_cw721_tokens_options
        owner: $ADO_cw721_cw721_tokens_owner
      )
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721TokensQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721TokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721TokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721TokensQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_tokens_options: // value for 'ADO_cw721_cw721_tokens_options'
 *      ADO_cw721_cw721_tokens_owner: // value for 'ADO_cw721_cw721_tokens_owner'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721TokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721TokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721TokensQuery = useCodegenGeneratedAdoCw721TokensQuery;
function useCodegenGeneratedAdoCw721TokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721TokensDocument, options);
}
exports.useCodegenGeneratedAdoCw721TokensLazyQuery = useCodegenGeneratedAdoCw721TokensLazyQuery;
function refetchCodegenGeneratedAdoCw721TokensQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721TokensDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721TokensQuery = refetchCodegenGeneratedAdoCw721TokensQuery;
exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountRawDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_TRANSFERAGREEMENT_AGREEMENT_AMOUNT_RAW($ADO_cw721_address: String!, $ADO_cw721_cw721_transferAgreement_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      transferAgreement(tokenId: $ADO_cw721_cw721_transferAgreement_tokenId) {
        agreement {
          amount {
            raw {
              amount
              denom
            }
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_transferAgreement_tokenId: // value for 'ADO_cw721_cw721_transferAgreement_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountRawDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery;
function useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountRawDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawLazyQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawLazyQuery;
function refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountRawDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery = refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountRawQuery;
exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_TRANSFERAGREEMENT_AGREEMENT_AMOUNT($ADO_cw721_address: String!, $ADO_cw721_cw721_transferAgreement_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      transferAgreement(tokenId: $ADO_cw721_cw721_transferAgreement_tokenId) {
        agreement {
          amount {
            raw {
              amount
              denom
            }
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_transferAgreement_tokenId: // value for 'ADO_cw721_cw721_transferAgreement_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery;
function useCodegenGeneratedAdoCw721TransferagreementAgreementAmountLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementAmountLazyQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementAmountLazyQuery;
function refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721TransferagreementAgreementAmountDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery = refetchCodegenGeneratedAdoCw721TransferagreementAgreementAmountQuery;
exports.CodegenGeneratedAdoCw721TransferagreementAgreementDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_TRANSFERAGREEMENT_AGREEMENT($ADO_cw721_address: String!, $ADO_cw721_cw721_transferAgreement_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      transferAgreement(tokenId: $ADO_cw721_cw721_transferAgreement_tokenId) {
        agreement {
          amount {
            raw {
              amount
              denom
            }
          }
          purchaser
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721TransferagreementAgreementQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721TransferagreementAgreementQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721TransferagreementAgreementQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721TransferagreementAgreementQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_transferAgreement_tokenId: // value for 'ADO_cw721_cw721_transferAgreement_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721TransferagreementAgreementQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementQuery;
function useCodegenGeneratedAdoCw721TransferagreementAgreementLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721TransferagreementAgreementDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementAgreementLazyQuery = useCodegenGeneratedAdoCw721TransferagreementAgreementLazyQuery;
function refetchCodegenGeneratedAdoCw721TransferagreementAgreementQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721TransferagreementAgreementDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721TransferagreementAgreementQuery = refetchCodegenGeneratedAdoCw721TransferagreementAgreementQuery;
exports.CodegenGeneratedAdoCw721TransferagreementDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721_TRANSFERAGREEMENT($ADO_cw721_address: String!, $ADO_cw721_cw721_transferAgreement_tokenId: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      transferAgreement(tokenId: $ADO_cw721_cw721_transferAgreement_tokenId) {
        agreement {
          amount {
            raw {
              amount
              denom
            }
          }
          purchaser
        }
        tokenId
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721TransferagreementQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721TransferagreementQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721TransferagreementQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721TransferagreementQuery({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *      ADO_cw721_cw721_transferAgreement_tokenId: // value for 'ADO_cw721_cw721_transferAgreement_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721TransferagreementQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721TransferagreementDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementQuery = useCodegenGeneratedAdoCw721TransferagreementQuery;
function useCodegenGeneratedAdoCw721TransferagreementLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721TransferagreementDocument, options);
}
exports.useCodegenGeneratedAdoCw721TransferagreementLazyQuery = useCodegenGeneratedAdoCw721TransferagreementLazyQuery;
function refetchCodegenGeneratedAdoCw721TransferagreementQuery(variables) {
    return { query: exports.CodegenGeneratedAdoCw721TransferagreementDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721TransferagreementQuery = refetchCodegenGeneratedAdoCw721TransferagreementQuery;
exports.CodegenGeneratedAdoCw721Document = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_CW721($ADO_cw721_address: String!) {
  ADO {
    cw721(address: $ADO_cw721_address) {
      address
      chainId
      contractInfo {
        name
        symbol
      }
      minter
      numTokens
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoCw721Query__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoCw721Query` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoCw721Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoCw721Query({
 *   variables: {
 *      ADO_cw721_address: // value for 'ADO_cw721_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoCw721Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoCw721Document, options);
}
exports.useCodegenGeneratedAdoCw721Query = useCodegenGeneratedAdoCw721Query;
function useCodegenGeneratedAdoCw721LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoCw721Document, options);
}
exports.useCodegenGeneratedAdoCw721LazyQuery = useCodegenGeneratedAdoCw721LazyQuery;
function refetchCodegenGeneratedAdoCw721Query(variables) {
    return { query: exports.CodegenGeneratedAdoCw721Document, variables: variables };
}
exports.refetchCodegenGeneratedAdoCw721Query = refetchCodegenGeneratedAdoCw721Query;
exports.CodegenGeneratedAdoFactoryAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_FACTORY_ANDR($ADO_factory_address: String!) {
  ADO {
    factory(address: $ADO_factory_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoFactoryAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoFactoryAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoFactoryAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoFactoryAndrQuery({
 *   variables: {
 *      ADO_factory_address: // value for 'ADO_factory_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoFactoryAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoFactoryAndrDocument, options);
}
exports.useCodegenGeneratedAdoFactoryAndrQuery = useCodegenGeneratedAdoFactoryAndrQuery;
function useCodegenGeneratedAdoFactoryAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoFactoryAndrDocument, options);
}
exports.useCodegenGeneratedAdoFactoryAndrLazyQuery = useCodegenGeneratedAdoFactoryAndrLazyQuery;
function refetchCodegenGeneratedAdoFactoryAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoFactoryAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoFactoryAndrQuery = refetchCodegenGeneratedAdoFactoryAndrQuery;
exports.CodegenGeneratedAdoFactoryCodeIdDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_FACTORY_CODE_ID($ADO_factory_address: String!, $ADO_factory_factory_code_id_key: String!) {
  ADO {
    factory(address: $ADO_factory_address) {
      code_id(key: $ADO_factory_factory_code_id_key)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoFactoryCodeIdQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoFactoryCodeIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoFactoryCodeIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoFactoryCodeIdQuery({
 *   variables: {
 *      ADO_factory_address: // value for 'ADO_factory_address'
 *      ADO_factory_factory_code_id_key: // value for 'ADO_factory_factory_code_id_key'
 *   },
 * });
 */
function useCodegenGeneratedAdoFactoryCodeIdQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoFactoryCodeIdDocument, options);
}
exports.useCodegenGeneratedAdoFactoryCodeIdQuery = useCodegenGeneratedAdoFactoryCodeIdQuery;
function useCodegenGeneratedAdoFactoryCodeIdLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoFactoryCodeIdDocument, options);
}
exports.useCodegenGeneratedAdoFactoryCodeIdLazyQuery = useCodegenGeneratedAdoFactoryCodeIdLazyQuery;
function refetchCodegenGeneratedAdoFactoryCodeIdQuery(variables) {
    return { query: exports.CodegenGeneratedAdoFactoryCodeIdDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoFactoryCodeIdQuery = refetchCodegenGeneratedAdoFactoryCodeIdQuery;
exports.CodegenGeneratedAdoFactoryDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_FACTORY($ADO_factory_address: String!) {
  ADO {
    factory(address: $ADO_factory_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoFactoryQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoFactoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoFactoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoFactoryQuery({
 *   variables: {
 *      ADO_factory_address: // value for 'ADO_factory_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoFactoryQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoFactoryDocument, options);
}
exports.useCodegenGeneratedAdoFactoryQuery = useCodegenGeneratedAdoFactoryQuery;
function useCodegenGeneratedAdoFactoryLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoFactoryDocument, options);
}
exports.useCodegenGeneratedAdoFactoryLazyQuery = useCodegenGeneratedAdoFactoryLazyQuery;
function refetchCodegenGeneratedAdoFactoryQuery(variables) {
    return { query: exports.CodegenGeneratedAdoFactoryDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoFactoryQuery = refetchCodegenGeneratedAdoFactoryQuery;
exports.CodegenGeneratedAdoLockdropAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP_ANDR($ADO_lockdrop_address: String!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropAndrQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropAndrDocument, options);
}
exports.useCodegenGeneratedAdoLockdropAndrQuery = useCodegenGeneratedAdoLockdropAndrQuery;
function useCodegenGeneratedAdoLockdropAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropAndrDocument, options);
}
exports.useCodegenGeneratedAdoLockdropAndrLazyQuery = useCodegenGeneratedAdoLockdropAndrLazyQuery;
function refetchCodegenGeneratedAdoLockdropAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropAndrQuery = refetchCodegenGeneratedAdoLockdropAndrQuery;
exports.CodegenGeneratedAdoLockdropConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP_CONFIG($ADO_lockdrop_address: String!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      config {
        deposit_window
        incentive_token
        init_timestamp
        lockdrop_incentives
        native_denom
        withdrawal_window
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropConfigQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropConfigDocument, options);
}
exports.useCodegenGeneratedAdoLockdropConfigQuery = useCodegenGeneratedAdoLockdropConfigQuery;
function useCodegenGeneratedAdoLockdropConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropConfigDocument, options);
}
exports.useCodegenGeneratedAdoLockdropConfigLazyQuery = useCodegenGeneratedAdoLockdropConfigLazyQuery;
function refetchCodegenGeneratedAdoLockdropConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropConfigQuery = refetchCodegenGeneratedAdoLockdropConfigQuery;
exports.CodegenGeneratedAdoLockdropStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP_STATE($ADO_lockdrop_address: String!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      state {
        are_claims_allowed
        total_native_locked
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropStateQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropStateDocument, options);
}
exports.useCodegenGeneratedAdoLockdropStateQuery = useCodegenGeneratedAdoLockdropStateQuery;
function useCodegenGeneratedAdoLockdropStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropStateDocument, options);
}
exports.useCodegenGeneratedAdoLockdropStateLazyQuery = useCodegenGeneratedAdoLockdropStateLazyQuery;
function refetchCodegenGeneratedAdoLockdropStateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropStateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropStateQuery = refetchCodegenGeneratedAdoLockdropStateQuery;
exports.CodegenGeneratedAdoLockdropUserinfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP_USERINFO($ADO_lockdrop_address: String!, $ADO_lockdrop_lockdrop_userInfo_user: String!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      userInfo(user: $ADO_lockdrop_lockdrop_userInfo_user) {
        is_lockdrop_claimed
        total_incentives
        total_native_locked
        withrawal_flag
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropUserinfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropUserinfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropUserinfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropUserinfoQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *      ADO_lockdrop_lockdrop_userInfo_user: // value for 'ADO_lockdrop_lockdrop_userInfo_user'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropUserinfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropUserinfoDocument, options);
}
exports.useCodegenGeneratedAdoLockdropUserinfoQuery = useCodegenGeneratedAdoLockdropUserinfoQuery;
function useCodegenGeneratedAdoLockdropUserinfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropUserinfoDocument, options);
}
exports.useCodegenGeneratedAdoLockdropUserinfoLazyQuery = useCodegenGeneratedAdoLockdropUserinfoLazyQuery;
function refetchCodegenGeneratedAdoLockdropUserinfoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropUserinfoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropUserinfoQuery = refetchCodegenGeneratedAdoLockdropUserinfoQuery;
exports.CodegenGeneratedAdoLockdropWithdrawalpercentallowedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP_WITHDRAWALPERCENTALLOWED($ADO_lockdrop_address: String!, $ADO_lockdrop_lockdrop_withdrawalPercentAllowed_timestamp: Float!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      withdrawalPercentAllowed(
        timestamp: $ADO_lockdrop_lockdrop_withdrawalPercentAllowed_timestamp
      )
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *      ADO_lockdrop_lockdrop_withdrawalPercentAllowed_timestamp: // value for 'ADO_lockdrop_lockdrop_withdrawalPercentAllowed_timestamp'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropWithdrawalpercentallowedDocument, options);
}
exports.useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery = useCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery;
function useCodegenGeneratedAdoLockdropWithdrawalpercentallowedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropWithdrawalpercentallowedDocument, options);
}
exports.useCodegenGeneratedAdoLockdropWithdrawalpercentallowedLazyQuery = useCodegenGeneratedAdoLockdropWithdrawalpercentallowedLazyQuery;
function refetchCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropWithdrawalpercentallowedDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery = refetchCodegenGeneratedAdoLockdropWithdrawalpercentallowedQuery;
exports.CodegenGeneratedAdoLockdropDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_LOCKDROP($ADO_lockdrop_address: String!) {
  ADO {
    lockdrop(address: $ADO_lockdrop_address) {
      address
      chainId
      config {
        deposit_window
        incentive_token
        init_timestamp
        lockdrop_incentives
        native_denom
        withdrawal_window
      }
      state {
        are_claims_allowed
        total_native_locked
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoLockdropQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoLockdropQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoLockdropQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoLockdropQuery({
 *   variables: {
 *      ADO_lockdrop_address: // value for 'ADO_lockdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoLockdropQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoLockdropDocument, options);
}
exports.useCodegenGeneratedAdoLockdropQuery = useCodegenGeneratedAdoLockdropQuery;
function useCodegenGeneratedAdoLockdropLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoLockdropDocument, options);
}
exports.useCodegenGeneratedAdoLockdropLazyQuery = useCodegenGeneratedAdoLockdropLazyQuery;
function refetchCodegenGeneratedAdoLockdropQuery(variables) {
    return { query: exports.CodegenGeneratedAdoLockdropDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoLockdropQuery = refetchCodegenGeneratedAdoLockdropQuery;
exports.CodegenGeneratedAdoMarketplaceAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE_ANDR($ADO_marketplace_address: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceAndrQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceAndrDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceAndrQuery = useCodegenGeneratedAdoMarketplaceAndrQuery;
function useCodegenGeneratedAdoMarketplaceAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceAndrDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceAndrLazyQuery = useCodegenGeneratedAdoMarketplaceAndrLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceAndrQuery = refetchCodegenGeneratedAdoMarketplaceAndrQuery;
exports.CodegenGeneratedAdoMarketplaceLatestsalestateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE_LATESTSALESTATE($ADO_marketplace_address: String!, $ADO_marketplace_marketplace_latestSaleState_tokenAddress: String!, $ADO_marketplace_marketplace_latestSaleState_tokenId: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      latestSaleState(
        tokenAddress: $ADO_marketplace_marketplace_latestSaleState_tokenAddress
        tokenId: $ADO_marketplace_marketplace_latestSaleState_tokenId
      ) {
        coin_denom
        price
        sale_id
        status
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceLatestsalestateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceLatestsalestateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceLatestsalestateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceLatestsalestateQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *      ADO_marketplace_marketplace_latestSaleState_tokenAddress: // value for 'ADO_marketplace_marketplace_latestSaleState_tokenAddress'
 *      ADO_marketplace_marketplace_latestSaleState_tokenId: // value for 'ADO_marketplace_marketplace_latestSaleState_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceLatestsalestateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceLatestsalestateDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceLatestsalestateQuery = useCodegenGeneratedAdoMarketplaceLatestsalestateQuery;
function useCodegenGeneratedAdoMarketplaceLatestsalestateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceLatestsalestateDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceLatestsalestateLazyQuery = useCodegenGeneratedAdoMarketplaceLatestsalestateLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceLatestsalestateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceLatestsalestateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceLatestsalestateQuery = refetchCodegenGeneratedAdoMarketplaceLatestsalestateQuery;
exports.CodegenGeneratedAdoMarketplaceSaleidsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE_SALEIDS($ADO_marketplace_address: String!, $ADO_marketplace_marketplace_saleIds_tokenAddress: String!, $ADO_marketplace_marketplace_saleIds_tokenId: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      saleIds(
        tokenAddress: $ADO_marketplace_marketplace_saleIds_tokenAddress
        tokenId: $ADO_marketplace_marketplace_saleIds_tokenId
      ) {
        sale_ids
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceSaleidsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceSaleidsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceSaleidsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceSaleidsQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *      ADO_marketplace_marketplace_saleIds_tokenAddress: // value for 'ADO_marketplace_marketplace_saleIds_tokenAddress'
 *      ADO_marketplace_marketplace_saleIds_tokenId: // value for 'ADO_marketplace_marketplace_saleIds_tokenId'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceSaleidsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceSaleidsDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSaleidsQuery = useCodegenGeneratedAdoMarketplaceSaleidsQuery;
function useCodegenGeneratedAdoMarketplaceSaleidsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceSaleidsDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSaleidsLazyQuery = useCodegenGeneratedAdoMarketplaceSaleidsLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceSaleidsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceSaleidsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceSaleidsQuery = refetchCodegenGeneratedAdoMarketplaceSaleidsQuery;
exports.CodegenGeneratedAdoMarketplaceSaleinfosforaddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE_SALEINFOSFORADDRESS($ADO_marketplace_address: String!, $ADO_marketplace_marketplace_saleInfosForAddress_options: AndrSearchOptions, $ADO_marketplace_marketplace_saleInfosForAddress_tokenAddress: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      saleInfosForAddress(
        options: $ADO_marketplace_marketplace_saleInfosForAddress_options
        tokenAddress: $ADO_marketplace_marketplace_saleInfosForAddress_tokenAddress
      ) {
        sale_ids
        token_address
        token_id
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *      ADO_marketplace_marketplace_saleInfosForAddress_options: // value for 'ADO_marketplace_marketplace_saleInfosForAddress_options'
 *      ADO_marketplace_marketplace_saleInfosForAddress_tokenAddress: // value for 'ADO_marketplace_marketplace_saleInfosForAddress_tokenAddress'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceSaleinfosforaddressDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery = useCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery;
function useCodegenGeneratedAdoMarketplaceSaleinfosforaddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceSaleinfosforaddressDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSaleinfosforaddressLazyQuery = useCodegenGeneratedAdoMarketplaceSaleinfosforaddressLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceSaleinfosforaddressDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery = refetchCodegenGeneratedAdoMarketplaceSaleinfosforaddressQuery;
exports.CodegenGeneratedAdoMarketplaceSalestateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE_SALESTATE($ADO_marketplace_address: String!, $ADO_marketplace_marketplace_saleState_saleId: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      saleState(saleId: $ADO_marketplace_marketplace_saleState_saleId) {
        coin_denom
        price
        sale_id
        status
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceSalestateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceSalestateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceSalestateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceSalestateQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *      ADO_marketplace_marketplace_saleState_saleId: // value for 'ADO_marketplace_marketplace_saleState_saleId'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceSalestateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceSalestateDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSalestateQuery = useCodegenGeneratedAdoMarketplaceSalestateQuery;
function useCodegenGeneratedAdoMarketplaceSalestateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceSalestateDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceSalestateLazyQuery = useCodegenGeneratedAdoMarketplaceSalestateLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceSalestateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceSalestateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceSalestateQuery = refetchCodegenGeneratedAdoMarketplaceSalestateQuery;
exports.CodegenGeneratedAdoMarketplaceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MARKETPLACE($ADO_marketplace_address: String!) {
  ADO {
    marketplace(address: $ADO_marketplace_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMarketplaceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMarketplaceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMarketplaceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMarketplaceQuery({
 *   variables: {
 *      ADO_marketplace_address: // value for 'ADO_marketplace_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoMarketplaceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMarketplaceDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceQuery = useCodegenGeneratedAdoMarketplaceQuery;
function useCodegenGeneratedAdoMarketplaceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMarketplaceDocument, options);
}
exports.useCodegenGeneratedAdoMarketplaceLazyQuery = useCodegenGeneratedAdoMarketplaceLazyQuery;
function refetchCodegenGeneratedAdoMarketplaceQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMarketplaceDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMarketplaceQuery = refetchCodegenGeneratedAdoMarketplaceQuery;
exports.CodegenGeneratedAdoMerkleAirdropAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP_ANDR($ADO_merkle_airdrop_address: String!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropAndrQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropAndrDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropAndrQuery = useCodegenGeneratedAdoMerkleAirdropAndrQuery;
function useCodegenGeneratedAdoMerkleAirdropAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropAndrDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropAndrLazyQuery = useCodegenGeneratedAdoMerkleAirdropAndrLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropAndrQuery = refetchCodegenGeneratedAdoMerkleAirdropAndrQuery;
exports.CodegenGeneratedAdoMerkleAirdropConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP_CONFIG($ADO_merkle_airdrop_address: String!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      config {
        asset_info
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropConfigQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropConfigDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropConfigQuery = useCodegenGeneratedAdoMerkleAirdropConfigQuery;
function useCodegenGeneratedAdoMerkleAirdropConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropConfigDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropConfigLazyQuery = useCodegenGeneratedAdoMerkleAirdropConfigLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropConfigQuery = refetchCodegenGeneratedAdoMerkleAirdropConfigQuery;
exports.CodegenGeneratedAdoMerkleAirdropIsclaimedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP_ISCLAIMED($ADO_merkle_airdrop_address: String!, $ADO_merkle_airdrop_merkle_airdrop_isClaimed_address: String!, $ADO_merkle_airdrop_merkle_airdrop_isClaimed_stage: Float!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      isClaimed(
        address: $ADO_merkle_airdrop_merkle_airdrop_isClaimed_address
        stage: $ADO_merkle_airdrop_merkle_airdrop_isClaimed_stage
      )
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *      ADO_merkle_airdrop_merkle_airdrop_isClaimed_address: // value for 'ADO_merkle_airdrop_merkle_airdrop_isClaimed_address'
 *      ADO_merkle_airdrop_merkle_airdrop_isClaimed_stage: // value for 'ADO_merkle_airdrop_merkle_airdrop_isClaimed_stage'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropIsclaimedDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery = useCodegenGeneratedAdoMerkleAirdropIsclaimedQuery;
function useCodegenGeneratedAdoMerkleAirdropIsclaimedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropIsclaimedDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropIsclaimedLazyQuery = useCodegenGeneratedAdoMerkleAirdropIsclaimedLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropIsclaimedQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropIsclaimedDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropIsclaimedQuery = refetchCodegenGeneratedAdoMerkleAirdropIsclaimedQuery;
exports.CodegenGeneratedAdoMerkleAirdropMerklerootDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP_MERKLEROOT($ADO_merkle_airdrop_address: String!, $ADO_merkle_airdrop_merkle_airdrop_merkleRoot_stage: Float!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      merkleRoot(stage: $ADO_merkle_airdrop_merkle_airdrop_merkleRoot_stage) {
        expiration
        merkle_root
        stage
        total_amount
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropMerklerootQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropMerklerootQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropMerklerootQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropMerklerootQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *      ADO_merkle_airdrop_merkle_airdrop_merkleRoot_stage: // value for 'ADO_merkle_airdrop_merkle_airdrop_merkleRoot_stage'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropMerklerootQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropMerklerootDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropMerklerootQuery = useCodegenGeneratedAdoMerkleAirdropMerklerootQuery;
function useCodegenGeneratedAdoMerkleAirdropMerklerootLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropMerklerootDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropMerklerootLazyQuery = useCodegenGeneratedAdoMerkleAirdropMerklerootLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropMerklerootQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropMerklerootDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropMerklerootQuery = refetchCodegenGeneratedAdoMerkleAirdropMerklerootQuery;
exports.CodegenGeneratedAdoMerkleAirdropTotalclaimedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP_TOTALCLAIMED($ADO_merkle_airdrop_address: String!, $ADO_merkle_airdrop_merkle_airdrop_totalClaimed_stage: Float!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      totalClaimed(stage: $ADO_merkle_airdrop_merkle_airdrop_totalClaimed_stage)
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *      ADO_merkle_airdrop_merkle_airdrop_totalClaimed_stage: // value for 'ADO_merkle_airdrop_merkle_airdrop_totalClaimed_stage'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropTotalclaimedDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery = useCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery;
function useCodegenGeneratedAdoMerkleAirdropTotalclaimedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropTotalclaimedDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropTotalclaimedLazyQuery = useCodegenGeneratedAdoMerkleAirdropTotalclaimedLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropTotalclaimedDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery = refetchCodegenGeneratedAdoMerkleAirdropTotalclaimedQuery;
exports.CodegenGeneratedAdoMerkleAirdropDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_MERKLE_AIRDROP($ADO_merkle_airdrop_address: String!) {
  ADO {
    merkle_airdrop(address: $ADO_merkle_airdrop_address) {
      address
      chainId
      config {
        asset_info
      }
      latestStage
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoMerkleAirdropQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoMerkleAirdropQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoMerkleAirdropQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoMerkleAirdropQuery({
 *   variables: {
 *      ADO_merkle_airdrop_address: // value for 'ADO_merkle_airdrop_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoMerkleAirdropQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoMerkleAirdropDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropQuery = useCodegenGeneratedAdoMerkleAirdropQuery;
function useCodegenGeneratedAdoMerkleAirdropLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoMerkleAirdropDocument, options);
}
exports.useCodegenGeneratedAdoMerkleAirdropLazyQuery = useCodegenGeneratedAdoMerkleAirdropLazyQuery;
function refetchCodegenGeneratedAdoMerkleAirdropQuery(variables) {
    return { query: exports.CodegenGeneratedAdoMerkleAirdropDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoMerkleAirdropQuery = refetchCodegenGeneratedAdoMerkleAirdropQuery;
exports.CodegenGeneratedAdoPrimitiveAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_PRIMITIVE_ANDR($ADO_primitive_address: String!) {
  ADO {
    primitive(address: $ADO_primitive_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoPrimitiveAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoPrimitiveAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoPrimitiveAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoPrimitiveAndrQuery({
 *   variables: {
 *      ADO_primitive_address: // value for 'ADO_primitive_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoPrimitiveAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoPrimitiveAndrDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveAndrQuery = useCodegenGeneratedAdoPrimitiveAndrQuery;
function useCodegenGeneratedAdoPrimitiveAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoPrimitiveAndrDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveAndrLazyQuery = useCodegenGeneratedAdoPrimitiveAndrLazyQuery;
function refetchCodegenGeneratedAdoPrimitiveAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoPrimitiveAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoPrimitiveAndrQuery = refetchCodegenGeneratedAdoPrimitiveAndrQuery;
exports.CodegenGeneratedAdoPrimitiveGetvalueDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_PRIMITIVE_GETVALUE($ADO_primitive_address: String!, $ADO_primitive_primitive_getValue_key: String!) {
  ADO {
    primitive(address: $ADO_primitive_address) {
      getValue(key: $ADO_primitive_primitive_getValue_key) {
        key
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoPrimitiveGetvalueQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoPrimitiveGetvalueQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoPrimitiveGetvalueQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoPrimitiveGetvalueQuery({
 *   variables: {
 *      ADO_primitive_address: // value for 'ADO_primitive_address'
 *      ADO_primitive_primitive_getValue_key: // value for 'ADO_primitive_primitive_getValue_key'
 *   },
 * });
 */
function useCodegenGeneratedAdoPrimitiveGetvalueQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoPrimitiveGetvalueDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveGetvalueQuery = useCodegenGeneratedAdoPrimitiveGetvalueQuery;
function useCodegenGeneratedAdoPrimitiveGetvalueLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoPrimitiveGetvalueDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveGetvalueLazyQuery = useCodegenGeneratedAdoPrimitiveGetvalueLazyQuery;
function refetchCodegenGeneratedAdoPrimitiveGetvalueQuery(variables) {
    return { query: exports.CodegenGeneratedAdoPrimitiveGetvalueDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoPrimitiveGetvalueQuery = refetchCodegenGeneratedAdoPrimitiveGetvalueQuery;
exports.CodegenGeneratedAdoPrimitiveDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_PRIMITIVE($ADO_primitive_address: String!) {
  ADO {
    primitive(address: $ADO_primitive_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoPrimitiveQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoPrimitiveQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoPrimitiveQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoPrimitiveQuery({
 *   variables: {
 *      ADO_primitive_address: // value for 'ADO_primitive_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoPrimitiveQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoPrimitiveDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveQuery = useCodegenGeneratedAdoPrimitiveQuery;
function useCodegenGeneratedAdoPrimitiveLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoPrimitiveDocument, options);
}
exports.useCodegenGeneratedAdoPrimitiveLazyQuery = useCodegenGeneratedAdoPrimitiveLazyQuery;
function refetchCodegenGeneratedAdoPrimitiveQuery(variables) {
    return { query: exports.CodegenGeneratedAdoPrimitiveDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoPrimitiveQuery = refetchCodegenGeneratedAdoPrimitiveQuery;
exports.CodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATE_LIMITING_WITHDRAWALS_ACCOUNTDETAILS($ADO_rate_limiting_withdrawals_address: String!) {
  ADO {
    rate_limiting_withdrawals(address: $ADO_rate_limiting_withdrawals_address) {
      accountDetails {
        balance
        latest_withdrawal
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery({
 *   variables: {
 *      ADO_rate_limiting_withdrawals_address: // value for 'ADO_rate_limiting_withdrawals_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery;
function useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsLazyQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsLazyQuery;
function refetchCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery = refetchCodegenGeneratedAdoRateLimitingWithdrawalsAccountdetailsQuery;
exports.CodegenGeneratedAdoRateLimitingWithdrawalsAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATE_LIMITING_WITHDRAWALS_ANDR($ADO_rate_limiting_withdrawals_address: String!) {
  ADO {
    rate_limiting_withdrawals(address: $ADO_rate_limiting_withdrawals_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery({
 *   variables: {
 *      ADO_rate_limiting_withdrawals_address: // value for 'ADO_rate_limiting_withdrawals_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsAndrDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery;
function useCodegenGeneratedAdoRateLimitingWithdrawalsAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsAndrDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsAndrLazyQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsAndrLazyQuery;
function refetchCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRateLimitingWithdrawalsAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery = refetchCodegenGeneratedAdoRateLimitingWithdrawalsAndrQuery;
exports.CodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATE_LIMITING_WITHDRAWALS_COINALLOWANCEDETAILS($ADO_rate_limiting_withdrawals_address: String!) {
  ADO {
    rate_limiting_withdrawals(address: $ADO_rate_limiting_withdrawals_address) {
      coinAllowanceDetails {
        coin
        limit
        minimal_withdrawal_frequency
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery({
 *   variables: {
 *      ADO_rate_limiting_withdrawals_address: // value for 'ADO_rate_limiting_withdrawals_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery;
function useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsLazyQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsLazyQuery;
function refetchCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery = refetchCodegenGeneratedAdoRateLimitingWithdrawalsCoinallowancedetailsQuery;
exports.CodegenGeneratedAdoRateLimitingWithdrawalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATE_LIMITING_WITHDRAWALS($ADO_rate_limiting_withdrawals_address: String!) {
  ADO {
    rate_limiting_withdrawals(address: $ADO_rate_limiting_withdrawals_address) {
      accountDetails {
        balance
        latest_withdrawal
      }
      address
      chainId
      coinAllowanceDetails {
        coin
        limit
        minimal_withdrawal_frequency
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRateLimitingWithdrawalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRateLimitingWithdrawalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRateLimitingWithdrawalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRateLimitingWithdrawalsQuery({
 *   variables: {
 *      ADO_rate_limiting_withdrawals_address: // value for 'ADO_rate_limiting_withdrawals_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRateLimitingWithdrawalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsQuery;
function useCodegenGeneratedAdoRateLimitingWithdrawalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRateLimitingWithdrawalsDocument, options);
}
exports.useCodegenGeneratedAdoRateLimitingWithdrawalsLazyQuery = useCodegenGeneratedAdoRateLimitingWithdrawalsLazyQuery;
function refetchCodegenGeneratedAdoRateLimitingWithdrawalsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRateLimitingWithdrawalsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRateLimitingWithdrawalsQuery = refetchCodegenGeneratedAdoRateLimitingWithdrawalsQuery;
exports.CodegenGeneratedAdoRatesAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_ANDR($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesAndrQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesAndrDocument, options);
}
exports.useCodegenGeneratedAdoRatesAndrQuery = useCodegenGeneratedAdoRatesAndrQuery;
function useCodegenGeneratedAdoRatesAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesAndrDocument, options);
}
exports.useCodegenGeneratedAdoRatesAndrLazyQuery = useCodegenGeneratedAdoRatesAndrLazyQuery;
function refetchCodegenGeneratedAdoRatesAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesAndrQuery = refetchCodegenGeneratedAdoRatesAndrQuery;
exports.CodegenGeneratedAdoRatesPaymentsRateExternalDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_PAYMENTS_RATE_EXTERNAL($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      payments {
        rate {
          external {
            address
            key
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesPaymentsRateExternalQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesPaymentsRateExternalQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesPaymentsRateExternalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesPaymentsRateExternalQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesPaymentsRateExternalQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesPaymentsRateExternalDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateExternalQuery = useCodegenGeneratedAdoRatesPaymentsRateExternalQuery;
function useCodegenGeneratedAdoRatesPaymentsRateExternalLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesPaymentsRateExternalDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateExternalLazyQuery = useCodegenGeneratedAdoRatesPaymentsRateExternalLazyQuery;
function refetchCodegenGeneratedAdoRatesPaymentsRateExternalQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesPaymentsRateExternalDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesPaymentsRateExternalQuery = refetchCodegenGeneratedAdoRatesPaymentsRateExternalQuery;
exports.CodegenGeneratedAdoRatesPaymentsRateFlatDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_PAYMENTS_RATE_FLAT($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      payments {
        rate {
          flat {
            amount
            denom
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesPaymentsRateFlatQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesPaymentsRateFlatQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesPaymentsRateFlatQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesPaymentsRateFlatQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesPaymentsRateFlatQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesPaymentsRateFlatDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateFlatQuery = useCodegenGeneratedAdoRatesPaymentsRateFlatQuery;
function useCodegenGeneratedAdoRatesPaymentsRateFlatLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesPaymentsRateFlatDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateFlatLazyQuery = useCodegenGeneratedAdoRatesPaymentsRateFlatLazyQuery;
function refetchCodegenGeneratedAdoRatesPaymentsRateFlatQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesPaymentsRateFlatDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesPaymentsRateFlatQuery = refetchCodegenGeneratedAdoRatesPaymentsRateFlatQuery;
exports.CodegenGeneratedAdoRatesPaymentsRatePercentDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_PAYMENTS_RATE_PERCENT($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      payments {
        rate {
          percent {
            decimal
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesPaymentsRatePercentQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesPaymentsRatePercentQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesPaymentsRatePercentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesPaymentsRatePercentQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesPaymentsRatePercentQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesPaymentsRatePercentDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRatePercentQuery = useCodegenGeneratedAdoRatesPaymentsRatePercentQuery;
function useCodegenGeneratedAdoRatesPaymentsRatePercentLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesPaymentsRatePercentDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRatePercentLazyQuery = useCodegenGeneratedAdoRatesPaymentsRatePercentLazyQuery;
function refetchCodegenGeneratedAdoRatesPaymentsRatePercentQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesPaymentsRatePercentDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesPaymentsRatePercentQuery = refetchCodegenGeneratedAdoRatesPaymentsRatePercentQuery;
exports.CodegenGeneratedAdoRatesPaymentsRateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_PAYMENTS_RATE($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      payments {
        rate {
          external {
            address
            key
          }
          flat {
            amount
            denom
          }
          percent {
            decimal
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesPaymentsRateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesPaymentsRateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesPaymentsRateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesPaymentsRateQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesPaymentsRateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesPaymentsRateDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateQuery = useCodegenGeneratedAdoRatesPaymentsRateQuery;
function useCodegenGeneratedAdoRatesPaymentsRateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesPaymentsRateDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsRateLazyQuery = useCodegenGeneratedAdoRatesPaymentsRateLazyQuery;
function refetchCodegenGeneratedAdoRatesPaymentsRateQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesPaymentsRateDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesPaymentsRateQuery = refetchCodegenGeneratedAdoRatesPaymentsRateQuery;
exports.CodegenGeneratedAdoRatesPaymentsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES_PAYMENTS($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      payments {
        description
        is_additive
        rate {
          external {
            address
            key
          }
          flat {
            amount
            denom
          }
          percent {
            decimal
          }
        }
        receivers
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesPaymentsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesPaymentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesPaymentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesPaymentsQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesPaymentsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesPaymentsDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsQuery = useCodegenGeneratedAdoRatesPaymentsQuery;
function useCodegenGeneratedAdoRatesPaymentsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesPaymentsDocument, options);
}
exports.useCodegenGeneratedAdoRatesPaymentsLazyQuery = useCodegenGeneratedAdoRatesPaymentsLazyQuery;
function refetchCodegenGeneratedAdoRatesPaymentsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesPaymentsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesPaymentsQuery = refetchCodegenGeneratedAdoRatesPaymentsQuery;
exports.CodegenGeneratedAdoRatesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_RATES($ADO_rates_address: String!) {
  ADO {
    rates(address: $ADO_rates_address) {
      address
      chainId
      payments {
        description
        is_additive
        rate {
          external {
            address
            key
          }
          flat {
            amount
            denom
          }
          percent {
            decimal
          }
        }
        receivers
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoRatesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoRatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoRatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoRatesQuery({
 *   variables: {
 *      ADO_rates_address: // value for 'ADO_rates_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoRatesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoRatesDocument, options);
}
exports.useCodegenGeneratedAdoRatesQuery = useCodegenGeneratedAdoRatesQuery;
function useCodegenGeneratedAdoRatesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoRatesDocument, options);
}
exports.useCodegenGeneratedAdoRatesLazyQuery = useCodegenGeneratedAdoRatesLazyQuery;
function refetchCodegenGeneratedAdoRatesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoRatesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoRatesQuery = refetchCodegenGeneratedAdoRatesQuery;
exports.CodegenGeneratedAdoSplitterAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_SPLITTER_ANDR($ADO_splitter_address: String!) {
  ADO {
    splitter(address: $ADO_splitter_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoSplitterAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoSplitterAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoSplitterAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoSplitterAndrQuery({
 *   variables: {
 *      ADO_splitter_address: // value for 'ADO_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoSplitterAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoSplitterAndrDocument, options);
}
exports.useCodegenGeneratedAdoSplitterAndrQuery = useCodegenGeneratedAdoSplitterAndrQuery;
function useCodegenGeneratedAdoSplitterAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoSplitterAndrDocument, options);
}
exports.useCodegenGeneratedAdoSplitterAndrLazyQuery = useCodegenGeneratedAdoSplitterAndrLazyQuery;
function refetchCodegenGeneratedAdoSplitterAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoSplitterAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoSplitterAndrQuery = refetchCodegenGeneratedAdoSplitterAndrQuery;
exports.CodegenGeneratedAdoSplitterConfigRecipientsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_SPLITTER_CONFIG_RECIPIENTS($ADO_splitter_address: String!) {
  ADO {
    splitter(address: $ADO_splitter_address) {
      config {
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoSplitterConfigRecipientsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoSplitterConfigRecipientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoSplitterConfigRecipientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoSplitterConfigRecipientsQuery({
 *   variables: {
 *      ADO_splitter_address: // value for 'ADO_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoSplitterConfigRecipientsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoSplitterConfigRecipientsDocument, options);
}
exports.useCodegenGeneratedAdoSplitterConfigRecipientsQuery = useCodegenGeneratedAdoSplitterConfigRecipientsQuery;
function useCodegenGeneratedAdoSplitterConfigRecipientsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoSplitterConfigRecipientsDocument, options);
}
exports.useCodegenGeneratedAdoSplitterConfigRecipientsLazyQuery = useCodegenGeneratedAdoSplitterConfigRecipientsLazyQuery;
function refetchCodegenGeneratedAdoSplitterConfigRecipientsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoSplitterConfigRecipientsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoSplitterConfigRecipientsQuery = refetchCodegenGeneratedAdoSplitterConfigRecipientsQuery;
exports.CodegenGeneratedAdoSplitterConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_SPLITTER_CONFIG($ADO_splitter_address: String!) {
  ADO {
    splitter(address: $ADO_splitter_address) {
      config {
        lock
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoSplitterConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoSplitterConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoSplitterConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoSplitterConfigQuery({
 *   variables: {
 *      ADO_splitter_address: // value for 'ADO_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoSplitterConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoSplitterConfigDocument, options);
}
exports.useCodegenGeneratedAdoSplitterConfigQuery = useCodegenGeneratedAdoSplitterConfigQuery;
function useCodegenGeneratedAdoSplitterConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoSplitterConfigDocument, options);
}
exports.useCodegenGeneratedAdoSplitterConfigLazyQuery = useCodegenGeneratedAdoSplitterConfigLazyQuery;
function refetchCodegenGeneratedAdoSplitterConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoSplitterConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoSplitterConfigQuery = refetchCodegenGeneratedAdoSplitterConfigQuery;
exports.CodegenGeneratedAdoSplitterDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_SPLITTER($ADO_splitter_address: String!) {
  ADO {
    splitter(address: $ADO_splitter_address) {
      address
      chainId
      config {
        lock
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoSplitterQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoSplitterQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoSplitterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoSplitterQuery({
 *   variables: {
 *      ADO_splitter_address: // value for 'ADO_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoSplitterQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoSplitterDocument, options);
}
exports.useCodegenGeneratedAdoSplitterQuery = useCodegenGeneratedAdoSplitterQuery;
function useCodegenGeneratedAdoSplitterLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoSplitterDocument, options);
}
exports.useCodegenGeneratedAdoSplitterLazyQuery = useCodegenGeneratedAdoSplitterLazyQuery;
function refetchCodegenGeneratedAdoSplitterQuery(variables) {
    return { query: exports.CodegenGeneratedAdoSplitterDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoSplitterQuery = refetchCodegenGeneratedAdoSplitterQuery;
exports.CodegenGeneratedAdoTimelockAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_ANDR($ADO_timelock_address: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockAndrQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockAndrDocument, options);
}
exports.useCodegenGeneratedAdoTimelockAndrQuery = useCodegenGeneratedAdoTimelockAndrQuery;
function useCodegenGeneratedAdoTimelockAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockAndrDocument, options);
}
exports.useCodegenGeneratedAdoTimelockAndrLazyQuery = useCodegenGeneratedAdoTimelockAndrLazyQuery;
function refetchCodegenGeneratedAdoTimelockAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockAndrQuery = refetchCodegenGeneratedAdoTimelockAndrQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsCoinsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDS_COINS($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFunds_owner: String!, $ADO_timelock_timelock_getLockedFunds_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFunds(
        owner: $ADO_timelock_timelock_getLockedFunds_owner
        recipient: $ADO_timelock_timelock_getLockedFunds_recipient
      ) {
        coins {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFunds_owner: // value for 'ADO_timelock_timelock_getLockedFunds_owner'
 *      ADO_timelock_timelock_getLockedFunds_recipient: // value for 'ADO_timelock_timelock_getLockedFunds_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsCoinsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery = useCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsCoinsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsCoinsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsCoinsLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsCoinsLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsCoinsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsCoinsQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDS_CONDITION_MINIUMFUNDS($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFunds_owner: String!, $ADO_timelock_timelock_getLockedFunds_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFunds(
        owner: $ADO_timelock_timelock_getLockedFunds_owner
        recipient: $ADO_timelock_timelock_getLockedFunds_recipient
      ) {
        condition {
          miniumFunds {
            amount
            denom
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFunds_owner: // value for 'ADO_timelock_timelock_getLockedFunds_owner'
 *      ADO_timelock_timelock_getLockedFunds_recipient: // value for 'ADO_timelock_timelock_getLockedFunds_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery = useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionMiniumfundsQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDS_CONDITION($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFunds_owner: String!, $ADO_timelock_timelock_getLockedFunds_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFunds(
        owner: $ADO_timelock_timelock_getLockedFunds_owner
        recipient: $ADO_timelock_timelock_getLockedFunds_recipient
      ) {
        condition {
          expiration
          miniumFunds {
            amount
            denom
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFunds_owner: // value for 'ADO_timelock_timelock_getLockedFunds_owner'
 *      ADO_timelock_timelock_getLockedFunds_recipient: // value for 'ADO_timelock_timelock_getLockedFunds_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery = useCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsConditionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsConditionLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsConditionLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsConditionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsConditionQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDS($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFunds_owner: String!, $ADO_timelock_timelock_getLockedFunds_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFunds(
        owner: $ADO_timelock_timelock_getLockedFunds_owner
        recipient: $ADO_timelock_timelock_getLockedFunds_recipient
      ) {
        coins {
          amount
          denom
        }
        condition {
          expiration
          miniumFunds {
            amount
            denom
          }
        }
        recipient
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFunds_owner: // value for 'ADO_timelock_timelock_getLockedFunds_owner'
 *      ADO_timelock_timelock_getLockedFunds_recipient: // value for 'ADO_timelock_timelock_getLockedFunds_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsQuery = useCodegenGeneratedAdoTimelockGetlockedfundsQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDSFORRECIPIENT_COINS($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFundsForRecipient_options: AndrSearchOptions!, $ADO_timelock_timelock_getLockedFundsForRecipient_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFundsForRecipient(
        options: $ADO_timelock_timelock_getLockedFundsForRecipient_options
        recipient: $ADO_timelock_timelock_getLockedFundsForRecipient_recipient
      ) {
        coins {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_options: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_options'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_recipient: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientCoinsQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDSFORRECIPIENT_CONDITION_MINIUMFUNDS($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFundsForRecipient_options: AndrSearchOptions!, $ADO_timelock_timelock_getLockedFundsForRecipient_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFundsForRecipient(
        options: $ADO_timelock_timelock_getLockedFundsForRecipient_options
        recipient: $ADO_timelock_timelock_getLockedFundsForRecipient_recipient
      ) {
        condition {
          miniumFunds {
            amount
            denom
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_options: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_options'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_recipient: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionMiniumfundsQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDSFORRECIPIENT_CONDITION($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFundsForRecipient_options: AndrSearchOptions!, $ADO_timelock_timelock_getLockedFundsForRecipient_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFundsForRecipient(
        options: $ADO_timelock_timelock_getLockedFundsForRecipient_options
        recipient: $ADO_timelock_timelock_getLockedFundsForRecipient_recipient
      ) {
        condition {
          expiration
          miniumFunds {
            amount
            denom
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_options: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_options'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_recipient: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientConditionQuery;
exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK_GETLOCKEDFUNDSFORRECIPIENT($ADO_timelock_address: String!, $ADO_timelock_timelock_getLockedFundsForRecipient_options: AndrSearchOptions!, $ADO_timelock_timelock_getLockedFundsForRecipient_recipient: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      getLockedFundsForRecipient(
        options: $ADO_timelock_timelock_getLockedFundsForRecipient_options
        recipient: $ADO_timelock_timelock_getLockedFundsForRecipient_recipient
      ) {
        coins {
          amount
          denom
        }
        condition {
          expiration
          miniumFunds {
            amount
            denom
          }
        }
        recipient
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_options: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_options'
 *      ADO_timelock_timelock_getLockedFundsForRecipient_recipient: // value for 'ADO_timelock_timelock_getLockedFundsForRecipient_recipient'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery;
function useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientDocument, options);
}
exports.useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientLazyQuery = useCodegenGeneratedAdoTimelockGetlockedfundsforrecipientLazyQuery;
function refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockGetlockedfundsforrecipientDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery = refetchCodegenGeneratedAdoTimelockGetlockedfundsforrecipientQuery;
exports.CodegenGeneratedAdoTimelockDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_TIMELOCK($ADO_timelock_address: String!) {
  ADO {
    timelock(address: $ADO_timelock_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoTimelockQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoTimelockQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoTimelockQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoTimelockQuery({
 *   variables: {
 *      ADO_timelock_address: // value for 'ADO_timelock_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoTimelockQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoTimelockDocument, options);
}
exports.useCodegenGeneratedAdoTimelockQuery = useCodegenGeneratedAdoTimelockQuery;
function useCodegenGeneratedAdoTimelockLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoTimelockDocument, options);
}
exports.useCodegenGeneratedAdoTimelockLazyQuery = useCodegenGeneratedAdoTimelockLazyQuery;
function refetchCodegenGeneratedAdoTimelockQuery(variables) {
    return { query: exports.CodegenGeneratedAdoTimelockDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoTimelockQuery = refetchCodegenGeneratedAdoTimelockQuery;
exports.CodegenGeneratedAdoVaultAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VAULT_ANDR($ADO_vault_address: String!) {
  ADO {
    vault(address: $ADO_vault_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVaultAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVaultAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVaultAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVaultAndrQuery({
 *   variables: {
 *      ADO_vault_address: // value for 'ADO_vault_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVaultAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVaultAndrDocument, options);
}
exports.useCodegenGeneratedAdoVaultAndrQuery = useCodegenGeneratedAdoVaultAndrQuery;
function useCodegenGeneratedAdoVaultAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVaultAndrDocument, options);
}
exports.useCodegenGeneratedAdoVaultAndrLazyQuery = useCodegenGeneratedAdoVaultAndrLazyQuery;
function refetchCodegenGeneratedAdoVaultAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVaultAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVaultAndrQuery = refetchCodegenGeneratedAdoVaultAndrQuery;
exports.CodegenGeneratedAdoVaultBalanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VAULT_BALANCE($ADO_vault_address: String!, $ADO_vault_vault_balance_address: String!) {
  ADO {
    vault(address: $ADO_vault_address) {
      balance(address: $ADO_vault_vault_balance_address) {
        amount
        denom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVaultBalanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVaultBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVaultBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVaultBalanceQuery({
 *   variables: {
 *      ADO_vault_address: // value for 'ADO_vault_address'
 *      ADO_vault_vault_balance_address: // value for 'ADO_vault_vault_balance_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVaultBalanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVaultBalanceDocument, options);
}
exports.useCodegenGeneratedAdoVaultBalanceQuery = useCodegenGeneratedAdoVaultBalanceQuery;
function useCodegenGeneratedAdoVaultBalanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVaultBalanceDocument, options);
}
exports.useCodegenGeneratedAdoVaultBalanceLazyQuery = useCodegenGeneratedAdoVaultBalanceLazyQuery;
function refetchCodegenGeneratedAdoVaultBalanceQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVaultBalanceDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVaultBalanceQuery = refetchCodegenGeneratedAdoVaultBalanceQuery;
exports.CodegenGeneratedAdoVaultStrategyaddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VAULT_STRATEGYADDRESS($ADO_vault_address: String!, $ADO_vault_vault_strategyAddress_strategy: String!) {
  ADO {
    vault(address: $ADO_vault_address) {
      strategyAddress(strategy: $ADO_vault_vault_strategyAddress_strategy) {
        address
        strategyType
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVaultStrategyaddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVaultStrategyaddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVaultStrategyaddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVaultStrategyaddressQuery({
 *   variables: {
 *      ADO_vault_address: // value for 'ADO_vault_address'
 *      ADO_vault_vault_strategyAddress_strategy: // value for 'ADO_vault_vault_strategyAddress_strategy'
 *   },
 * });
 */
function useCodegenGeneratedAdoVaultStrategyaddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVaultStrategyaddressDocument, options);
}
exports.useCodegenGeneratedAdoVaultStrategyaddressQuery = useCodegenGeneratedAdoVaultStrategyaddressQuery;
function useCodegenGeneratedAdoVaultStrategyaddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVaultStrategyaddressDocument, options);
}
exports.useCodegenGeneratedAdoVaultStrategyaddressLazyQuery = useCodegenGeneratedAdoVaultStrategyaddressLazyQuery;
function refetchCodegenGeneratedAdoVaultStrategyaddressQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVaultStrategyaddressDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVaultStrategyaddressQuery = refetchCodegenGeneratedAdoVaultStrategyaddressQuery;
exports.CodegenGeneratedAdoVaultDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VAULT($ADO_vault_address: String!) {
  ADO {
    vault(address: $ADO_vault_address) {
      address
      chainId
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVaultQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVaultQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVaultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVaultQuery({
 *   variables: {
 *      ADO_vault_address: // value for 'ADO_vault_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVaultQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVaultDocument, options);
}
exports.useCodegenGeneratedAdoVaultQuery = useCodegenGeneratedAdoVaultQuery;
function useCodegenGeneratedAdoVaultLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVaultDocument, options);
}
exports.useCodegenGeneratedAdoVaultLazyQuery = useCodegenGeneratedAdoVaultLazyQuery;
function refetchCodegenGeneratedAdoVaultQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVaultDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVaultQuery = refetchCodegenGeneratedAdoVaultQuery;
exports.CodegenGeneratedAdoVestingAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VESTING_ANDR($ADO_vesting_address: String!) {
  ADO {
    vesting(address: $ADO_vesting_address) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVestingAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVestingAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVestingAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVestingAndrQuery({
 *   variables: {
 *      ADO_vesting_address: // value for 'ADO_vesting_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVestingAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVestingAndrDocument, options);
}
exports.useCodegenGeneratedAdoVestingAndrQuery = useCodegenGeneratedAdoVestingAndrQuery;
function useCodegenGeneratedAdoVestingAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVestingAndrDocument, options);
}
exports.useCodegenGeneratedAdoVestingAndrLazyQuery = useCodegenGeneratedAdoVestingAndrLazyQuery;
function refetchCodegenGeneratedAdoVestingAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVestingAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVestingAndrQuery = refetchCodegenGeneratedAdoVestingAndrQuery;
exports.CodegenGeneratedAdoVestingBatchDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VESTING_BATCH($ADO_vesting_address: String!, $ADO_vesting_vesting_batch_id: Float!) {
  ADO {
    vesting(address: $ADO_vesting_address) {
      batch(id: $ADO_vesting_vesting_batch_id) {
        amount
        amount_available_to_claim
        amount_claimed
        id
        last_claimed_release_time
        lockup_end
        number_of_available_claims
        release_amount
        release_unit
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVestingBatchQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVestingBatchQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVestingBatchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVestingBatchQuery({
 *   variables: {
 *      ADO_vesting_address: // value for 'ADO_vesting_address'
 *      ADO_vesting_vesting_batch_id: // value for 'ADO_vesting_vesting_batch_id'
 *   },
 * });
 */
function useCodegenGeneratedAdoVestingBatchQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVestingBatchDocument, options);
}
exports.useCodegenGeneratedAdoVestingBatchQuery = useCodegenGeneratedAdoVestingBatchQuery;
function useCodegenGeneratedAdoVestingBatchLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVestingBatchDocument, options);
}
exports.useCodegenGeneratedAdoVestingBatchLazyQuery = useCodegenGeneratedAdoVestingBatchLazyQuery;
function refetchCodegenGeneratedAdoVestingBatchQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVestingBatchDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVestingBatchQuery = refetchCodegenGeneratedAdoVestingBatchQuery;
exports.CodegenGeneratedAdoVestingBatchesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VESTING_BATCHES($ADO_vesting_address: String!) {
  ADO {
    vesting(address: $ADO_vesting_address) {
      batches {
        amount
        amount_available_to_claim
        amount_claimed
        id
        last_claimed_release_time
        lockup_end
        number_of_available_claims
        release_amount
        release_unit
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVestingBatchesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVestingBatchesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVestingBatchesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVestingBatchesQuery({
 *   variables: {
 *      ADO_vesting_address: // value for 'ADO_vesting_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVestingBatchesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVestingBatchesDocument, options);
}
exports.useCodegenGeneratedAdoVestingBatchesQuery = useCodegenGeneratedAdoVestingBatchesQuery;
function useCodegenGeneratedAdoVestingBatchesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVestingBatchesDocument, options);
}
exports.useCodegenGeneratedAdoVestingBatchesLazyQuery = useCodegenGeneratedAdoVestingBatchesLazyQuery;
function refetchCodegenGeneratedAdoVestingBatchesQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVestingBatchesDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVestingBatchesQuery = refetchCodegenGeneratedAdoVestingBatchesQuery;
exports.CodegenGeneratedAdoVestingConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VESTING_CONFIG($ADO_vesting_address: String!) {
  ADO {
    vesting(address: $ADO_vesting_address) {
      config {
        denom
        is_multi_batch_enabled
        recipient
        unbonding_duration
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVestingConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVestingConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVestingConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVestingConfigQuery({
 *   variables: {
 *      ADO_vesting_address: // value for 'ADO_vesting_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVestingConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVestingConfigDocument, options);
}
exports.useCodegenGeneratedAdoVestingConfigQuery = useCodegenGeneratedAdoVestingConfigQuery;
function useCodegenGeneratedAdoVestingConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVestingConfigDocument, options);
}
exports.useCodegenGeneratedAdoVestingConfigLazyQuery = useCodegenGeneratedAdoVestingConfigLazyQuery;
function refetchCodegenGeneratedAdoVestingConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVestingConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVestingConfigQuery = refetchCodegenGeneratedAdoVestingConfigQuery;
exports.CodegenGeneratedAdoVestingDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_VESTING($ADO_vesting_address: String!) {
  ADO {
    vesting(address: $ADO_vesting_address) {
      address
      batches {
        amount
        amount_available_to_claim
        amount_claimed
        id
        last_claimed_release_time
        lockup_end
        number_of_available_claims
        release_amount
        release_unit
      }
      chainId
      config {
        denom
        is_multi_batch_enabled
        recipient
        unbonding_duration
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoVestingQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoVestingQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoVestingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoVestingQuery({
 *   variables: {
 *      ADO_vesting_address: // value for 'ADO_vesting_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoVestingQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoVestingDocument, options);
}
exports.useCodegenGeneratedAdoVestingQuery = useCodegenGeneratedAdoVestingQuery;
function useCodegenGeneratedAdoVestingLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoVestingDocument, options);
}
exports.useCodegenGeneratedAdoVestingLazyQuery = useCodegenGeneratedAdoVestingLazyQuery;
function refetchCodegenGeneratedAdoVestingQuery(variables) {
    return { query: exports.CodegenGeneratedAdoVestingDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoVestingQuery = refetchCodegenGeneratedAdoVestingQuery;
exports.CodegenGeneratedAdoWeightedDistributionSplitterAndrDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_WEIGHTED_DISTRIBUTION_SPLITTER_ANDR($ADO_weighted_distribution_splitter_address: String!) {
  ADO {
    weighted_distribution_splitter(
      address: $ADO_weighted_distribution_splitter_address
    ) {
      andr {
        address
        admin
        appContract
        blockHeightUponCreation
        codeId
        creator
        ibcPortId
        kernelAddress
        label
        originalPublisher
        owner
        ownershipRequest
        permissionedActions
        type
        version
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery({
 *   variables: {
 *      ADO_weighted_distribution_splitter_address: // value for 'ADO_weighted_distribution_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterAndrDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery = useCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery;
function useCodegenGeneratedAdoWeightedDistributionSplitterAndrLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterAndrDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterAndrLazyQuery = useCodegenGeneratedAdoWeightedDistributionSplitterAndrLazyQuery;
function refetchCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery(variables) {
    return { query: exports.CodegenGeneratedAdoWeightedDistributionSplitterAndrDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery = refetchCodegenGeneratedAdoWeightedDistributionSplitterAndrQuery;
exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_WEIGHTED_DISTRIBUTION_SPLITTER_CONFIG_RECIPIENTS($ADO_weighted_distribution_splitter_address: String!) {
  ADO {
    weighted_distribution_splitter(
      address: $ADO_weighted_distribution_splitter_address
    ) {
      config {
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery({
 *   variables: {
 *      ADO_weighted_distribution_splitter_address: // value for 'ADO_weighted_distribution_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery = useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery;
function useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsLazyQuery = useCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsLazyQuery;
function refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery(variables) {
    return { query: exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery = refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigRecipientsQuery;
exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_WEIGHTED_DISTRIBUTION_SPLITTER_CONFIG($ADO_weighted_distribution_splitter_address: String!) {
  ADO {
    weighted_distribution_splitter(
      address: $ADO_weighted_distribution_splitter_address
    ) {
      config {
        lock
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery({
 *   variables: {
 *      ADO_weighted_distribution_splitter_address: // value for 'ADO_weighted_distribution_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery = useCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery;
function useCodegenGeneratedAdoWeightedDistributionSplitterConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterConfigLazyQuery = useCodegenGeneratedAdoWeightedDistributionSplitterConfigLazyQuery;
function refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery(variables) {
    return { query: exports.CodegenGeneratedAdoWeightedDistributionSplitterConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery = refetchCodegenGeneratedAdoWeightedDistributionSplitterConfigQuery;
exports.CodegenGeneratedAdoWeightedDistributionSplitterGetuserweightDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_WEIGHTED_DISTRIBUTION_SPLITTER_GETUSERWEIGHT($ADO_weighted_distribution_splitter_address: String!, $ADO_weighted_distribution_splitter_weighted_distribution_splitter_getUserWeight_user: String!) {
  ADO {
    weighted_distribution_splitter(
      address: $ADO_weighted_distribution_splitter_address
    ) {
      getUserWeight(
        user: $ADO_weighted_distribution_splitter_weighted_distribution_splitter_getUserWeight_user
      ) {
        total_weight
        weight
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery({
 *   variables: {
 *      ADO_weighted_distribution_splitter_address: // value for 'ADO_weighted_distribution_splitter_address'
 *      ADO_weighted_distribution_splitter_weighted_distribution_splitter_getUserWeight_user: // value for 'ADO_weighted_distribution_splitter_weighted_distribution_splitter_getUserWeight_user'
 *   },
 * });
 */
function useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterGetuserweightDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery = useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery;
function useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterGetuserweightDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightLazyQuery = useCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightLazyQuery;
function refetchCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery(variables) {
    return { query: exports.CodegenGeneratedAdoWeightedDistributionSplitterGetuserweightDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery = refetchCodegenGeneratedAdoWeightedDistributionSplitterGetuserweightQuery;
exports.CodegenGeneratedAdoWeightedDistributionSplitterDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO_WEIGHTED_DISTRIBUTION_SPLITTER($ADO_weighted_distribution_splitter_address: String!) {
  ADO {
    weighted_distribution_splitter(
      address: $ADO_weighted_distribution_splitter_address
    ) {
      address
      chainId
      config {
        lock
        recipients {
          percent
          recipient
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdoWeightedDistributionSplitterQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoWeightedDistributionSplitterQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoWeightedDistributionSplitterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoWeightedDistributionSplitterQuery({
 *   variables: {
 *      ADO_weighted_distribution_splitter_address: // value for 'ADO_weighted_distribution_splitter_address'
 *   },
 * });
 */
function useCodegenGeneratedAdoWeightedDistributionSplitterQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterQuery = useCodegenGeneratedAdoWeightedDistributionSplitterQuery;
function useCodegenGeneratedAdoWeightedDistributionSplitterLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoWeightedDistributionSplitterDocument, options);
}
exports.useCodegenGeneratedAdoWeightedDistributionSplitterLazyQuery = useCodegenGeneratedAdoWeightedDistributionSplitterLazyQuery;
function refetchCodegenGeneratedAdoWeightedDistributionSplitterQuery(variables) {
    return { query: exports.CodegenGeneratedAdoWeightedDistributionSplitterDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoWeightedDistributionSplitterQuery = refetchCodegenGeneratedAdoWeightedDistributionSplitterQuery;
exports.CodegenGeneratedAdoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADO {
  ADO {
    receipt
  }
}
    `;
/**
 * __useCodegenGeneratedAdoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedAdoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdoDocument, options);
}
exports.useCodegenGeneratedAdoQuery = useCodegenGeneratedAdoQuery;
function useCodegenGeneratedAdoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdoDocument, options);
}
exports.useCodegenGeneratedAdoLazyQuery = useCodegenGeneratedAdoLazyQuery;
function refetchCodegenGeneratedAdoQuery(variables) {
    return { query: exports.CodegenGeneratedAdoDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdoQuery = refetchCodegenGeneratedAdoQuery;
exports.CodegenGeneratedAdopPackageSchemasReceiveDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADOP_PACKAGE_SCHEMAS_RECEIVE($ADOP_package_adoType: String!) {
  ADOP {
    package(adoType: $ADOP_package_adoType) {
      schemas {
        receive {
          cw20
          cw721
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdopPackageSchemasReceiveQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdopPackageSchemasReceiveQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdopPackageSchemasReceiveQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdopPackageSchemasReceiveQuery({
 *   variables: {
 *      ADOP_package_adoType: // value for 'ADOP_package_adoType'
 *   },
 * });
 */
function useCodegenGeneratedAdopPackageSchemasReceiveQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdopPackageSchemasReceiveDocument, options);
}
exports.useCodegenGeneratedAdopPackageSchemasReceiveQuery = useCodegenGeneratedAdopPackageSchemasReceiveQuery;
function useCodegenGeneratedAdopPackageSchemasReceiveLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdopPackageSchemasReceiveDocument, options);
}
exports.useCodegenGeneratedAdopPackageSchemasReceiveLazyQuery = useCodegenGeneratedAdopPackageSchemasReceiveLazyQuery;
function refetchCodegenGeneratedAdopPackageSchemasReceiveQuery(variables) {
    return { query: exports.CodegenGeneratedAdopPackageSchemasReceiveDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdopPackageSchemasReceiveQuery = refetchCodegenGeneratedAdopPackageSchemasReceiveQuery;
exports.CodegenGeneratedAdopPackageSchemasDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADOP_PACKAGE_SCHEMAS($ADOP_package_adoType: String!) {
  ADOP {
    package(adoType: $ADOP_package_adoType) {
      schemas {
        contract_schema
        execute
        instantiate
        query
        receive {
          cw20
          cw721
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdopPackageSchemasQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdopPackageSchemasQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdopPackageSchemasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdopPackageSchemasQuery({
 *   variables: {
 *      ADOP_package_adoType: // value for 'ADOP_package_adoType'
 *   },
 * });
 */
function useCodegenGeneratedAdopPackageSchemasQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdopPackageSchemasDocument, options);
}
exports.useCodegenGeneratedAdopPackageSchemasQuery = useCodegenGeneratedAdopPackageSchemasQuery;
function useCodegenGeneratedAdopPackageSchemasLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdopPackageSchemasDocument, options);
}
exports.useCodegenGeneratedAdopPackageSchemasLazyQuery = useCodegenGeneratedAdopPackageSchemasLazyQuery;
function refetchCodegenGeneratedAdopPackageSchemasQuery(variables) {
    return { query: exports.CodegenGeneratedAdopPackageSchemasDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdopPackageSchemasQuery = refetchCodegenGeneratedAdopPackageSchemasQuery;
exports.CodegenGeneratedAdopPackageDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADOP_PACKAGE($ADOP_package_adoType: String!) {
  ADOP {
    package(adoType: $ADOP_package_adoType) {
      name
      schemas {
        contract_schema
        execute
        instantiate
        query
        receive {
          cw20
          cw721
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAdopPackageQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdopPackageQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdopPackageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdopPackageQuery({
 *   variables: {
 *      ADOP_package_adoType: // value for 'ADOP_package_adoType'
 *   },
 * });
 */
function useCodegenGeneratedAdopPackageQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdopPackageDocument, options);
}
exports.useCodegenGeneratedAdopPackageQuery = useCodegenGeneratedAdopPackageQuery;
function useCodegenGeneratedAdopPackageLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdopPackageDocument, options);
}
exports.useCodegenGeneratedAdopPackageLazyQuery = useCodegenGeneratedAdopPackageLazyQuery;
function refetchCodegenGeneratedAdopPackageQuery(variables) {
    return { query: exports.CodegenGeneratedAdopPackageDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdopPackageQuery = refetchCodegenGeneratedAdopPackageQuery;
exports.CodegenGeneratedAdopDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ADOP {
  ADOP {
    adoTypes
  }
}
    `;
/**
 * __useCodegenGeneratedAdopQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdopQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdopQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdopQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedAdopQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAdopDocument, options);
}
exports.useCodegenGeneratedAdopQuery = useCodegenGeneratedAdopQuery;
function useCodegenGeneratedAdopLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAdopDocument, options);
}
exports.useCodegenGeneratedAdopLazyQuery = useCodegenGeneratedAdopLazyQuery;
function refetchCodegenGeneratedAdopQuery(variables) {
    return { query: exports.CodegenGeneratedAdopDocument, variables: variables };
}
exports.refetchCodegenGeneratedAdopQuery = refetchCodegenGeneratedAdopQuery;
exports.CodegenGeneratedAccountsAssetsComponentsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ACCOUNTS_ASSETS_COMPONENTS($accounts_assets_adoType: String, $accounts_assets_appContract: String, $accounts_assets_instantiateOwner: String, $accounts_assets_kernel: String, $accounts_assets_limit: Int!, $accounts_assets_memo: String, $accounts_assets_offset: Int!, $accounts_assets_orderBy: AndrOrderBy, $accounts_assets_owner: String, $accounts_assets_ownershipRequest: String, $accounts_assets_search: String, $accounts_assets_walletAddress: String!, $accounts_assets_assets_components_componentType: AdoType, $accounts_assets_assets_components_limit: Int!, $accounts_assets_assets_components_offset: Int!) {
  accounts {
    assets(
      adoType: $accounts_assets_adoType
      appContract: $accounts_assets_appContract
      instantiateOwner: $accounts_assets_instantiateOwner
      kernel: $accounts_assets_kernel
      limit: $accounts_assets_limit
      memo: $accounts_assets_memo
      offset: $accounts_assets_offset
      orderBy: $accounts_assets_orderBy
      owner: $accounts_assets_owner
      ownershipRequest: $accounts_assets_ownershipRequest
      search: $accounts_assets_search
      walletAddress: $accounts_assets_walletAddress
    ) {
      components(
        componentType: $accounts_assets_assets_components_componentType
        limit: $accounts_assets_assets_components_limit
        offset: $accounts_assets_assets_components_offset
      ) {
        address
        ado_type
        instantiate_msg
        name
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAccountsAssetsComponentsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAccountsAssetsComponentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAccountsAssetsComponentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAccountsAssetsComponentsQuery({
 *   variables: {
 *      accounts_assets_adoType: // value for 'accounts_assets_adoType'
 *      accounts_assets_appContract: // value for 'accounts_assets_appContract'
 *      accounts_assets_instantiateOwner: // value for 'accounts_assets_instantiateOwner'
 *      accounts_assets_kernel: // value for 'accounts_assets_kernel'
 *      accounts_assets_limit: // value for 'accounts_assets_limit'
 *      accounts_assets_memo: // value for 'accounts_assets_memo'
 *      accounts_assets_offset: // value for 'accounts_assets_offset'
 *      accounts_assets_orderBy: // value for 'accounts_assets_orderBy'
 *      accounts_assets_owner: // value for 'accounts_assets_owner'
 *      accounts_assets_ownershipRequest: // value for 'accounts_assets_ownershipRequest'
 *      accounts_assets_search: // value for 'accounts_assets_search'
 *      accounts_assets_walletAddress: // value for 'accounts_assets_walletAddress'
 *      accounts_assets_assets_components_componentType: // value for 'accounts_assets_assets_components_componentType'
 *      accounts_assets_assets_components_limit: // value for 'accounts_assets_assets_components_limit'
 *      accounts_assets_assets_components_offset: // value for 'accounts_assets_assets_components_offset'
 *   },
 * });
 */
function useCodegenGeneratedAccountsAssetsComponentsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAccountsAssetsComponentsDocument, options);
}
exports.useCodegenGeneratedAccountsAssetsComponentsQuery = useCodegenGeneratedAccountsAssetsComponentsQuery;
function useCodegenGeneratedAccountsAssetsComponentsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAccountsAssetsComponentsDocument, options);
}
exports.useCodegenGeneratedAccountsAssetsComponentsLazyQuery = useCodegenGeneratedAccountsAssetsComponentsLazyQuery;
function refetchCodegenGeneratedAccountsAssetsComponentsQuery(variables) {
    return { query: exports.CodegenGeneratedAccountsAssetsComponentsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAccountsAssetsComponentsQuery = refetchCodegenGeneratedAccountsAssetsComponentsQuery;
exports.CodegenGeneratedAccountsAssetsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ACCOUNTS_ASSETS($accounts_assets_adoType: String, $accounts_assets_appContract: String, $accounts_assets_instantiateOwner: String, $accounts_assets_kernel: String, $accounts_assets_limit: Int!, $accounts_assets_memo: String, $accounts_assets_offset: Int!, $accounts_assets_orderBy: AndrOrderBy, $accounts_assets_owner: String, $accounts_assets_ownershipRequest: String, $accounts_assets_search: String, $accounts_assets_walletAddress: String!) {
  accounts {
    assets(
      adoType: $accounts_assets_adoType
      appContract: $accounts_assets_appContract
      instantiateOwner: $accounts_assets_instantiateOwner
      kernel: $accounts_assets_kernel
      limit: $accounts_assets_limit
      memo: $accounts_assets_memo
      offset: $accounts_assets_offset
      orderBy: $accounts_assets_orderBy
      owner: $accounts_assets_owner
      ownershipRequest: $accounts_assets_ownershipRequest
      search: $accounts_assets_search
      walletAddress: $accounts_assets_walletAddress
    ) {
      address
      adoType
      appContract
      chainId
      disowned
      instantiateHash
      instantiateHeight
      instantiateOwner
      kernel
      lastUpdatedHash
      lastUpdatedHeight
      memo
      minter
      name
      owner
      ownershipRequest
    }
  }
}
    `;
/**
 * __useCodegenGeneratedAccountsAssetsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAccountsAssetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAccountsAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAccountsAssetsQuery({
 *   variables: {
 *      accounts_assets_adoType: // value for 'accounts_assets_adoType'
 *      accounts_assets_appContract: // value for 'accounts_assets_appContract'
 *      accounts_assets_instantiateOwner: // value for 'accounts_assets_instantiateOwner'
 *      accounts_assets_kernel: // value for 'accounts_assets_kernel'
 *      accounts_assets_limit: // value for 'accounts_assets_limit'
 *      accounts_assets_memo: // value for 'accounts_assets_memo'
 *      accounts_assets_offset: // value for 'accounts_assets_offset'
 *      accounts_assets_orderBy: // value for 'accounts_assets_orderBy'
 *      accounts_assets_owner: // value for 'accounts_assets_owner'
 *      accounts_assets_ownershipRequest: // value for 'accounts_assets_ownershipRequest'
 *      accounts_assets_search: // value for 'accounts_assets_search'
 *      accounts_assets_walletAddress: // value for 'accounts_assets_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedAccountsAssetsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAccountsAssetsDocument, options);
}
exports.useCodegenGeneratedAccountsAssetsQuery = useCodegenGeneratedAccountsAssetsQuery;
function useCodegenGeneratedAccountsAssetsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAccountsAssetsDocument, options);
}
exports.useCodegenGeneratedAccountsAssetsLazyQuery = useCodegenGeneratedAccountsAssetsLazyQuery;
function refetchCodegenGeneratedAccountsAssetsQuery(variables) {
    return { query: exports.CodegenGeneratedAccountsAssetsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAccountsAssetsQuery = refetchCodegenGeneratedAccountsAssetsQuery;
exports.CodegenGeneratedAccountsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ACCOUNTS {
  accounts {
    wallets
  }
}
    `;
/**
 * __useCodegenGeneratedAccountsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAccountsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedAccountsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedAccountsDocument, options);
}
exports.useCodegenGeneratedAccountsQuery = useCodegenGeneratedAccountsQuery;
function useCodegenGeneratedAccountsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedAccountsDocument, options);
}
exports.useCodegenGeneratedAccountsLazyQuery = useCodegenGeneratedAccountsLazyQuery;
function refetchCodegenGeneratedAccountsQuery(variables) {
    return { query: exports.CodegenGeneratedAccountsDocument, variables: variables };
}
exports.refetchCodegenGeneratedAccountsQuery = refetchCodegenGeneratedAccountsQuery;
exports.CodegenGeneratedChainconfigsAllconfigsIconurlsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_ALLCONFIGS_ICONURLS {
  chainConfigs {
    allConfigs {
      iconUrls {
        lg
        sm
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsAllconfigsIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery = useCodegenGeneratedChainconfigsAllconfigsIconurlsQuery;
function useCodegenGeneratedChainconfigsAllconfigsIconurlsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsAllconfigsIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllconfigsIconurlsLazyQuery = useCodegenGeneratedChainconfigsAllconfigsIconurlsLazyQuery;
function refetchCodegenGeneratedChainconfigsAllconfigsIconurlsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsAllconfigsIconurlsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsAllconfigsIconurlsQuery = refetchCodegenGeneratedChainconfigsAllconfigsIconurlsQuery;
exports.CodegenGeneratedChainconfigsAllconfigsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_ALLCONFIGS {
  chainConfigs {
    allConfigs {
      addressPrefix
      blockExplorerAddressPages
      blockExplorerTxPages
      chainId
      chainName
      chainType
      chainUrl
      defaultFee
      enabled
      iconUrls {
        lg
        sm
      }
      kernelAddress
      name
      registryAddress
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsAllconfigsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsAllconfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsAllconfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsAllconfigsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsAllconfigsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsAllconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllconfigsQuery = useCodegenGeneratedChainconfigsAllconfigsQuery;
function useCodegenGeneratedChainconfigsAllconfigsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsAllconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllconfigsLazyQuery = useCodegenGeneratedChainconfigsAllconfigsLazyQuery;
function refetchCodegenGeneratedChainconfigsAllconfigsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsAllconfigsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsAllconfigsQuery = refetchCodegenGeneratedChainconfigsAllconfigsQuery;
exports.CodegenGeneratedChainconfigsAllstoredconfigsIconurlsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_ALLSTOREDCONFIGS_ICONURLS {
  chainConfigs {
    allStoredConfigs {
      iconUrls {
        lg
        sm
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsAllstoredconfigsIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery = useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery;
function useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsAllstoredconfigsIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsLazyQuery = useCodegenGeneratedChainconfigsAllstoredconfigsIconurlsLazyQuery;
function refetchCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsAllstoredconfigsIconurlsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery = refetchCodegenGeneratedChainconfigsAllstoredconfigsIconurlsQuery;
exports.CodegenGeneratedChainconfigsAllstoredconfigsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_ALLSTOREDCONFIGS {
  chainConfigs {
    allStoredConfigs {
      addressPrefix
      blockExplorerAddressPages
      blockExplorerTxPages
      chainId
      chainName
      chainType
      chainUrl
      defaultFee
      enabled
      iconUrls {
        lg
        sm
      }
      kernelAddress
      name
      registryAddress
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsAllstoredconfigsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsAllstoredconfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsAllstoredconfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsAllstoredconfigsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsAllstoredconfigsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsAllstoredconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllstoredconfigsQuery = useCodegenGeneratedChainconfigsAllstoredconfigsQuery;
function useCodegenGeneratedChainconfigsAllstoredconfigsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsAllstoredconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsAllstoredconfigsLazyQuery = useCodegenGeneratedChainconfigsAllstoredconfigsLazyQuery;
function refetchCodegenGeneratedChainconfigsAllstoredconfigsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsAllstoredconfigsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsAllstoredconfigsQuery = refetchCodegenGeneratedChainconfigsAllstoredconfigsQuery;
exports.CodegenGeneratedChainconfigsConfigIconurlsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_CONFIG_ICONURLS($chainConfigs_config_identifier: String!) {
  chainConfigs {
    config(identifier: $chainConfigs_config_identifier) {
      iconUrls {
        lg
        sm
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsConfigIconurlsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsConfigIconurlsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsConfigIconurlsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsConfigIconurlsQuery({
 *   variables: {
 *      chainConfigs_config_identifier: // value for 'chainConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsConfigIconurlsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsConfigIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsConfigIconurlsQuery = useCodegenGeneratedChainconfigsConfigIconurlsQuery;
function useCodegenGeneratedChainconfigsConfigIconurlsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsConfigIconurlsDocument, options);
}
exports.useCodegenGeneratedChainconfigsConfigIconurlsLazyQuery = useCodegenGeneratedChainconfigsConfigIconurlsLazyQuery;
function refetchCodegenGeneratedChainconfigsConfigIconurlsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsConfigIconurlsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsConfigIconurlsQuery = refetchCodegenGeneratedChainconfigsConfigIconurlsQuery;
exports.CodegenGeneratedChainconfigsConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS_CONFIG($chainConfigs_config_identifier: String!) {
  chainConfigs {
    config(identifier: $chainConfigs_config_identifier) {
      addressPrefix
      blockExplorerAddressPages
      blockExplorerTxPages
      chainId
      chainName
      chainType
      chainUrl
      defaultFee
      enabled
      iconUrls {
        lg
        sm
      }
      kernelAddress
      name
      registryAddress
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsConfigQuery({
 *   variables: {
 *      chainConfigs_config_identifier: // value for 'chainConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsConfigDocument, options);
}
exports.useCodegenGeneratedChainconfigsConfigQuery = useCodegenGeneratedChainconfigsConfigQuery;
function useCodegenGeneratedChainconfigsConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsConfigDocument, options);
}
exports.useCodegenGeneratedChainconfigsConfigLazyQuery = useCodegenGeneratedChainconfigsConfigLazyQuery;
function refetchCodegenGeneratedChainconfigsConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsConfigQuery = refetchCodegenGeneratedChainconfigsConfigQuery;
exports.CodegenGeneratedChainconfigsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINCONFIGS {
  chainConfigs {
    allConfigs {
      addressPrefix
      blockExplorerAddressPages
      blockExplorerTxPages
      chainId
      chainName
      chainType
      chainUrl
      defaultFee
      enabled
      iconUrls {
        lg
        sm
      }
      kernelAddress
      name
      registryAddress
    }
    allStoredConfigs {
      addressPrefix
      blockExplorerAddressPages
      blockExplorerTxPages
      chainId
      chainName
      chainType
      chainUrl
      defaultFee
      enabled
      iconUrls {
        lg
        sm
      }
      kernelAddress
      name
      registryAddress
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainconfigsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainconfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainconfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainconfigsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainconfigsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsQuery = useCodegenGeneratedChainconfigsQuery;
function useCodegenGeneratedChainconfigsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainconfigsDocument, options);
}
exports.useCodegenGeneratedChainconfigsLazyQuery = useCodegenGeneratedChainconfigsLazyQuery;
function refetchCodegenGeneratedChainconfigsQuery(variables) {
    return { query: exports.CodegenGeneratedChainconfigsDocument, variables: variables };
}
exports.refetchCodegenGeneratedChainconfigsQuery = refetchCodegenGeneratedChainconfigsQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsBech32ConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_BECH32CONFIG {
  keplrConfigs {
    allConfigs {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsBech32ConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery = useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsBech32ConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsBech32ConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsBech32ConfigQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsBip44Document = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_BIP44 {
  keplrConfigs {
    allConfigs {
      bip44 {
        coinType
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsBip44Query__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsBip44Query` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsBip44Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsBip44Query({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsBip44Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsBip44Document, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsBip44Query = useCodegenGeneratedKeplrconfigsAllconfigsBip44Query;
function useCodegenGeneratedKeplrconfigsAllconfigsBip44LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsBip44Document, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsBip44LazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsBip44LazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsBip44Query(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsBip44Document, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsBip44Query = refetchCodegenGeneratedKeplrconfigsAllconfigsBip44Query;
exports.CodegenGeneratedKeplrconfigsAllconfigsCurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_CURRENCIES {
  keplrConfigs {
    allConfigs {
      currencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsCurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery = useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsCurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsCurrenciesLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsCurrenciesDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsCurrenciesQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_FEECURRENCIES {
  keplrConfigs {
    allConfigs {
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery = useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsFeecurrenciesQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsGaspricestepDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_GASPRICESTEP {
  keplrConfigs {
    allConfigs {
      gasPriceStep {
        average
        high
        low
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsGaspricestepDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery = useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsGaspricestepDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsGaspricestepLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsGaspricestepDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsGaspricestepQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsStakecurrencyDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS_STAKECURRENCY {
  keplrConfigs {
    allConfigs {
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsStakecurrencyDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery = useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsStakecurrencyDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsStakecurrencyDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsStakecurrencyQuery;
exports.CodegenGeneratedKeplrconfigsAllconfigsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_ALLCONFIGS {
  keplrConfigs {
    allConfigs {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
      bip44 {
        coinType
      }
      chainId
      chainName
      coinType
      currencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      gasPriceStep {
        average
        high
        low
      }
      rest
      rpc
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsAllconfigsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsAllconfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsAllconfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsAllconfigsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsAllconfigsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsQuery = useCodegenGeneratedKeplrconfigsAllconfigsQuery;
function useCodegenGeneratedKeplrconfigsAllconfigsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsAllconfigsDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsAllconfigsLazyQuery = useCodegenGeneratedKeplrconfigsAllconfigsLazyQuery;
function refetchCodegenGeneratedKeplrconfigsAllconfigsQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsAllconfigsDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsAllconfigsQuery = refetchCodegenGeneratedKeplrconfigsAllconfigsQuery;
exports.CodegenGeneratedKeplrconfigsConfigBech32ConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_BECH32CONFIG($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigBech32ConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery = useCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery;
function useCodegenGeneratedKeplrconfigsConfigBech32ConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigBech32ConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigBech32ConfigLazyQuery = useCodegenGeneratedKeplrconfigsConfigBech32ConfigLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigBech32ConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery = refetchCodegenGeneratedKeplrconfigsConfigBech32ConfigQuery;
exports.CodegenGeneratedKeplrconfigsConfigBip44Document = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_BIP44($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      bip44 {
        coinType
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigBip44Query__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigBip44Query` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigBip44Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigBip44Query({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigBip44Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigBip44Document, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigBip44Query = useCodegenGeneratedKeplrconfigsConfigBip44Query;
function useCodegenGeneratedKeplrconfigsConfigBip44LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigBip44Document, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigBip44LazyQuery = useCodegenGeneratedKeplrconfigsConfigBip44LazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigBip44Query(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigBip44Document, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigBip44Query = refetchCodegenGeneratedKeplrconfigsConfigBip44Query;
exports.CodegenGeneratedKeplrconfigsConfigCurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_CURRENCIES($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      currencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigCurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery = useCodegenGeneratedKeplrconfigsConfigCurrenciesQuery;
function useCodegenGeneratedKeplrconfigsConfigCurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigCurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigCurrenciesLazyQuery = useCodegenGeneratedKeplrconfigsConfigCurrenciesLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigCurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigCurrenciesDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigCurrenciesQuery = refetchCodegenGeneratedKeplrconfigsConfigCurrenciesQuery;
exports.CodegenGeneratedKeplrconfigsConfigFeecurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_FEECURRENCIES($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigFeecurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery = useCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery;
function useCodegenGeneratedKeplrconfigsConfigFeecurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigFeecurrenciesDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigFeecurrenciesLazyQuery = useCodegenGeneratedKeplrconfigsConfigFeecurrenciesLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigFeecurrenciesDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery = refetchCodegenGeneratedKeplrconfigsConfigFeecurrenciesQuery;
exports.CodegenGeneratedKeplrconfigsConfigGaspricestepDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_GASPRICESTEP($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      gasPriceStep {
        average
        high
        low
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigGaspricestepDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery = useCodegenGeneratedKeplrconfigsConfigGaspricestepQuery;
function useCodegenGeneratedKeplrconfigsConfigGaspricestepLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigGaspricestepDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigGaspricestepLazyQuery = useCodegenGeneratedKeplrconfigsConfigGaspricestepLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigGaspricestepQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigGaspricestepDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigGaspricestepQuery = refetchCodegenGeneratedKeplrconfigsConfigGaspricestepQuery;
exports.CodegenGeneratedKeplrconfigsConfigStakecurrencyDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG_STAKECURRENCY($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigStakecurrencyDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery = useCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery;
function useCodegenGeneratedKeplrconfigsConfigStakecurrencyLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigStakecurrencyDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigStakecurrencyLazyQuery = useCodegenGeneratedKeplrconfigsConfigStakecurrencyLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigStakecurrencyDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery = refetchCodegenGeneratedKeplrconfigsConfigStakecurrencyQuery;
exports.CodegenGeneratedKeplrconfigsConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS_CONFIG($keplrConfigs_config_identifier: String!) {
  keplrConfigs {
    config(identifier: $keplrConfigs_config_identifier) {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
      bip44 {
        coinType
      }
      chainId
      chainName
      coinType
      currencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      gasPriceStep {
        average
        high
        low
      }
      rest
      rpc
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsConfigQuery({
 *   variables: {
 *      keplrConfigs_config_identifier: // value for 'keplrConfigs_config_identifier'
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigQuery = useCodegenGeneratedKeplrconfigsConfigQuery;
function useCodegenGeneratedKeplrconfigsConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsConfigDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsConfigLazyQuery = useCodegenGeneratedKeplrconfigsConfigLazyQuery;
function refetchCodegenGeneratedKeplrconfigsConfigQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsConfigDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsConfigQuery = refetchCodegenGeneratedKeplrconfigsConfigQuery;
exports.CodegenGeneratedKeplrconfigsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_KEPLRCONFIGS {
  keplrConfigs {
    allConfigs {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
      bip44 {
        coinType
      }
      chainId
      chainName
      coinType
      currencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
      gasPriceStep {
        average
        high
        low
      }
      rest
      rpc
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoId
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedKeplrconfigsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedKeplrconfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedKeplrconfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedKeplrconfigsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedKeplrconfigsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedKeplrconfigsDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsQuery = useCodegenGeneratedKeplrconfigsQuery;
function useCodegenGeneratedKeplrconfigsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedKeplrconfigsDocument, options);
}
exports.useCodegenGeneratedKeplrconfigsLazyQuery = useCodegenGeneratedKeplrconfigsLazyQuery;
function refetchCodegenGeneratedKeplrconfigsQuery(variables) {
    return { query: exports.CodegenGeneratedKeplrconfigsDocument, variables: variables };
}
exports.refetchCodegenGeneratedKeplrconfigsQuery = refetchCodegenGeneratedKeplrconfigsQuery;
exports.CodegenGeneratedTxByaccountEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_EVENTS_ATTRIBUTES($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByaccountEventsAttributesQuery = useCodegenGeneratedTxByaccountEventsAttributesQuery;
function useCodegenGeneratedTxByaccountEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByaccountEventsAttributesLazyQuery = useCodegenGeneratedTxByaccountEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByaccountEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountEventsAttributesQuery = refetchCodegenGeneratedTxByaccountEventsAttributesQuery;
exports.CodegenGeneratedTxByaccountEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_EVENTS($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountEventsDocument, options);
}
exports.useCodegenGeneratedTxByaccountEventsQuery = useCodegenGeneratedTxByaccountEventsQuery;
function useCodegenGeneratedTxByaccountEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountEventsDocument, options);
}
exports.useCodegenGeneratedTxByaccountEventsLazyQuery = useCodegenGeneratedTxByaccountEventsLazyQuery;
function refetchCodegenGeneratedTxByaccountEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountEventsQuery = refetchCodegenGeneratedTxByaccountEventsQuery;
exports.CodegenGeneratedTxByaccountMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_MSGRESPONSES($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByaccountMsgresponsesQuery = useCodegenGeneratedTxByaccountMsgresponsesQuery;
function useCodegenGeneratedTxByaccountMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByaccountMsgresponsesLazyQuery = useCodegenGeneratedTxByaccountMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxByaccountMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountMsgresponsesQuery = refetchCodegenGeneratedTxByaccountMsgresponsesQuery;
exports.CodegenGeneratedTxByaccountTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery = useCodegenGeneratedTxByaccountTxlogEventsAttributesQuery;
function useCodegenGeneratedTxByaccountTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxByaccountTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByaccountTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountTxlogEventsAttributesQuery = refetchCodegenGeneratedTxByaccountTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxByaccountTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_TXLOG_EVENTS($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogEventsQuery = useCodegenGeneratedTxByaccountTxlogEventsQuery;
function useCodegenGeneratedTxByaccountTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogEventsLazyQuery = useCodegenGeneratedTxByaccountTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxByaccountTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountTxlogEventsQuery = refetchCodegenGeneratedTxByaccountTxlogEventsQuery;
exports.CodegenGeneratedTxByaccountTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT_TXLOG($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountTxlogDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogQuery = useCodegenGeneratedTxByaccountTxlogQuery;
function useCodegenGeneratedTxByaccountTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountTxlogDocument, options);
}
exports.useCodegenGeneratedTxByaccountTxlogLazyQuery = useCodegenGeneratedTxByaccountTxlogLazyQuery;
function refetchCodegenGeneratedTxByaccountTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountTxlogQuery = refetchCodegenGeneratedTxByaccountTxlogQuery;
exports.CodegenGeneratedTxByaccountDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYACCOUNT($chainId: String!, $tx_byAccount_maxHeight: Int, $tx_byAccount_minHeight: Int, $tx_byAccount_sentFromOrTo: String!) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $tx_byAccount_maxHeight
      minHeight: $tx_byAccount_minHeight
      sentFromOrTo: $tx_byAccount_sentFromOrTo
    ) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByaccountQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByaccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByaccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByaccountQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byAccount_maxHeight: // value for 'tx_byAccount_maxHeight'
 *      tx_byAccount_minHeight: // value for 'tx_byAccount_minHeight'
 *      tx_byAccount_sentFromOrTo: // value for 'tx_byAccount_sentFromOrTo'
 *   },
 * });
 */
function useCodegenGeneratedTxByaccountQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByaccountDocument, options);
}
exports.useCodegenGeneratedTxByaccountQuery = useCodegenGeneratedTxByaccountQuery;
function useCodegenGeneratedTxByaccountLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByaccountDocument, options);
}
exports.useCodegenGeneratedTxByaccountLazyQuery = useCodegenGeneratedTxByaccountLazyQuery;
function refetchCodegenGeneratedTxByaccountQuery(variables) {
    return { query: exports.CodegenGeneratedTxByaccountDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByaccountQuery = refetchCodegenGeneratedTxByaccountQuery;
exports.CodegenGeneratedTxBycontractEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_EVENTS_ATTRIBUTES($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBycontractEventsAttributesQuery = useCodegenGeneratedTxBycontractEventsAttributesQuery;
function useCodegenGeneratedTxBycontractEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBycontractEventsAttributesLazyQuery = useCodegenGeneratedTxBycontractEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxBycontractEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractEventsAttributesQuery = refetchCodegenGeneratedTxBycontractEventsAttributesQuery;
exports.CodegenGeneratedTxBycontractEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_EVENTS($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractEventsDocument, options);
}
exports.useCodegenGeneratedTxBycontractEventsQuery = useCodegenGeneratedTxBycontractEventsQuery;
function useCodegenGeneratedTxBycontractEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractEventsDocument, options);
}
exports.useCodegenGeneratedTxBycontractEventsLazyQuery = useCodegenGeneratedTxBycontractEventsLazyQuery;
function refetchCodegenGeneratedTxBycontractEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractEventsQuery = refetchCodegenGeneratedTxBycontractEventsQuery;
exports.CodegenGeneratedTxBycontractMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_MSGRESPONSES($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxBycontractMsgresponsesQuery = useCodegenGeneratedTxBycontractMsgresponsesQuery;
function useCodegenGeneratedTxBycontractMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxBycontractMsgresponsesLazyQuery = useCodegenGeneratedTxBycontractMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxBycontractMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractMsgresponsesQuery = refetchCodegenGeneratedTxBycontractMsgresponsesQuery;
exports.CodegenGeneratedTxBycontractTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery = useCodegenGeneratedTxBycontractTxlogEventsAttributesQuery;
function useCodegenGeneratedTxBycontractTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxBycontractTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxBycontractTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractTxlogEventsAttributesQuery = refetchCodegenGeneratedTxBycontractTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxBycontractTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_TXLOG_EVENTS($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogEventsQuery = useCodegenGeneratedTxBycontractTxlogEventsQuery;
function useCodegenGeneratedTxBycontractTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogEventsLazyQuery = useCodegenGeneratedTxBycontractTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxBycontractTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractTxlogEventsQuery = refetchCodegenGeneratedTxBycontractTxlogEventsQuery;
exports.CodegenGeneratedTxBycontractTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT_TXLOG($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractTxlogDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogQuery = useCodegenGeneratedTxBycontractTxlogQuery;
function useCodegenGeneratedTxBycontractTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractTxlogDocument, options);
}
exports.useCodegenGeneratedTxBycontractTxlogLazyQuery = useCodegenGeneratedTxBycontractTxlogLazyQuery;
function refetchCodegenGeneratedTxBycontractTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractTxlogQuery = refetchCodegenGeneratedTxBycontractTxlogQuery;
exports.CodegenGeneratedTxBycontractDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYCONTRACT($chainId: String!, $tx_byContract_address: String!, $tx_byContract_maxHeight: Int, $tx_byContract_minHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $tx_byContract_address
      maxHeight: $tx_byContract_maxHeight
      minHeight: $tx_byContract_minHeight
    ) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBycontractQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBycontractQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBycontractQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBycontractQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byContract_address: // value for 'tx_byContract_address'
 *      tx_byContract_maxHeight: // value for 'tx_byContract_maxHeight'
 *      tx_byContract_minHeight: // value for 'tx_byContract_minHeight'
 *   },
 * });
 */
function useCodegenGeneratedTxBycontractQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBycontractDocument, options);
}
exports.useCodegenGeneratedTxBycontractQuery = useCodegenGeneratedTxBycontractQuery;
function useCodegenGeneratedTxBycontractLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBycontractDocument, options);
}
exports.useCodegenGeneratedTxBycontractLazyQuery = useCodegenGeneratedTxBycontractLazyQuery;
function refetchCodegenGeneratedTxBycontractQuery(variables) {
    return { query: exports.CodegenGeneratedTxBycontractDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBycontractQuery = refetchCodegenGeneratedTxBycontractQuery;
exports.CodegenGeneratedTxByhashEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_EVENTS_ATTRIBUTES($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByhashEventsAttributesQuery = useCodegenGeneratedTxByhashEventsAttributesQuery;
function useCodegenGeneratedTxByhashEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByhashEventsAttributesLazyQuery = useCodegenGeneratedTxByhashEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByhashEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashEventsAttributesQuery = refetchCodegenGeneratedTxByhashEventsAttributesQuery;
exports.CodegenGeneratedTxByhashEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_EVENTS($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashEventsDocument, options);
}
exports.useCodegenGeneratedTxByhashEventsQuery = useCodegenGeneratedTxByhashEventsQuery;
function useCodegenGeneratedTxByhashEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashEventsDocument, options);
}
exports.useCodegenGeneratedTxByhashEventsLazyQuery = useCodegenGeneratedTxByhashEventsLazyQuery;
function refetchCodegenGeneratedTxByhashEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashEventsQuery = refetchCodegenGeneratedTxByhashEventsQuery;
exports.CodegenGeneratedTxByhashMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_MSGRESPONSES($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByhashMsgresponsesQuery = useCodegenGeneratedTxByhashMsgresponsesQuery;
function useCodegenGeneratedTxByhashMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByhashMsgresponsesLazyQuery = useCodegenGeneratedTxByhashMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxByhashMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashMsgresponsesQuery = refetchCodegenGeneratedTxByhashMsgresponsesQuery;
exports.CodegenGeneratedTxByhashTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogEventsAttributesQuery = useCodegenGeneratedTxByhashTxlogEventsAttributesQuery;
function useCodegenGeneratedTxByhashTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxByhashTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByhashTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashTxlogEventsAttributesQuery = refetchCodegenGeneratedTxByhashTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxByhashTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_TXLOG_EVENTS($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogEventsQuery = useCodegenGeneratedTxByhashTxlogEventsQuery;
function useCodegenGeneratedTxByhashTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogEventsLazyQuery = useCodegenGeneratedTxByhashTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxByhashTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashTxlogEventsQuery = refetchCodegenGeneratedTxByhashTxlogEventsQuery;
exports.CodegenGeneratedTxByhashTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH_TXLOG($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashTxlogDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogQuery = useCodegenGeneratedTxByhashTxlogQuery;
function useCodegenGeneratedTxByhashTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashTxlogDocument, options);
}
exports.useCodegenGeneratedTxByhashTxlogLazyQuery = useCodegenGeneratedTxByhashTxlogLazyQuery;
function refetchCodegenGeneratedTxByhashTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashTxlogQuery = refetchCodegenGeneratedTxByhashTxlogQuery;
exports.CodegenGeneratedTxByhashDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHASH($chainId: String!, $tx_byHash_hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $tx_byHash_hash) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByhashQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByhashQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByhashQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByhashQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHash_hash: // value for 'tx_byHash_hash'
 *   },
 * });
 */
function useCodegenGeneratedTxByhashQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByhashDocument, options);
}
exports.useCodegenGeneratedTxByhashQuery = useCodegenGeneratedTxByhashQuery;
function useCodegenGeneratedTxByhashLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByhashDocument, options);
}
exports.useCodegenGeneratedTxByhashLazyQuery = useCodegenGeneratedTxByhashLazyQuery;
function refetchCodegenGeneratedTxByhashQuery(variables) {
    return { query: exports.CodegenGeneratedTxByhashDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByhashQuery = refetchCodegenGeneratedTxByhashQuery;
exports.CodegenGeneratedTxByheightEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_EVENTS_ATTRIBUTES($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByheightEventsAttributesQuery = useCodegenGeneratedTxByheightEventsAttributesQuery;
function useCodegenGeneratedTxByheightEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByheightEventsAttributesLazyQuery = useCodegenGeneratedTxByheightEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByheightEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightEventsAttributesQuery = refetchCodegenGeneratedTxByheightEventsAttributesQuery;
exports.CodegenGeneratedTxByheightEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_EVENTS($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightEventsDocument, options);
}
exports.useCodegenGeneratedTxByheightEventsQuery = useCodegenGeneratedTxByheightEventsQuery;
function useCodegenGeneratedTxByheightEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightEventsDocument, options);
}
exports.useCodegenGeneratedTxByheightEventsLazyQuery = useCodegenGeneratedTxByheightEventsLazyQuery;
function refetchCodegenGeneratedTxByheightEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightEventsQuery = refetchCodegenGeneratedTxByheightEventsQuery;
exports.CodegenGeneratedTxByheightMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_MSGRESPONSES($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByheightMsgresponsesQuery = useCodegenGeneratedTxByheightMsgresponsesQuery;
function useCodegenGeneratedTxByheightMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByheightMsgresponsesLazyQuery = useCodegenGeneratedTxByheightMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxByheightMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightMsgresponsesQuery = refetchCodegenGeneratedTxByheightMsgresponsesQuery;
exports.CodegenGeneratedTxByheightTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogEventsAttributesQuery = useCodegenGeneratedTxByheightTxlogEventsAttributesQuery;
function useCodegenGeneratedTxByheightTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxByheightTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByheightTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightTxlogEventsAttributesQuery = refetchCodegenGeneratedTxByheightTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxByheightTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_TXLOG_EVENTS($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogEventsQuery = useCodegenGeneratedTxByheightTxlogEventsQuery;
function useCodegenGeneratedTxByheightTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogEventsLazyQuery = useCodegenGeneratedTxByheightTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxByheightTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightTxlogEventsQuery = refetchCodegenGeneratedTxByheightTxlogEventsQuery;
exports.CodegenGeneratedTxByheightTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT_TXLOG($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightTxlogDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogQuery = useCodegenGeneratedTxByheightTxlogQuery;
function useCodegenGeneratedTxByheightTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightTxlogDocument, options);
}
exports.useCodegenGeneratedTxByheightTxlogLazyQuery = useCodegenGeneratedTxByheightTxlogLazyQuery;
function refetchCodegenGeneratedTxByheightTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightTxlogQuery = refetchCodegenGeneratedTxByheightTxlogQuery;
exports.CodegenGeneratedTxByheightDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYHEIGHT($chainId: String!, $tx_byHeight_height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $tx_byHeight_height) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByheightQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByheightQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByheightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByheightQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byHeight_height: // value for 'tx_byHeight_height'
 *   },
 * });
 */
function useCodegenGeneratedTxByheightQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByheightDocument, options);
}
exports.useCodegenGeneratedTxByheightQuery = useCodegenGeneratedTxByheightQuery;
function useCodegenGeneratedTxByheightLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByheightDocument, options);
}
exports.useCodegenGeneratedTxByheightLazyQuery = useCodegenGeneratedTxByheightLazyQuery;
function refetchCodegenGeneratedTxByheightQuery(variables) {
    return { query: exports.CodegenGeneratedTxByheightDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByheightQuery = refetchCodegenGeneratedTxByheightQuery;
exports.CodegenGeneratedTxByownerEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_EVENTS_ATTRIBUTES($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByownerEventsAttributesQuery = useCodegenGeneratedTxByownerEventsAttributesQuery;
function useCodegenGeneratedTxByownerEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByownerEventsAttributesLazyQuery = useCodegenGeneratedTxByownerEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByownerEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerEventsAttributesQuery = refetchCodegenGeneratedTxByownerEventsAttributesQuery;
exports.CodegenGeneratedTxByownerEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_EVENTS($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerEventsDocument, options);
}
exports.useCodegenGeneratedTxByownerEventsQuery = useCodegenGeneratedTxByownerEventsQuery;
function useCodegenGeneratedTxByownerEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerEventsDocument, options);
}
exports.useCodegenGeneratedTxByownerEventsLazyQuery = useCodegenGeneratedTxByownerEventsLazyQuery;
function refetchCodegenGeneratedTxByownerEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerEventsQuery = refetchCodegenGeneratedTxByownerEventsQuery;
exports.CodegenGeneratedTxByownerMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_MSGRESPONSES($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByownerMsgresponsesQuery = useCodegenGeneratedTxByownerMsgresponsesQuery;
function useCodegenGeneratedTxByownerMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByownerMsgresponsesLazyQuery = useCodegenGeneratedTxByownerMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxByownerMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerMsgresponsesQuery = refetchCodegenGeneratedTxByownerMsgresponsesQuery;
exports.CodegenGeneratedTxByownerTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogEventsAttributesQuery = useCodegenGeneratedTxByownerTxlogEventsAttributesQuery;
function useCodegenGeneratedTxByownerTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxByownerTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByownerTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerTxlogEventsAttributesQuery = refetchCodegenGeneratedTxByownerTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxByownerTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_TXLOG_EVENTS($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogEventsQuery = useCodegenGeneratedTxByownerTxlogEventsQuery;
function useCodegenGeneratedTxByownerTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogEventsLazyQuery = useCodegenGeneratedTxByownerTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxByownerTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerTxlogEventsQuery = refetchCodegenGeneratedTxByownerTxlogEventsQuery;
exports.CodegenGeneratedTxByownerTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER_TXLOG($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerTxlogDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogQuery = useCodegenGeneratedTxByownerTxlogQuery;
function useCodegenGeneratedTxByownerTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerTxlogDocument, options);
}
exports.useCodegenGeneratedTxByownerTxlogLazyQuery = useCodegenGeneratedTxByownerTxlogLazyQuery;
function refetchCodegenGeneratedTxByownerTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerTxlogQuery = refetchCodegenGeneratedTxByownerTxlogQuery;
exports.CodegenGeneratedTxByownerDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYOWNER($chainId: String!, $tx_byOwner_maxHeight: Int, $tx_byOwner_minHeight: Int, $tx_byOwner_walletAddress: String!) {
  tx(chainId: $chainId) {
    byOwner(
      maxHeight: $tx_byOwner_maxHeight
      minHeight: $tx_byOwner_minHeight
      walletAddress: $tx_byOwner_walletAddress
    ) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByownerQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByownerQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByownerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByownerQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byOwner_maxHeight: // value for 'tx_byOwner_maxHeight'
 *      tx_byOwner_minHeight: // value for 'tx_byOwner_minHeight'
 *      tx_byOwner_walletAddress: // value for 'tx_byOwner_walletAddress'
 *   },
 * });
 */
function useCodegenGeneratedTxByownerQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByownerDocument, options);
}
exports.useCodegenGeneratedTxByownerQuery = useCodegenGeneratedTxByownerQuery;
function useCodegenGeneratedTxByownerLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByownerDocument, options);
}
exports.useCodegenGeneratedTxByownerLazyQuery = useCodegenGeneratedTxByownerLazyQuery;
function refetchCodegenGeneratedTxByownerQuery(variables) {
    return { query: exports.CodegenGeneratedTxByownerDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByownerQuery = refetchCodegenGeneratedTxByownerQuery;
exports.CodegenGeneratedTxByrawstringEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_EVENTS_ATTRIBUTES($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringEventsAttributesQuery = useCodegenGeneratedTxByrawstringEventsAttributesQuery;
function useCodegenGeneratedTxByrawstringEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringEventsAttributesLazyQuery = useCodegenGeneratedTxByrawstringEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByrawstringEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringEventsAttributesQuery = refetchCodegenGeneratedTxByrawstringEventsAttributesQuery;
exports.CodegenGeneratedTxByrawstringEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_EVENTS($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringEventsDocument, options);
}
exports.useCodegenGeneratedTxByrawstringEventsQuery = useCodegenGeneratedTxByrawstringEventsQuery;
function useCodegenGeneratedTxByrawstringEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringEventsDocument, options);
}
exports.useCodegenGeneratedTxByrawstringEventsLazyQuery = useCodegenGeneratedTxByrawstringEventsLazyQuery;
function refetchCodegenGeneratedTxByrawstringEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringEventsQuery = refetchCodegenGeneratedTxByrawstringEventsQuery;
exports.CodegenGeneratedTxByrawstringMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_MSGRESPONSES($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringMsgresponsesQuery = useCodegenGeneratedTxByrawstringMsgresponsesQuery;
function useCodegenGeneratedTxByrawstringMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringMsgresponsesLazyQuery = useCodegenGeneratedTxByrawstringMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxByrawstringMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringMsgresponsesQuery = refetchCodegenGeneratedTxByrawstringMsgresponsesQuery;
exports.CodegenGeneratedTxByrawstringTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery = useCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery;
function useCodegenGeneratedTxByrawstringTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxByrawstringTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery = refetchCodegenGeneratedTxByrawstringTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxByrawstringTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_TXLOG_EVENTS($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogEventsQuery = useCodegenGeneratedTxByrawstringTxlogEventsQuery;
function useCodegenGeneratedTxByrawstringTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogEventsLazyQuery = useCodegenGeneratedTxByrawstringTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxByrawstringTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringTxlogEventsQuery = refetchCodegenGeneratedTxByrawstringTxlogEventsQuery;
exports.CodegenGeneratedTxByrawstringTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING_TXLOG($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringTxlogDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogQuery = useCodegenGeneratedTxByrawstringTxlogQuery;
function useCodegenGeneratedTxByrawstringTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringTxlogDocument, options);
}
exports.useCodegenGeneratedTxByrawstringTxlogLazyQuery = useCodegenGeneratedTxByrawstringTxlogLazyQuery;
function refetchCodegenGeneratedTxByrawstringTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringTxlogQuery = refetchCodegenGeneratedTxByrawstringTxlogQuery;
exports.CodegenGeneratedTxByrawstringDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYRAWSTRING($chainId: String!, $tx_byRawString_query: String!) {
  tx(chainId: $chainId) {
    byRawString(query: $tx_byRawString_query) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxByrawstringQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxByrawstringQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxByrawstringQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxByrawstringQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byRawString_query: // value for 'tx_byRawString_query'
 *   },
 * });
 */
function useCodegenGeneratedTxByrawstringQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxByrawstringDocument, options);
}
exports.useCodegenGeneratedTxByrawstringQuery = useCodegenGeneratedTxByrawstringQuery;
function useCodegenGeneratedTxByrawstringLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxByrawstringDocument, options);
}
exports.useCodegenGeneratedTxByrawstringLazyQuery = useCodegenGeneratedTxByrawstringLazyQuery;
function refetchCodegenGeneratedTxByrawstringQuery(variables) {
    return { query: exports.CodegenGeneratedTxByrawstringDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxByrawstringQuery = refetchCodegenGeneratedTxByrawstringQuery;
exports.CodegenGeneratedTxBytagEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      events {
        attributes {
          key
          value
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBytagEventsAttributesQuery = useCodegenGeneratedTxBytagEventsAttributesQuery;
function useCodegenGeneratedTxBytagEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBytagEventsAttributesLazyQuery = useCodegenGeneratedTxBytagEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxBytagEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagEventsAttributesQuery = refetchCodegenGeneratedTxBytagEventsAttributesQuery;
exports.CodegenGeneratedTxBytagEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_EVENTS($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      events {
        attributes {
          key
          value
        }
        type
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagEventsDocument, options);
}
exports.useCodegenGeneratedTxBytagEventsQuery = useCodegenGeneratedTxBytagEventsQuery;
function useCodegenGeneratedTxBytagEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagEventsDocument, options);
}
exports.useCodegenGeneratedTxBytagEventsLazyQuery = useCodegenGeneratedTxBytagEventsLazyQuery;
function refetchCodegenGeneratedTxBytagEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagEventsQuery = refetchCodegenGeneratedTxBytagEventsQuery;
exports.CodegenGeneratedTxBytagMsgresponsesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_MSGRESPONSES($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      msgResponses {
        typeUrl
        value
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagMsgresponsesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagMsgresponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagMsgresponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagMsgresponsesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagMsgresponsesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxBytagMsgresponsesQuery = useCodegenGeneratedTxBytagMsgresponsesQuery;
function useCodegenGeneratedTxBytagMsgresponsesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagMsgresponsesDocument, options);
}
exports.useCodegenGeneratedTxBytagMsgresponsesLazyQuery = useCodegenGeneratedTxBytagMsgresponsesLazyQuery;
function refetchCodegenGeneratedTxBytagMsgresponsesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagMsgresponsesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagMsgresponsesQuery = refetchCodegenGeneratedTxBytagMsgresponsesQuery;
exports.CodegenGeneratedTxBytagTxlogEventsAttributesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_TXLOG_EVENTS_ATTRIBUTES($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagTxlogEventsAttributesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagTxlogEventsAttributesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagTxlogEventsAttributesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagTxlogEventsAttributesQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagTxlogEventsAttributesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogEventsAttributesQuery = useCodegenGeneratedTxBytagTxlogEventsAttributesQuery;
function useCodegenGeneratedTxBytagTxlogEventsAttributesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagTxlogEventsAttributesDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogEventsAttributesLazyQuery = useCodegenGeneratedTxBytagTxlogEventsAttributesLazyQuery;
function refetchCodegenGeneratedTxBytagTxlogEventsAttributesQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagTxlogEventsAttributesDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagTxlogEventsAttributesQuery = refetchCodegenGeneratedTxBytagTxlogEventsAttributesQuery;
exports.CodegenGeneratedTxBytagTxlogEventsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_TXLOG_EVENTS($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagTxlogEventsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagTxlogEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagTxlogEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagTxlogEventsQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagTxlogEventsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogEventsQuery = useCodegenGeneratedTxBytagTxlogEventsQuery;
function useCodegenGeneratedTxBytagTxlogEventsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagTxlogEventsDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogEventsLazyQuery = useCodegenGeneratedTxBytagTxlogEventsLazyQuery;
function refetchCodegenGeneratedTxBytagTxlogEventsQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagTxlogEventsDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagTxlogEventsQuery = refetchCodegenGeneratedTxBytagTxlogEventsQuery;
exports.CodegenGeneratedTxBytagTxlogDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG_TXLOG($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagTxlogQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagTxlogQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagTxlogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagTxlogQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagTxlogQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagTxlogDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogQuery = useCodegenGeneratedTxBytagTxlogQuery;
function useCodegenGeneratedTxBytagTxlogLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagTxlogDocument, options);
}
exports.useCodegenGeneratedTxBytagTxlogLazyQuery = useCodegenGeneratedTxBytagTxlogLazyQuery;
function refetchCodegenGeneratedTxBytagTxlogQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagTxlogDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagTxlogQuery = refetchCodegenGeneratedTxBytagTxlogQuery;
exports.CodegenGeneratedTxBytagDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX_BYTAG($chainId: String!, $tx_byTag_maxHeight: Int, $tx_byTag_minHeight: Int, $tx_byTag_tags: JSON!) {
  tx(chainId: $chainId) {
    byTag(
      maxHeight: $tx_byTag_maxHeight
      minHeight: $tx_byTag_minHeight
      tags: $tx_byTag_tags
    ) {
      code
      events {
        attributes {
          key
          value
        }
        type
      }
      gasUsed
      gasWanted
      hash
      height
      msgResponses {
        typeUrl
        value
      }
      rawLog
      tx
      txIndex
      txLog {
        events {
          attributes {
            key
            value
          }
          type
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTxBytagQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxBytagQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxBytagQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxBytagQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      tx_byTag_maxHeight: // value for 'tx_byTag_maxHeight'
 *      tx_byTag_minHeight: // value for 'tx_byTag_minHeight'
 *      tx_byTag_tags: // value for 'tx_byTag_tags'
 *   },
 * });
 */
function useCodegenGeneratedTxBytagQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxBytagDocument, options);
}
exports.useCodegenGeneratedTxBytagQuery = useCodegenGeneratedTxBytagQuery;
function useCodegenGeneratedTxBytagLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxBytagDocument, options);
}
exports.useCodegenGeneratedTxBytagLazyQuery = useCodegenGeneratedTxBytagLazyQuery;
function refetchCodegenGeneratedTxBytagQuery(variables) {
    return { query: exports.CodegenGeneratedTxBytagDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxBytagQuery = refetchCodegenGeneratedTxBytagQuery;
exports.CodegenGeneratedTxDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TX($chainId: String!) {
  tx(chainId: $chainId) {
    chainId
  }
}
    `;
/**
 * __useCodegenGeneratedTxQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTxQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTxQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTxQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *   },
 * });
 */
function useCodegenGeneratedTxQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTxDocument, options);
}
exports.useCodegenGeneratedTxQuery = useCodegenGeneratedTxQuery;
function useCodegenGeneratedTxLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTxDocument, options);
}
exports.useCodegenGeneratedTxLazyQuery = useCodegenGeneratedTxLazyQuery;
function refetchCodegenGeneratedTxQuery(variables) {
    return { query: exports.CodegenGeneratedTxDocument, variables: variables };
}
exports.refetchCodegenGeneratedTxQuery = refetchCodegenGeneratedTxQuery;
exports.CodegenGeneratedAdoaddedDocument = (0, client_1.gql) `
    subscription CODEGEN_GENERATED_ADOADDED($filter: AdoAddedSubscriptionInput!) {
  adoAdded(filter: $filter) {
    address
    adoType
    appContract
    chainId
    instantiateHash
    instantiateHeight
    lastUpdatedHash
    lastUpdatedHeight
    minter
    name
    owner
  }
}
    `;
/**
 * __useCodegenGeneratedAdoaddedSubscription__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoaddedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoaddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoaddedSubscription({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
function useCodegenGeneratedAdoaddedSubscription(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useSubscription(exports.CodegenGeneratedAdoaddedDocument, options);
}
exports.useCodegenGeneratedAdoaddedSubscription = useCodegenGeneratedAdoaddedSubscription;
exports.CodegenGeneratedAdoownerupdatedDocument = (0, client_1.gql) `
    subscription CODEGEN_GENERATED_ADOOWNERUPDATED($filter: AdoOwnerUpdatedSubscriptionInput!) {
  adoOwnerUpdated(filter: $filter) {
    address
    adoType
    appContract
    chainId
    instantiateHash
    instantiateHeight
    lastUpdatedHash
    lastUpdatedHeight
    minter
    name
    owner
  }
}
    `;
/**
 * __useCodegenGeneratedAdoownerupdatedSubscription__
 *
 * To run a query within a React component, call `useCodegenGeneratedAdoownerupdatedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedAdoownerupdatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedAdoownerupdatedSubscription({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
function useCodegenGeneratedAdoownerupdatedSubscription(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useSubscription(exports.CodegenGeneratedAdoownerupdatedDocument, options);
}
exports.useCodegenGeneratedAdoownerupdatedSubscription = useCodegenGeneratedAdoownerupdatedSubscription;
exports.TxByAccountDocument = (0, client_1.gql) `
    query TX_BY_ACCOUNT($chainId: String!, $sentFromOrTo: String!, $minHeight: Int, $maxHeight: Int) {
  tx(chainId: $chainId) {
    byAccount(
      maxHeight: $maxHeight
      minHeight: $minHeight
      sentFromOrTo: $sentFromOrTo
    ) {
      ...txInfo
    }
  }
}
    ${exports.TxInfoFragmentDoc}`;
/**
 * __useTxByAccountQuery__
 *
 * To run a query within a React component, call `useTxByAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useTxByAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTxByAccountQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      sentFromOrTo: // value for 'sentFromOrTo'
 *      minHeight: // value for 'minHeight'
 *      maxHeight: // value for 'maxHeight'
 *   },
 * });
 */
function useTxByAccountQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.TxByAccountDocument, options);
}
exports.useTxByAccountQuery = useTxByAccountQuery;
function useTxByAccountLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.TxByAccountDocument, options);
}
exports.useTxByAccountLazyQuery = useTxByAccountLazyQuery;
function refetchTxByAccountQuery(variables) {
    return { query: exports.TxByAccountDocument, variables: variables };
}
exports.refetchTxByAccountQuery = refetchTxByAccountQuery;
exports.TxByContractDocument = (0, client_1.gql) `
    query TX_BY_CONTRACT($chainId: String!, $contractAddress: String!, $minHeight: Int, $maxHeight: Int) {
  tx(chainId: $chainId) {
    byContract(
      address: $contractAddress
      minHeight: $minHeight
      maxHeight: $maxHeight
    ) {
      ...txInfo
    }
  }
}
    ${exports.TxInfoFragmentDoc}`;
/**
 * __useTxByContractQuery__
 *
 * To run a query within a React component, call `useTxByContractQuery` and pass it any options that fit your needs.
 * When your component renders, `useTxByContractQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTxByContractQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      contractAddress: // value for 'contractAddress'
 *      minHeight: // value for 'minHeight'
 *      maxHeight: // value for 'maxHeight'
 *   },
 * });
 */
function useTxByContractQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.TxByContractDocument, options);
}
exports.useTxByContractQuery = useTxByContractQuery;
function useTxByContractLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.TxByContractDocument, options);
}
exports.useTxByContractLazyQuery = useTxByContractLazyQuery;
function refetchTxByContractQuery(variables) {
    return { query: exports.TxByContractDocument, variables: variables };
}
exports.refetchTxByContractQuery = refetchTxByContractQuery;
exports.TxByHeightDocument = (0, client_1.gql) `
    query TX_BY_HEIGHT($chainId: String!, $height: Float!) {
  tx(chainId: $chainId) {
    byHeight(height: $height) {
      ...txInfo
    }
  }
}
    ${exports.TxInfoFragmentDoc}`;
/**
 * __useTxByHeightQuery__
 *
 * To run a query within a React component, call `useTxByHeightQuery` and pass it any options that fit your needs.
 * When your component renders, `useTxByHeightQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTxByHeightQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      height: // value for 'height'
 *   },
 * });
 */
function useTxByHeightQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.TxByHeightDocument, options);
}
exports.useTxByHeightQuery = useTxByHeightQuery;
function useTxByHeightLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.TxByHeightDocument, options);
}
exports.useTxByHeightLazyQuery = useTxByHeightLazyQuery;
function refetchTxByHeightQuery(variables) {
    return { query: exports.TxByHeightDocument, variables: variables };
}
exports.refetchTxByHeightQuery = refetchTxByHeightQuery;
exports.TxByHashDocument = (0, client_1.gql) `
    query TX_BY_HASH($chainId: String!, $hash: String!) {
  tx(chainId: $chainId) {
    byHash(hash: $hash) {
      ...txInfo
    }
  }
}
    ${exports.TxInfoFragmentDoc}`;
/**
 * __useTxByHashQuery__
 *
 * To run a query within a React component, call `useTxByHashQuery` and pass it any options that fit your needs.
 * When your component renders, `useTxByHashQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTxByHashQuery({
 *   variables: {
 *      chainId: // value for 'chainId'
 *      hash: // value for 'hash'
 *   },
 * });
 */
function useTxByHashQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.TxByHashDocument, options);
}
exports.useTxByHashQuery = useTxByHashQuery;
function useTxByHashLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.TxByHashDocument, options);
}
exports.useTxByHashLazyQuery = useTxByHashLazyQuery;
function refetchTxByHashQuery(variables) {
    return { query: exports.TxByHashDocument, variables: variables };
}
exports.refetchTxByHashQuery = refetchTxByHashQuery;
